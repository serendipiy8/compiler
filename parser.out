Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BITWISE_NOT
    CLOSE_BRACE
    OPEN_BRACE

Grammar

Rule 0     S' -> program
Rule 1     program -> program declaration
Rule 2     program -> empty
Rule 3     statement -> declaration
Rule 4     statement -> expression_statement
Rule 5     declaration -> type declaration_list SEMICOLON
Rule 6     declaration -> declaration_without_type SEMICOLON
Rule 7     declaration_list -> declaration_item
Rule 8     declaration_list -> declaration_list COMMA declaration_item
Rule 9     declaration_item -> IDENTIFIER
Rule 10    declaration_item -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET
Rule 11    declaration_item -> IDENTIFIER ASSIGN expression
Rule 12    declaration_item -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN expression
Rule 13    declaration_item -> IDENTIFIER ASSIGN float_constant
Rule 14    declaration_item -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN float_constant
Rule 15    declaration_without_type -> IDENTIFIER
Rule 16    declaration_without_type -> IDENTIFIER ASSIGN expression
Rule 17    declaration_without_type -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET
Rule 18    declaration_without_type -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN expression
Rule 19    declaration_without_type -> IDENTIFIER ASSIGN float_constant
Rule 20    declaration_without_type -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN float_constant
Rule 21    type -> INTEGER
Rule 22    type -> CHAR
Rule 23    type -> FLOAT
Rule 24    type -> DOUBLE
Rule 25    expression -> additive_expression
Rule 26    expression -> conditional_expression
Rule 27    expression -> expression LOGICAL_OR expression
Rule 28    expression -> expression LOGICAL_AND expression
Rule 29    expression -> expression BITWISE_OR expression
Rule 30    expression -> expression BITWISE_XOR expression
Rule 31    expression -> expression BITWISE_AND expression
Rule 32    expression -> expression EQUALS expression
Rule 33    expression -> expression NOT_EQUALS expression
Rule 34    expression -> expression LESS_THAN expression
Rule 35    expression -> expression GREATER_THAN expression
Rule 36    expression -> expression LESS_EQUALS expression
Rule 37    expression -> expression GREATER_EQUALS expression
Rule 38    expression -> expression SHIFT_LEFT expression
Rule 39    expression -> expression SHIFT_RIGHT expression
Rule 40    expression_statement -> expression SEMICOLON
Rule 41    assignment_expression -> conditional_expression
Rule 42    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 43    conditional_expression -> logical_or_expression
Rule 44    conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression
Rule 45    conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression
Rule 46    logical_or_expression -> logical_and_expression
Rule 47    logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression
Rule 48    logical_or_expression -> conditional_expression
Rule 49    logical_and_expression -> bitwise_or_expression
Rule 50    logical_and_expression -> logical_and_expression LOGICAL_AND bitwise_or_expression
Rule 51    bitwise_or_expression -> bitwise_xor_expression
Rule 52    bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression
Rule 53    bitwise_xor_expression -> bitwise_and_expression
Rule 54    bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression
Rule 55    bitwise_and_expression -> equality_expression
Rule 56    bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression
Rule 57    equality_expression -> relational_expression
Rule 58    equality_expression -> equality_expression EQUALS relational_expression
Rule 59    equality_expression -> equality_expression NOT_EQUALS relational_expression
Rule 60    relational_expression -> shift_expression
Rule 61    relational_expression -> relational_expression LESS_THAN shift_expression
Rule 62    relational_expression -> relational_expression GREATER_THAN shift_expression
Rule 63    relational_expression -> relational_expression LESS_EQUALS shift_expression
Rule 64    relational_expression -> relational_expression GREATER_EQUALS shift_expression
Rule 65    shift_expression -> additive_expression
Rule 66    shift_expression -> shift_expression SHIFT_LEFT additive_expression
Rule 67    shift_expression -> shift_expression SHIFT_RIGHT additive_expression
Rule 68    additive_expression -> multiplicative_expression
Rule 69    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 70    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 71    multiplicative_expression -> unary_expression
Rule 72    multiplicative_expression -> multiplicative_expression MUL unary_expression
Rule 73    multiplicative_expression -> multiplicative_expression DIV unary_expression
Rule 74    multiplicative_expression -> multiplicative_expression MOD unary_expression
Rule 75    unary_expression -> postfix_expression
Rule 76    unary_expression -> BITWISE_AND unary_expression
Rule 77    unary_expression -> TIMES unary_expression
Rule 78    unary_expression -> PLUS unary_expression
Rule 79    unary_expression -> MINUS unary_expression
Rule 80    unary_expression -> LOGICAL_NOT unary_expression
Rule 81    unary_expression -> INCREMENT unary_expression
Rule 82    unary_expression -> DECREMENT unary_expression
Rule 83    postfix_expression -> primary_expression
Rule 84    postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN
Rule 85    postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
Rule 86    postfix_expression -> postfix_expression DOT IDENTIFIER
Rule 87    postfix_expression -> postfix_expression ARROW IDENTIFIER
Rule 88    postfix_expression -> postfix_expression INCREMENT
Rule 89    postfix_expression -> postfix_expression DECREMENT
Rule 90    primary_expression -> IDENTIFIER
Rule 91    primary_expression -> CONSTANT
Rule 92    primary_expression -> STRING_CONSTANT
Rule 93    primary_expression -> FLOAT
Rule 94    primary_expression -> OPEN_PAREN expression CLOSE_PAREN
Rule 95    basic_expression -> unary_expression
Rule 96    basic_expression -> basic_expression PLUS basic_expression
Rule 97    basic_expression -> basic_expression MINUS basic_expression
Rule 98    basic_expression -> basic_expression MUL basic_expression
Rule 99    basic_expression -> basic_expression DIV basic_expression
Rule 100   basic_expression -> basic_expression MOD basic_expression
Rule 101   basic_expression -> basic_expression INCREMENT
Rule 102   basic_expression -> basic_expression DECREMENT
Rule 103   constant -> INTEGER
Rule 104   constant -> CHAR
Rule 105   constant -> float_constant
Rule 106   integer_constant -> INTEGER
Rule 107   integer_constant -> FLOAT
Rule 108   integer_constant -> MINUS INTEGER
Rule 109   integer_constant -> MINUS FLOAT
Rule 110   float_constant -> FLOAT
Rule 111   float_constant -> MINUS FLOAT
Rule 112   assignment_operator -> =
Rule 113   empty -> <empty>

Terminals, with rules where they appear

=                    : 112
ARROW                : 87
ASSIGN               : 11 12 13 14 16 18 19 20
BITWISE_AND          : 31 56 76
BITWISE_NOT          : 
BITWISE_OR           : 29 52
BITWISE_XOR          : 30 54
CHAR                 : 22 104
CLOSE_BRACE          : 
CLOSE_BRACKET        : 10 12 14 17 18 20 85
CLOSE_PAREN          : 84 94
COLON                : 44
COMMA                : 8 45
CONDITIONAL_OPERATOR : 44 45
CONSTANT             : 10 12 14 17 18 20 91
DECREMENT            : 82 89 102
DIV                  : 73 99
DOT                  : 86
DOUBLE               : 24
EQUALS               : 32 58
FLOAT                : 23 93 107 109 110 111
GREATER_EQUALS       : 37 64
GREATER_THAN         : 35 62
IDENTIFIER           : 9 10 11 12 13 14 15 16 17 18 19 20 86 87 90
INCREMENT            : 81 88 101
INTEGER              : 21 103 106 108
LESS_EQUALS          : 36 63
LESS_THAN            : 34 61
LOGICAL_AND          : 28 50
LOGICAL_NOT          : 80
LOGICAL_OR           : 27 47
MINUS                : 70 79 97 108 109 111
MOD                  : 74 100
MUL                  : 72 98
NOT_EQUALS           : 33 59
OPEN_BRACE           : 
OPEN_BRACKET         : 10 12 14 17 18 20 85
OPEN_PAREN           : 84 94
PLUS                 : 69 78 96
SEMICOLON            : 5 6 40
SHIFT_LEFT           : 38 66
SHIFT_RIGHT          : 39 67
STRING_CONSTANT      : 92
TIMES                : 77
error                : 

Nonterminals, with rules where they appear

additive_expression  : 25 65 66 67 69 70
assignment_expression : 42
assignment_operator  : 42
basic_expression     : 96 96 97 97 98 98 99 99 100 100 101 102
bitwise_and_expression : 53 54 56
bitwise_or_expression : 49 50 52
bitwise_xor_expression : 51 52 54
conditional_expression : 26 41 44 45 48
constant             : 
declaration          : 1 3
declaration_item     : 7 8
declaration_list     : 5 8
declaration_without_type : 6
empty                : 2
equality_expression  : 55 56 58 59
expression           : 11 12 16 18 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 44 45 85 94
expression_statement : 4
float_constant       : 13 14 19 20 105
integer_constant     : 
logical_and_expression : 46 47 50
logical_or_expression : 43 44 45 47
multiplicative_expression : 68 69 70 72 73 74
postfix_expression   : 75 84 85 86 87 88 89
primary_expression   : 83
program              : 1 0
relational_expression : 57 58 59 61 62 63 64
shift_expression     : 60 61 62 63 64 66 67
statement            : 
type                 : 5
unary_expression     : 42 71 72 73 74 76 77 78 79 80 81 82 95

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program declaration
    (2) program -> . empty
    (113) empty -> .

    INTEGER         reduce using rule 113 (empty -> .)
    CHAR            reduce using rule 113 (empty -> .)
    FLOAT           reduce using rule 113 (empty -> .)
    DOUBLE          reduce using rule 113 (empty -> .)
    IDENTIFIER      reduce using rule 113 (empty -> .)
    $end            reduce using rule 113 (empty -> .)

    program                        shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> program .
    (1) program -> program . declaration
    (5) declaration -> . type declaration_list SEMICOLON
    (6) declaration -> . declaration_without_type SEMICOLON
    (21) type -> . INTEGER
    (22) type -> . CHAR
    (23) type -> . FLOAT
    (24) type -> . DOUBLE
    (15) declaration_without_type -> . IDENTIFIER
    (16) declaration_without_type -> . IDENTIFIER ASSIGN expression
    (17) declaration_without_type -> . IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET
    (18) declaration_without_type -> . IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN expression
    (19) declaration_without_type -> . IDENTIFIER ASSIGN float_constant
    (20) declaration_without_type -> . IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN float_constant

    INTEGER         shift and go to state 6
    CHAR            shift and go to state 7
    FLOAT           shift and go to state 8
    DOUBLE          shift and go to state 9
    IDENTIFIER      shift and go to state 10

    declaration                    shift and go to state 3
    type                           shift and go to state 4
    declaration_without_type       shift and go to state 5

state 2

    (2) program -> empty .

    INTEGER         reduce using rule 2 (program -> empty .)
    CHAR            reduce using rule 2 (program -> empty .)
    FLOAT           reduce using rule 2 (program -> empty .)
    DOUBLE          reduce using rule 2 (program -> empty .)
    IDENTIFIER      reduce using rule 2 (program -> empty .)
    $end            reduce using rule 2 (program -> empty .)


state 3

    (1) program -> program declaration .

    INTEGER         reduce using rule 1 (program -> program declaration .)
    CHAR            reduce using rule 1 (program -> program declaration .)
    FLOAT           reduce using rule 1 (program -> program declaration .)
    DOUBLE          reduce using rule 1 (program -> program declaration .)
    IDENTIFIER      reduce using rule 1 (program -> program declaration .)
    $end            reduce using rule 1 (program -> program declaration .)


state 4

    (5) declaration -> type . declaration_list SEMICOLON
    (7) declaration_list -> . declaration_item
    (8) declaration_list -> . declaration_list COMMA declaration_item
    (9) declaration_item -> . IDENTIFIER
    (10) declaration_item -> . IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET
    (11) declaration_item -> . IDENTIFIER ASSIGN expression
    (12) declaration_item -> . IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN expression
    (13) declaration_item -> . IDENTIFIER ASSIGN float_constant
    (14) declaration_item -> . IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN float_constant

    IDENTIFIER      shift and go to state 13

    declaration_list               shift and go to state 11
    declaration_item               shift and go to state 12

state 5

    (6) declaration -> declaration_without_type . SEMICOLON

    SEMICOLON       shift and go to state 14


state 6

    (21) type -> INTEGER .

    IDENTIFIER      reduce using rule 21 (type -> INTEGER .)


state 7

    (22) type -> CHAR .

    IDENTIFIER      reduce using rule 22 (type -> CHAR .)


state 8

    (23) type -> FLOAT .

    IDENTIFIER      reduce using rule 23 (type -> FLOAT .)


state 9

    (24) type -> DOUBLE .

    IDENTIFIER      reduce using rule 24 (type -> DOUBLE .)


state 10

    (15) declaration_without_type -> IDENTIFIER .
    (16) declaration_without_type -> IDENTIFIER . ASSIGN expression
    (17) declaration_without_type -> IDENTIFIER . OPEN_BRACKET CONSTANT CLOSE_BRACKET
    (18) declaration_without_type -> IDENTIFIER . OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN expression
    (19) declaration_without_type -> IDENTIFIER . ASSIGN float_constant
    (20) declaration_without_type -> IDENTIFIER . OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN float_constant

    SEMICOLON       reduce using rule 15 (declaration_without_type -> IDENTIFIER .)
    ASSIGN          shift and go to state 15
    OPEN_BRACKET    shift and go to state 16


state 11

    (5) declaration -> type declaration_list . SEMICOLON
    (8) declaration_list -> declaration_list . COMMA declaration_item

    SEMICOLON       shift and go to state 17
    COMMA           shift and go to state 18


state 12

    (7) declaration_list -> declaration_item .

    SEMICOLON       reduce using rule 7 (declaration_list -> declaration_item .)
    COMMA           reduce using rule 7 (declaration_list -> declaration_item .)


state 13

    (9) declaration_item -> IDENTIFIER .
    (10) declaration_item -> IDENTIFIER . OPEN_BRACKET CONSTANT CLOSE_BRACKET
    (11) declaration_item -> IDENTIFIER . ASSIGN expression
    (12) declaration_item -> IDENTIFIER . OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN expression
    (13) declaration_item -> IDENTIFIER . ASSIGN float_constant
    (14) declaration_item -> IDENTIFIER . OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN float_constant

    SEMICOLON       reduce using rule 9 (declaration_item -> IDENTIFIER .)
    COMMA           reduce using rule 9 (declaration_item -> IDENTIFIER .)
    OPEN_BRACKET    shift and go to state 19
    ASSIGN          shift and go to state 20


state 14

    (6) declaration -> declaration_without_type SEMICOLON .

    INTEGER         reduce using rule 6 (declaration -> declaration_without_type SEMICOLON .)
    CHAR            reduce using rule 6 (declaration -> declaration_without_type SEMICOLON .)
    FLOAT           reduce using rule 6 (declaration -> declaration_without_type SEMICOLON .)
    DOUBLE          reduce using rule 6 (declaration -> declaration_without_type SEMICOLON .)
    IDENTIFIER      reduce using rule 6 (declaration -> declaration_without_type SEMICOLON .)
    $end            reduce using rule 6 (declaration -> declaration_without_type SEMICOLON .)


state 15

    (16) declaration_without_type -> IDENTIFIER ASSIGN . expression
    (19) declaration_without_type -> IDENTIFIER ASSIGN . float_constant
    (25) expression -> . additive_expression
    (26) expression -> . conditional_expression
    (27) expression -> . expression LOGICAL_OR expression
    (28) expression -> . expression LOGICAL_AND expression
    (29) expression -> . expression BITWISE_OR expression
    (30) expression -> . expression BITWISE_XOR expression
    (31) expression -> . expression BITWISE_AND expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression GREATER_THAN expression
    (36) expression -> . expression LESS_EQUALS expression
    (37) expression -> . expression GREATER_EQUALS expression
    (38) expression -> . expression SHIFT_LEFT expression
    (39) expression -> . expression SHIFT_RIGHT expression
    (110) float_constant -> . FLOAT
    (111) float_constant -> . MINUS FLOAT
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression
    (45) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (48) logical_or_expression -> . conditional_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (49) logical_and_expression -> . bitwise_or_expression
    (50) logical_and_expression -> . logical_and_expression LOGICAL_AND bitwise_or_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (51) bitwise_or_expression -> . bitwise_xor_expression
    (52) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (53) bitwise_xor_expression -> . bitwise_and_expression
    (54) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (55) bitwise_and_expression -> . equality_expression
    (56) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (57) equality_expression -> . relational_expression
    (58) equality_expression -> . equality_expression EQUALS relational_expression
    (59) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (60) relational_expression -> . shift_expression
    (61) relational_expression -> . relational_expression LESS_THAN shift_expression
    (62) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (63) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (64) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression

    FLOAT           shift and go to state 27
    MINUS           shift and go to state 28
    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    OPEN_PAREN      shift and go to state 41

    expression                     shift and go to state 22
    float_constant                 shift and go to state 23
    additive_expression            shift and go to state 24
    conditional_expression         shift and go to state 25
    multiplicative_expression      shift and go to state 29
    logical_or_expression          shift and go to state 31
    unary_expression               shift and go to state 32
    logical_and_expression         shift and go to state 33
    postfix_expression             shift and go to state 34
    bitwise_or_expression          shift and go to state 39
    primary_expression             shift and go to state 40
    bitwise_xor_expression         shift and go to state 42
    bitwise_and_expression         shift and go to state 45
    equality_expression            shift and go to state 46
    relational_expression          shift and go to state 47
    shift_expression               shift and go to state 48

state 16

    (17) declaration_without_type -> IDENTIFIER OPEN_BRACKET . CONSTANT CLOSE_BRACKET
    (18) declaration_without_type -> IDENTIFIER OPEN_BRACKET . CONSTANT CLOSE_BRACKET ASSIGN expression
    (20) declaration_without_type -> IDENTIFIER OPEN_BRACKET . CONSTANT CLOSE_BRACKET ASSIGN float_constant

    CONSTANT        shift and go to state 49


state 17

    (5) declaration -> type declaration_list SEMICOLON .

    INTEGER         reduce using rule 5 (declaration -> type declaration_list SEMICOLON .)
    CHAR            reduce using rule 5 (declaration -> type declaration_list SEMICOLON .)
    FLOAT           reduce using rule 5 (declaration -> type declaration_list SEMICOLON .)
    DOUBLE          reduce using rule 5 (declaration -> type declaration_list SEMICOLON .)
    IDENTIFIER      reduce using rule 5 (declaration -> type declaration_list SEMICOLON .)
    $end            reduce using rule 5 (declaration -> type declaration_list SEMICOLON .)


state 18

    (8) declaration_list -> declaration_list COMMA . declaration_item
    (9) declaration_item -> . IDENTIFIER
    (10) declaration_item -> . IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET
    (11) declaration_item -> . IDENTIFIER ASSIGN expression
    (12) declaration_item -> . IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN expression
    (13) declaration_item -> . IDENTIFIER ASSIGN float_constant
    (14) declaration_item -> . IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN float_constant

    IDENTIFIER      shift and go to state 13

    declaration_item               shift and go to state 50

state 19

    (10) declaration_item -> IDENTIFIER OPEN_BRACKET . CONSTANT CLOSE_BRACKET
    (12) declaration_item -> IDENTIFIER OPEN_BRACKET . CONSTANT CLOSE_BRACKET ASSIGN expression
    (14) declaration_item -> IDENTIFIER OPEN_BRACKET . CONSTANT CLOSE_BRACKET ASSIGN float_constant

    CONSTANT        shift and go to state 51


state 20

    (11) declaration_item -> IDENTIFIER ASSIGN . expression
    (13) declaration_item -> IDENTIFIER ASSIGN . float_constant
    (25) expression -> . additive_expression
    (26) expression -> . conditional_expression
    (27) expression -> . expression LOGICAL_OR expression
    (28) expression -> . expression LOGICAL_AND expression
    (29) expression -> . expression BITWISE_OR expression
    (30) expression -> . expression BITWISE_XOR expression
    (31) expression -> . expression BITWISE_AND expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression GREATER_THAN expression
    (36) expression -> . expression LESS_EQUALS expression
    (37) expression -> . expression GREATER_EQUALS expression
    (38) expression -> . expression SHIFT_LEFT expression
    (39) expression -> . expression SHIFT_RIGHT expression
    (110) float_constant -> . FLOAT
    (111) float_constant -> . MINUS FLOAT
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression
    (45) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (48) logical_or_expression -> . conditional_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (49) logical_and_expression -> . bitwise_or_expression
    (50) logical_and_expression -> . logical_and_expression LOGICAL_AND bitwise_or_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (51) bitwise_or_expression -> . bitwise_xor_expression
    (52) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (53) bitwise_xor_expression -> . bitwise_and_expression
    (54) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (55) bitwise_and_expression -> . equality_expression
    (56) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (57) equality_expression -> . relational_expression
    (58) equality_expression -> . equality_expression EQUALS relational_expression
    (59) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (60) relational_expression -> . shift_expression
    (61) relational_expression -> . relational_expression LESS_THAN shift_expression
    (62) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (63) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (64) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression

    FLOAT           shift and go to state 27
    MINUS           shift and go to state 28
    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    OPEN_PAREN      shift and go to state 41

    expression                     shift and go to state 52
    float_constant                 shift and go to state 53
    additive_expression            shift and go to state 24
    conditional_expression         shift and go to state 25
    multiplicative_expression      shift and go to state 29
    logical_or_expression          shift and go to state 31
    unary_expression               shift and go to state 32
    logical_and_expression         shift and go to state 33
    postfix_expression             shift and go to state 34
    bitwise_or_expression          shift and go to state 39
    primary_expression             shift and go to state 40
    bitwise_xor_expression         shift and go to state 42
    bitwise_and_expression         shift and go to state 45
    equality_expression            shift and go to state 46
    relational_expression          shift and go to state 47
    shift_expression               shift and go to state 48

state 21

    (90) primary_expression -> IDENTIFIER .

    OPEN_PAREN      reduce using rule 90 (primary_expression -> IDENTIFIER .)
    OPEN_BRACKET    reduce using rule 90 (primary_expression -> IDENTIFIER .)
    DOT             reduce using rule 90 (primary_expression -> IDENTIFIER .)
    ARROW           reduce using rule 90 (primary_expression -> IDENTIFIER .)
    INCREMENT       reduce using rule 90 (primary_expression -> IDENTIFIER .)
    DECREMENT       reduce using rule 90 (primary_expression -> IDENTIFIER .)
    MUL             reduce using rule 90 (primary_expression -> IDENTIFIER .)
    DIV             reduce using rule 90 (primary_expression -> IDENTIFIER .)
    MOD             reduce using rule 90 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 90 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 90 (primary_expression -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 90 (primary_expression -> IDENTIFIER .)
    LOGICAL_AND     reduce using rule 90 (primary_expression -> IDENTIFIER .)
    BITWISE_OR      reduce using rule 90 (primary_expression -> IDENTIFIER .)
    BITWISE_XOR     reduce using rule 90 (primary_expression -> IDENTIFIER .)
    BITWISE_AND     reduce using rule 90 (primary_expression -> IDENTIFIER .)
    EQUALS          reduce using rule 90 (primary_expression -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 90 (primary_expression -> IDENTIFIER .)
    LESS_THAN       reduce using rule 90 (primary_expression -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 90 (primary_expression -> IDENTIFIER .)
    LESS_EQUALS     reduce using rule 90 (primary_expression -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 90 (primary_expression -> IDENTIFIER .)
    SHIFT_LEFT      reduce using rule 90 (primary_expression -> IDENTIFIER .)
    SHIFT_RIGHT     reduce using rule 90 (primary_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 90 (primary_expression -> IDENTIFIER .)
    CONDITIONAL_OPERATOR reduce using rule 90 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 90 (primary_expression -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 90 (primary_expression -> IDENTIFIER .)
    COLON           reduce using rule 90 (primary_expression -> IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 90 (primary_expression -> IDENTIFIER .)


state 22

    (16) declaration_without_type -> IDENTIFIER ASSIGN expression .
    (27) expression -> expression . LOGICAL_OR expression
    (28) expression -> expression . LOGICAL_AND expression
    (29) expression -> expression . BITWISE_OR expression
    (30) expression -> expression . BITWISE_XOR expression
    (31) expression -> expression . BITWISE_AND expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . GREATER_THAN expression
    (36) expression -> expression . LESS_EQUALS expression
    (37) expression -> expression . GREATER_EQUALS expression
    (38) expression -> expression . SHIFT_LEFT expression
    (39) expression -> expression . SHIFT_RIGHT expression

    SEMICOLON       reduce using rule 16 (declaration_without_type -> IDENTIFIER ASSIGN expression .)
    LOGICAL_OR      shift and go to state 54
    LOGICAL_AND     shift and go to state 55
    BITWISE_OR      shift and go to state 56
    BITWISE_XOR     shift and go to state 57
    BITWISE_AND     shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUALS      shift and go to state 60
    LESS_THAN       shift and go to state 61
    GREATER_THAN    shift and go to state 62
    LESS_EQUALS     shift and go to state 63
    GREATER_EQUALS  shift and go to state 64
    SHIFT_LEFT      shift and go to state 65
    SHIFT_RIGHT     shift and go to state 66


state 23

    (19) declaration_without_type -> IDENTIFIER ASSIGN float_constant .

    SEMICOLON       reduce using rule 19 (declaration_without_type -> IDENTIFIER ASSIGN float_constant .)


state 24

    (25) expression -> additive_expression .
    (69) additive_expression -> additive_expression . PLUS multiplicative_expression
    (70) additive_expression -> additive_expression . MINUS multiplicative_expression
    (65) shift_expression -> additive_expression .

  ! reduce/reduce conflict for SHIFT_LEFT resolved using rule 25 (expression -> additive_expression .)
  ! reduce/reduce conflict for SHIFT_RIGHT resolved using rule 25 (expression -> additive_expression .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 25 (expression -> additive_expression .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 25 (expression -> additive_expression .)
  ! reduce/reduce conflict for LESS_EQUALS resolved using rule 25 (expression -> additive_expression .)
  ! reduce/reduce conflict for GREATER_EQUALS resolved using rule 25 (expression -> additive_expression .)
  ! reduce/reduce conflict for EQUALS resolved using rule 25 (expression -> additive_expression .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 25 (expression -> additive_expression .)
  ! reduce/reduce conflict for BITWISE_AND resolved using rule 25 (expression -> additive_expression .)
  ! reduce/reduce conflict for BITWISE_XOR resolved using rule 25 (expression -> additive_expression .)
  ! reduce/reduce conflict for BITWISE_OR resolved using rule 25 (expression -> additive_expression .)
  ! reduce/reduce conflict for LOGICAL_AND resolved using rule 25 (expression -> additive_expression .)
  ! reduce/reduce conflict for LOGICAL_OR resolved using rule 25 (expression -> additive_expression .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 25 (expression -> additive_expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 25 (expression -> additive_expression .)
  ! reduce/reduce conflict for CLOSE_PAREN resolved using rule 25 (expression -> additive_expression .)
  ! reduce/reduce conflict for COLON resolved using rule 25 (expression -> additive_expression .)
  ! reduce/reduce conflict for CLOSE_BRACKET resolved using rule 25 (expression -> additive_expression .)
    LOGICAL_OR      reduce using rule 25 (expression -> additive_expression .)
    LOGICAL_AND     reduce using rule 25 (expression -> additive_expression .)
    BITWISE_OR      reduce using rule 25 (expression -> additive_expression .)
    BITWISE_XOR     reduce using rule 25 (expression -> additive_expression .)
    BITWISE_AND     reduce using rule 25 (expression -> additive_expression .)
    EQUALS          reduce using rule 25 (expression -> additive_expression .)
    NOT_EQUALS      reduce using rule 25 (expression -> additive_expression .)
    LESS_THAN       reduce using rule 25 (expression -> additive_expression .)
    GREATER_THAN    reduce using rule 25 (expression -> additive_expression .)
    LESS_EQUALS     reduce using rule 25 (expression -> additive_expression .)
    GREATER_EQUALS  reduce using rule 25 (expression -> additive_expression .)
    SHIFT_LEFT      reduce using rule 25 (expression -> additive_expression .)
    SHIFT_RIGHT     reduce using rule 25 (expression -> additive_expression .)
    SEMICOLON       reduce using rule 25 (expression -> additive_expression .)
    COMMA           reduce using rule 25 (expression -> additive_expression .)
    CLOSE_PAREN     reduce using rule 25 (expression -> additive_expression .)
    COLON           reduce using rule 25 (expression -> additive_expression .)
    CLOSE_BRACKET   reduce using rule 25 (expression -> additive_expression .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    CONDITIONAL_OPERATOR reduce using rule 65 (shift_expression -> additive_expression .)

  ! SHIFT_LEFT      [ reduce using rule 65 (shift_expression -> additive_expression .) ]
  ! SHIFT_RIGHT     [ reduce using rule 65 (shift_expression -> additive_expression .) ]
  ! LESS_THAN       [ reduce using rule 65 (shift_expression -> additive_expression .) ]
  ! GREATER_THAN    [ reduce using rule 65 (shift_expression -> additive_expression .) ]
  ! LESS_EQUALS     [ reduce using rule 65 (shift_expression -> additive_expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 65 (shift_expression -> additive_expression .) ]
  ! EQUALS          [ reduce using rule 65 (shift_expression -> additive_expression .) ]
  ! NOT_EQUALS      [ reduce using rule 65 (shift_expression -> additive_expression .) ]
  ! BITWISE_AND     [ reduce using rule 65 (shift_expression -> additive_expression .) ]
  ! BITWISE_XOR     [ reduce using rule 65 (shift_expression -> additive_expression .) ]
  ! BITWISE_OR      [ reduce using rule 65 (shift_expression -> additive_expression .) ]
  ! LOGICAL_AND     [ reduce using rule 65 (shift_expression -> additive_expression .) ]
  ! LOGICAL_OR      [ reduce using rule 65 (shift_expression -> additive_expression .) ]
  ! SEMICOLON       [ reduce using rule 65 (shift_expression -> additive_expression .) ]
  ! COMMA           [ reduce using rule 65 (shift_expression -> additive_expression .) ]
  ! CLOSE_PAREN     [ reduce using rule 65 (shift_expression -> additive_expression .) ]
  ! COLON           [ reduce using rule 65 (shift_expression -> additive_expression .) ]
  ! CLOSE_BRACKET   [ reduce using rule 65 (shift_expression -> additive_expression .) ]


state 25

    (26) expression -> conditional_expression .
    (48) logical_or_expression -> conditional_expression .

  ! reduce/reduce conflict for LOGICAL_OR resolved using rule 26 (expression -> conditional_expression .)
  ! reduce/reduce conflict for LOGICAL_AND resolved using rule 26 (expression -> conditional_expression .)
  ! reduce/reduce conflict for BITWISE_OR resolved using rule 26 (expression -> conditional_expression .)
  ! reduce/reduce conflict for BITWISE_XOR resolved using rule 26 (expression -> conditional_expression .)
  ! reduce/reduce conflict for BITWISE_AND resolved using rule 26 (expression -> conditional_expression .)
  ! reduce/reduce conflict for EQUALS resolved using rule 26 (expression -> conditional_expression .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 26 (expression -> conditional_expression .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 26 (expression -> conditional_expression .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 26 (expression -> conditional_expression .)
  ! reduce/reduce conflict for LESS_EQUALS resolved using rule 26 (expression -> conditional_expression .)
  ! reduce/reduce conflict for GREATER_EQUALS resolved using rule 26 (expression -> conditional_expression .)
  ! reduce/reduce conflict for SHIFT_LEFT resolved using rule 26 (expression -> conditional_expression .)
  ! reduce/reduce conflict for SHIFT_RIGHT resolved using rule 26 (expression -> conditional_expression .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 26 (expression -> conditional_expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 26 (expression -> conditional_expression .)
  ! reduce/reduce conflict for CLOSE_PAREN resolved using rule 26 (expression -> conditional_expression .)
  ! reduce/reduce conflict for COLON resolved using rule 26 (expression -> conditional_expression .)
  ! reduce/reduce conflict for CLOSE_BRACKET resolved using rule 26 (expression -> conditional_expression .)
    LOGICAL_OR      reduce using rule 26 (expression -> conditional_expression .)
    LOGICAL_AND     reduce using rule 26 (expression -> conditional_expression .)
    BITWISE_OR      reduce using rule 26 (expression -> conditional_expression .)
    BITWISE_XOR     reduce using rule 26 (expression -> conditional_expression .)
    BITWISE_AND     reduce using rule 26 (expression -> conditional_expression .)
    EQUALS          reduce using rule 26 (expression -> conditional_expression .)
    NOT_EQUALS      reduce using rule 26 (expression -> conditional_expression .)
    LESS_THAN       reduce using rule 26 (expression -> conditional_expression .)
    GREATER_THAN    reduce using rule 26 (expression -> conditional_expression .)
    LESS_EQUALS     reduce using rule 26 (expression -> conditional_expression .)
    GREATER_EQUALS  reduce using rule 26 (expression -> conditional_expression .)
    SHIFT_LEFT      reduce using rule 26 (expression -> conditional_expression .)
    SHIFT_RIGHT     reduce using rule 26 (expression -> conditional_expression .)
    SEMICOLON       reduce using rule 26 (expression -> conditional_expression .)
    COMMA           reduce using rule 26 (expression -> conditional_expression .)
    CLOSE_PAREN     reduce using rule 26 (expression -> conditional_expression .)
    COLON           reduce using rule 26 (expression -> conditional_expression .)
    CLOSE_BRACKET   reduce using rule 26 (expression -> conditional_expression .)
    CONDITIONAL_OPERATOR reduce using rule 48 (logical_or_expression -> conditional_expression .)

  ! LOGICAL_OR      [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! LOGICAL_AND     [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! BITWISE_OR      [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! BITWISE_XOR     [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! BITWISE_AND     [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! EQUALS          [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! NOT_EQUALS      [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! LESS_THAN       [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! GREATER_THAN    [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! LESS_EQUALS     [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! SHIFT_LEFT      [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! SHIFT_RIGHT     [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! SEMICOLON       [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! COMMA           [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! CLOSE_PAREN     [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! COLON           [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! CLOSE_BRACKET   [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]


state 26

    (76) unary_expression -> BITWISE_AND . unary_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    unary_expression               shift and go to state 69
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 40

state 27

    (110) float_constant -> FLOAT .
    (93) primary_expression -> FLOAT .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 93 (primary_expression -> FLOAT .)
  ! reduce/reduce conflict for COMMA resolved using rule 93 (primary_expression -> FLOAT .)
    OPEN_PAREN      reduce using rule 93 (primary_expression -> FLOAT .)
    OPEN_BRACKET    reduce using rule 93 (primary_expression -> FLOAT .)
    DOT             reduce using rule 93 (primary_expression -> FLOAT .)
    ARROW           reduce using rule 93 (primary_expression -> FLOAT .)
    INCREMENT       reduce using rule 93 (primary_expression -> FLOAT .)
    DECREMENT       reduce using rule 93 (primary_expression -> FLOAT .)
    MUL             reduce using rule 93 (primary_expression -> FLOAT .)
    DIV             reduce using rule 93 (primary_expression -> FLOAT .)
    MOD             reduce using rule 93 (primary_expression -> FLOAT .)
    PLUS            reduce using rule 93 (primary_expression -> FLOAT .)
    MINUS           reduce using rule 93 (primary_expression -> FLOAT .)
    LOGICAL_OR      reduce using rule 93 (primary_expression -> FLOAT .)
    LOGICAL_AND     reduce using rule 93 (primary_expression -> FLOAT .)
    BITWISE_OR      reduce using rule 93 (primary_expression -> FLOAT .)
    BITWISE_XOR     reduce using rule 93 (primary_expression -> FLOAT .)
    BITWISE_AND     reduce using rule 93 (primary_expression -> FLOAT .)
    EQUALS          reduce using rule 93 (primary_expression -> FLOAT .)
    NOT_EQUALS      reduce using rule 93 (primary_expression -> FLOAT .)
    LESS_THAN       reduce using rule 93 (primary_expression -> FLOAT .)
    GREATER_THAN    reduce using rule 93 (primary_expression -> FLOAT .)
    LESS_EQUALS     reduce using rule 93 (primary_expression -> FLOAT .)
    GREATER_EQUALS  reduce using rule 93 (primary_expression -> FLOAT .)
    SHIFT_LEFT      reduce using rule 93 (primary_expression -> FLOAT .)
    SHIFT_RIGHT     reduce using rule 93 (primary_expression -> FLOAT .)
    SEMICOLON       reduce using rule 93 (primary_expression -> FLOAT .)
    CONDITIONAL_OPERATOR reduce using rule 93 (primary_expression -> FLOAT .)
    COMMA           reduce using rule 93 (primary_expression -> FLOAT .)

  ! SEMICOLON       [ reduce using rule 110 (float_constant -> FLOAT .) ]
  ! COMMA           [ reduce using rule 110 (float_constant -> FLOAT .) ]


state 28

    (111) float_constant -> MINUS . FLOAT
    (79) unary_expression -> MINUS . unary_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN

    FLOAT           shift and go to state 72
    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    OPEN_PAREN      shift and go to state 41

    unary_expression               shift and go to state 73
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 40

state 29

    (68) additive_expression -> multiplicative_expression .
    (72) multiplicative_expression -> multiplicative_expression . MUL unary_expression
    (73) multiplicative_expression -> multiplicative_expression . DIV unary_expression
    (74) multiplicative_expression -> multiplicative_expression . MOD unary_expression

    PLUS            reduce using rule 68 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 68 (additive_expression -> multiplicative_expression .)
    LOGICAL_OR      reduce using rule 68 (additive_expression -> multiplicative_expression .)
    LOGICAL_AND     reduce using rule 68 (additive_expression -> multiplicative_expression .)
    BITWISE_OR      reduce using rule 68 (additive_expression -> multiplicative_expression .)
    BITWISE_XOR     reduce using rule 68 (additive_expression -> multiplicative_expression .)
    BITWISE_AND     reduce using rule 68 (additive_expression -> multiplicative_expression .)
    EQUALS          reduce using rule 68 (additive_expression -> multiplicative_expression .)
    NOT_EQUALS      reduce using rule 68 (additive_expression -> multiplicative_expression .)
    LESS_THAN       reduce using rule 68 (additive_expression -> multiplicative_expression .)
    GREATER_THAN    reduce using rule 68 (additive_expression -> multiplicative_expression .)
    LESS_EQUALS     reduce using rule 68 (additive_expression -> multiplicative_expression .)
    GREATER_EQUALS  reduce using rule 68 (additive_expression -> multiplicative_expression .)
    SHIFT_LEFT      reduce using rule 68 (additive_expression -> multiplicative_expression .)
    SHIFT_RIGHT     reduce using rule 68 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 68 (additive_expression -> multiplicative_expression .)
    CONDITIONAL_OPERATOR reduce using rule 68 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 68 (additive_expression -> multiplicative_expression .)
    CLOSE_PAREN     reduce using rule 68 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 68 (additive_expression -> multiplicative_expression .)
    CLOSE_BRACKET   reduce using rule 68 (additive_expression -> multiplicative_expression .)
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76


state 30

    (78) unary_expression -> PLUS . unary_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    unary_expression               shift and go to state 77
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 40

state 31

    (43) conditional_expression -> logical_or_expression .
    (44) conditional_expression -> logical_or_expression . CONDITIONAL_OPERATOR expression COLON conditional_expression
    (45) conditional_expression -> logical_or_expression . CONDITIONAL_OPERATOR expression COMMA conditional_expression
    (47) logical_or_expression -> logical_or_expression . LOGICAL_OR logical_and_expression

  ! shift/reduce conflict for CONDITIONAL_OPERATOR resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    LOGICAL_AND     reduce using rule 43 (conditional_expression -> logical_or_expression .)
    BITWISE_OR      reduce using rule 43 (conditional_expression -> logical_or_expression .)
    BITWISE_XOR     reduce using rule 43 (conditional_expression -> logical_or_expression .)
    BITWISE_AND     reduce using rule 43 (conditional_expression -> logical_or_expression .)
    EQUALS          reduce using rule 43 (conditional_expression -> logical_or_expression .)
    NOT_EQUALS      reduce using rule 43 (conditional_expression -> logical_or_expression .)
    LESS_THAN       reduce using rule 43 (conditional_expression -> logical_or_expression .)
    GREATER_THAN    reduce using rule 43 (conditional_expression -> logical_or_expression .)
    LESS_EQUALS     reduce using rule 43 (conditional_expression -> logical_or_expression .)
    GREATER_EQUALS  reduce using rule 43 (conditional_expression -> logical_or_expression .)
    SHIFT_LEFT      reduce using rule 43 (conditional_expression -> logical_or_expression .)
    SHIFT_RIGHT     reduce using rule 43 (conditional_expression -> logical_or_expression .)
    SEMICOLON       reduce using rule 43 (conditional_expression -> logical_or_expression .)
    COMMA           reduce using rule 43 (conditional_expression -> logical_or_expression .)
    CLOSE_PAREN     reduce using rule 43 (conditional_expression -> logical_or_expression .)
    COLON           reduce using rule 43 (conditional_expression -> logical_or_expression .)
    CLOSE_BRACKET   reduce using rule 43 (conditional_expression -> logical_or_expression .)
    CONDITIONAL_OPERATOR shift and go to state 78
    LOGICAL_OR      shift and go to state 79

  ! CONDITIONAL_OPERATOR [ reduce using rule 43 (conditional_expression -> logical_or_expression .) ]
  ! LOGICAL_OR      [ reduce using rule 43 (conditional_expression -> logical_or_expression .) ]


state 32

    (71) multiplicative_expression -> unary_expression .

    MUL             reduce using rule 71 (multiplicative_expression -> unary_expression .)
    DIV             reduce using rule 71 (multiplicative_expression -> unary_expression .)
    MOD             reduce using rule 71 (multiplicative_expression -> unary_expression .)
    PLUS            reduce using rule 71 (multiplicative_expression -> unary_expression .)
    MINUS           reduce using rule 71 (multiplicative_expression -> unary_expression .)
    LOGICAL_OR      reduce using rule 71 (multiplicative_expression -> unary_expression .)
    LOGICAL_AND     reduce using rule 71 (multiplicative_expression -> unary_expression .)
    BITWISE_OR      reduce using rule 71 (multiplicative_expression -> unary_expression .)
    BITWISE_XOR     reduce using rule 71 (multiplicative_expression -> unary_expression .)
    BITWISE_AND     reduce using rule 71 (multiplicative_expression -> unary_expression .)
    EQUALS          reduce using rule 71 (multiplicative_expression -> unary_expression .)
    NOT_EQUALS      reduce using rule 71 (multiplicative_expression -> unary_expression .)
    LESS_THAN       reduce using rule 71 (multiplicative_expression -> unary_expression .)
    GREATER_THAN    reduce using rule 71 (multiplicative_expression -> unary_expression .)
    LESS_EQUALS     reduce using rule 71 (multiplicative_expression -> unary_expression .)
    GREATER_EQUALS  reduce using rule 71 (multiplicative_expression -> unary_expression .)
    SHIFT_LEFT      reduce using rule 71 (multiplicative_expression -> unary_expression .)
    SHIFT_RIGHT     reduce using rule 71 (multiplicative_expression -> unary_expression .)
    SEMICOLON       reduce using rule 71 (multiplicative_expression -> unary_expression .)
    CONDITIONAL_OPERATOR reduce using rule 71 (multiplicative_expression -> unary_expression .)
    COMMA           reduce using rule 71 (multiplicative_expression -> unary_expression .)
    CLOSE_PAREN     reduce using rule 71 (multiplicative_expression -> unary_expression .)
    COLON           reduce using rule 71 (multiplicative_expression -> unary_expression .)
    CLOSE_BRACKET   reduce using rule 71 (multiplicative_expression -> unary_expression .)


state 33

    (46) logical_or_expression -> logical_and_expression .
    (50) logical_and_expression -> logical_and_expression . LOGICAL_AND bitwise_or_expression

  ! shift/reduce conflict for LOGICAL_AND resolved as shift
    CONDITIONAL_OPERATOR reduce using rule 46 (logical_or_expression -> logical_and_expression .)
    LOGICAL_OR      reduce using rule 46 (logical_or_expression -> logical_and_expression .)
    BITWISE_OR      reduce using rule 46 (logical_or_expression -> logical_and_expression .)
    BITWISE_XOR     reduce using rule 46 (logical_or_expression -> logical_and_expression .)
    BITWISE_AND     reduce using rule 46 (logical_or_expression -> logical_and_expression .)
    EQUALS          reduce using rule 46 (logical_or_expression -> logical_and_expression .)
    NOT_EQUALS      reduce using rule 46 (logical_or_expression -> logical_and_expression .)
    LESS_THAN       reduce using rule 46 (logical_or_expression -> logical_and_expression .)
    GREATER_THAN    reduce using rule 46 (logical_or_expression -> logical_and_expression .)
    LESS_EQUALS     reduce using rule 46 (logical_or_expression -> logical_and_expression .)
    GREATER_EQUALS  reduce using rule 46 (logical_or_expression -> logical_and_expression .)
    SHIFT_LEFT      reduce using rule 46 (logical_or_expression -> logical_and_expression .)
    SHIFT_RIGHT     reduce using rule 46 (logical_or_expression -> logical_and_expression .)
    SEMICOLON       reduce using rule 46 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 46 (logical_or_expression -> logical_and_expression .)
    CLOSE_PAREN     reduce using rule 46 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 46 (logical_or_expression -> logical_and_expression .)
    CLOSE_BRACKET   reduce using rule 46 (logical_or_expression -> logical_and_expression .)
    LOGICAL_AND     shift and go to state 80

  ! LOGICAL_AND     [ reduce using rule 46 (logical_or_expression -> logical_and_expression .) ]


state 34

    (75) unary_expression -> postfix_expression .
    (84) postfix_expression -> postfix_expression . OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> postfix_expression . OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> postfix_expression . DOT IDENTIFIER
    (87) postfix_expression -> postfix_expression . ARROW IDENTIFIER
    (88) postfix_expression -> postfix_expression . INCREMENT
    (89) postfix_expression -> postfix_expression . DECREMENT

    MUL             reduce using rule 75 (unary_expression -> postfix_expression .)
    DIV             reduce using rule 75 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 75 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 75 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 75 (unary_expression -> postfix_expression .)
    LOGICAL_OR      reduce using rule 75 (unary_expression -> postfix_expression .)
    LOGICAL_AND     reduce using rule 75 (unary_expression -> postfix_expression .)
    BITWISE_OR      reduce using rule 75 (unary_expression -> postfix_expression .)
    BITWISE_XOR     reduce using rule 75 (unary_expression -> postfix_expression .)
    BITWISE_AND     reduce using rule 75 (unary_expression -> postfix_expression .)
    EQUALS          reduce using rule 75 (unary_expression -> postfix_expression .)
    NOT_EQUALS      reduce using rule 75 (unary_expression -> postfix_expression .)
    LESS_THAN       reduce using rule 75 (unary_expression -> postfix_expression .)
    GREATER_THAN    reduce using rule 75 (unary_expression -> postfix_expression .)
    LESS_EQUALS     reduce using rule 75 (unary_expression -> postfix_expression .)
    GREATER_EQUALS  reduce using rule 75 (unary_expression -> postfix_expression .)
    SHIFT_LEFT      reduce using rule 75 (unary_expression -> postfix_expression .)
    SHIFT_RIGHT     reduce using rule 75 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 75 (unary_expression -> postfix_expression .)
    CONDITIONAL_OPERATOR reduce using rule 75 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 75 (unary_expression -> postfix_expression .)
    CLOSE_PAREN     reduce using rule 75 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 75 (unary_expression -> postfix_expression .)
    CLOSE_BRACKET   reduce using rule 75 (unary_expression -> postfix_expression .)
    OPEN_PAREN      shift and go to state 81
    OPEN_BRACKET    shift and go to state 82
    DOT             shift and go to state 83
    ARROW           shift and go to state 84
    INCREMENT       shift and go to state 85
    DECREMENT       shift and go to state 86


state 35

    (77) unary_expression -> TIMES . unary_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    unary_expression               shift and go to state 87
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 40

state 36

    (80) unary_expression -> LOGICAL_NOT . unary_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    unary_expression               shift and go to state 88
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 40

state 37

    (81) unary_expression -> INCREMENT . unary_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    unary_expression               shift and go to state 89
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 40

state 38

    (82) unary_expression -> DECREMENT . unary_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    unary_expression               shift and go to state 90
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 40

state 39

    (49) logical_and_expression -> bitwise_or_expression .
    (52) bitwise_or_expression -> bitwise_or_expression . BITWISE_OR bitwise_xor_expression

  ! shift/reduce conflict for BITWISE_OR resolved as shift
    LOGICAL_AND     reduce using rule 49 (logical_and_expression -> bitwise_or_expression .)
    CONDITIONAL_OPERATOR reduce using rule 49 (logical_and_expression -> bitwise_or_expression .)
    LOGICAL_OR      reduce using rule 49 (logical_and_expression -> bitwise_or_expression .)
    BITWISE_XOR     reduce using rule 49 (logical_and_expression -> bitwise_or_expression .)
    BITWISE_AND     reduce using rule 49 (logical_and_expression -> bitwise_or_expression .)
    EQUALS          reduce using rule 49 (logical_and_expression -> bitwise_or_expression .)
    NOT_EQUALS      reduce using rule 49 (logical_and_expression -> bitwise_or_expression .)
    LESS_THAN       reduce using rule 49 (logical_and_expression -> bitwise_or_expression .)
    GREATER_THAN    reduce using rule 49 (logical_and_expression -> bitwise_or_expression .)
    LESS_EQUALS     reduce using rule 49 (logical_and_expression -> bitwise_or_expression .)
    GREATER_EQUALS  reduce using rule 49 (logical_and_expression -> bitwise_or_expression .)
    SHIFT_LEFT      reduce using rule 49 (logical_and_expression -> bitwise_or_expression .)
    SHIFT_RIGHT     reduce using rule 49 (logical_and_expression -> bitwise_or_expression .)
    SEMICOLON       reduce using rule 49 (logical_and_expression -> bitwise_or_expression .)
    COMMA           reduce using rule 49 (logical_and_expression -> bitwise_or_expression .)
    CLOSE_PAREN     reduce using rule 49 (logical_and_expression -> bitwise_or_expression .)
    COLON           reduce using rule 49 (logical_and_expression -> bitwise_or_expression .)
    CLOSE_BRACKET   reduce using rule 49 (logical_and_expression -> bitwise_or_expression .)
    BITWISE_OR      shift and go to state 91

  ! BITWISE_OR      [ reduce using rule 49 (logical_and_expression -> bitwise_or_expression .) ]


state 40

    (83) postfix_expression -> primary_expression .

    OPEN_PAREN      reduce using rule 83 (postfix_expression -> primary_expression .)
    OPEN_BRACKET    reduce using rule 83 (postfix_expression -> primary_expression .)
    DOT             reduce using rule 83 (postfix_expression -> primary_expression .)
    ARROW           reduce using rule 83 (postfix_expression -> primary_expression .)
    INCREMENT       reduce using rule 83 (postfix_expression -> primary_expression .)
    DECREMENT       reduce using rule 83 (postfix_expression -> primary_expression .)
    MUL             reduce using rule 83 (postfix_expression -> primary_expression .)
    DIV             reduce using rule 83 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 83 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 83 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 83 (postfix_expression -> primary_expression .)
    LOGICAL_OR      reduce using rule 83 (postfix_expression -> primary_expression .)
    LOGICAL_AND     reduce using rule 83 (postfix_expression -> primary_expression .)
    BITWISE_OR      reduce using rule 83 (postfix_expression -> primary_expression .)
    BITWISE_XOR     reduce using rule 83 (postfix_expression -> primary_expression .)
    BITWISE_AND     reduce using rule 83 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 83 (postfix_expression -> primary_expression .)
    NOT_EQUALS      reduce using rule 83 (postfix_expression -> primary_expression .)
    LESS_THAN       reduce using rule 83 (postfix_expression -> primary_expression .)
    GREATER_THAN    reduce using rule 83 (postfix_expression -> primary_expression .)
    LESS_EQUALS     reduce using rule 83 (postfix_expression -> primary_expression .)
    GREATER_EQUALS  reduce using rule 83 (postfix_expression -> primary_expression .)
    SHIFT_LEFT      reduce using rule 83 (postfix_expression -> primary_expression .)
    SHIFT_RIGHT     reduce using rule 83 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 83 (postfix_expression -> primary_expression .)
    CONDITIONAL_OPERATOR reduce using rule 83 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 83 (postfix_expression -> primary_expression .)
    CLOSE_PAREN     reduce using rule 83 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 83 (postfix_expression -> primary_expression .)
    CLOSE_BRACKET   reduce using rule 83 (postfix_expression -> primary_expression .)


state 41

    (94) primary_expression -> OPEN_PAREN . expression CLOSE_PAREN
    (25) expression -> . additive_expression
    (26) expression -> . conditional_expression
    (27) expression -> . expression LOGICAL_OR expression
    (28) expression -> . expression LOGICAL_AND expression
    (29) expression -> . expression BITWISE_OR expression
    (30) expression -> . expression BITWISE_XOR expression
    (31) expression -> . expression BITWISE_AND expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression GREATER_THAN expression
    (36) expression -> . expression LESS_EQUALS expression
    (37) expression -> . expression GREATER_EQUALS expression
    (38) expression -> . expression SHIFT_LEFT expression
    (39) expression -> . expression SHIFT_RIGHT expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression
    (45) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (48) logical_or_expression -> . conditional_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (49) logical_and_expression -> . bitwise_or_expression
    (50) logical_and_expression -> . logical_and_expression LOGICAL_AND bitwise_or_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (51) bitwise_or_expression -> . bitwise_xor_expression
    (52) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (53) bitwise_xor_expression -> . bitwise_and_expression
    (54) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (55) bitwise_and_expression -> . equality_expression
    (56) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (57) equality_expression -> . relational_expression
    (58) equality_expression -> . equality_expression EQUALS relational_expression
    (59) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (60) relational_expression -> . shift_expression
    (61) relational_expression -> . relational_expression LESS_THAN shift_expression
    (62) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (63) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (64) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    expression                     shift and go to state 92
    additive_expression            shift and go to state 24
    conditional_expression         shift and go to state 25
    multiplicative_expression      shift and go to state 29
    logical_or_expression          shift and go to state 31
    unary_expression               shift and go to state 32
    logical_and_expression         shift and go to state 33
    postfix_expression             shift and go to state 34
    bitwise_or_expression          shift and go to state 39
    primary_expression             shift and go to state 40
    bitwise_xor_expression         shift and go to state 42
    bitwise_and_expression         shift and go to state 45
    equality_expression            shift and go to state 46
    relational_expression          shift and go to state 47
    shift_expression               shift and go to state 48

state 42

    (51) bitwise_or_expression -> bitwise_xor_expression .
    (54) bitwise_xor_expression -> bitwise_xor_expression . BITWISE_XOR bitwise_and_expression

  ! shift/reduce conflict for BITWISE_XOR resolved as shift
    BITWISE_OR      reduce using rule 51 (bitwise_or_expression -> bitwise_xor_expression .)
    LOGICAL_AND     reduce using rule 51 (bitwise_or_expression -> bitwise_xor_expression .)
    CONDITIONAL_OPERATOR reduce using rule 51 (bitwise_or_expression -> bitwise_xor_expression .)
    LOGICAL_OR      reduce using rule 51 (bitwise_or_expression -> bitwise_xor_expression .)
    BITWISE_AND     reduce using rule 51 (bitwise_or_expression -> bitwise_xor_expression .)
    EQUALS          reduce using rule 51 (bitwise_or_expression -> bitwise_xor_expression .)
    NOT_EQUALS      reduce using rule 51 (bitwise_or_expression -> bitwise_xor_expression .)
    LESS_THAN       reduce using rule 51 (bitwise_or_expression -> bitwise_xor_expression .)
    GREATER_THAN    reduce using rule 51 (bitwise_or_expression -> bitwise_xor_expression .)
    LESS_EQUALS     reduce using rule 51 (bitwise_or_expression -> bitwise_xor_expression .)
    GREATER_EQUALS  reduce using rule 51 (bitwise_or_expression -> bitwise_xor_expression .)
    SHIFT_LEFT      reduce using rule 51 (bitwise_or_expression -> bitwise_xor_expression .)
    SHIFT_RIGHT     reduce using rule 51 (bitwise_or_expression -> bitwise_xor_expression .)
    SEMICOLON       reduce using rule 51 (bitwise_or_expression -> bitwise_xor_expression .)
    COMMA           reduce using rule 51 (bitwise_or_expression -> bitwise_xor_expression .)
    CLOSE_PAREN     reduce using rule 51 (bitwise_or_expression -> bitwise_xor_expression .)
    COLON           reduce using rule 51 (bitwise_or_expression -> bitwise_xor_expression .)
    CLOSE_BRACKET   reduce using rule 51 (bitwise_or_expression -> bitwise_xor_expression .)
    BITWISE_XOR     shift and go to state 93

  ! BITWISE_XOR     [ reduce using rule 51 (bitwise_or_expression -> bitwise_xor_expression .) ]


state 43

    (91) primary_expression -> CONSTANT .

    OPEN_PAREN      reduce using rule 91 (primary_expression -> CONSTANT .)
    OPEN_BRACKET    reduce using rule 91 (primary_expression -> CONSTANT .)
    DOT             reduce using rule 91 (primary_expression -> CONSTANT .)
    ARROW           reduce using rule 91 (primary_expression -> CONSTANT .)
    INCREMENT       reduce using rule 91 (primary_expression -> CONSTANT .)
    DECREMENT       reduce using rule 91 (primary_expression -> CONSTANT .)
    MUL             reduce using rule 91 (primary_expression -> CONSTANT .)
    DIV             reduce using rule 91 (primary_expression -> CONSTANT .)
    MOD             reduce using rule 91 (primary_expression -> CONSTANT .)
    PLUS            reduce using rule 91 (primary_expression -> CONSTANT .)
    MINUS           reduce using rule 91 (primary_expression -> CONSTANT .)
    LOGICAL_OR      reduce using rule 91 (primary_expression -> CONSTANT .)
    LOGICAL_AND     reduce using rule 91 (primary_expression -> CONSTANT .)
    BITWISE_OR      reduce using rule 91 (primary_expression -> CONSTANT .)
    BITWISE_XOR     reduce using rule 91 (primary_expression -> CONSTANT .)
    BITWISE_AND     reduce using rule 91 (primary_expression -> CONSTANT .)
    EQUALS          reduce using rule 91 (primary_expression -> CONSTANT .)
    NOT_EQUALS      reduce using rule 91 (primary_expression -> CONSTANT .)
    LESS_THAN       reduce using rule 91 (primary_expression -> CONSTANT .)
    GREATER_THAN    reduce using rule 91 (primary_expression -> CONSTANT .)
    LESS_EQUALS     reduce using rule 91 (primary_expression -> CONSTANT .)
    GREATER_EQUALS  reduce using rule 91 (primary_expression -> CONSTANT .)
    SHIFT_LEFT      reduce using rule 91 (primary_expression -> CONSTANT .)
    SHIFT_RIGHT     reduce using rule 91 (primary_expression -> CONSTANT .)
    SEMICOLON       reduce using rule 91 (primary_expression -> CONSTANT .)
    CONDITIONAL_OPERATOR reduce using rule 91 (primary_expression -> CONSTANT .)
    COMMA           reduce using rule 91 (primary_expression -> CONSTANT .)
    CLOSE_PAREN     reduce using rule 91 (primary_expression -> CONSTANT .)
    COLON           reduce using rule 91 (primary_expression -> CONSTANT .)
    CLOSE_BRACKET   reduce using rule 91 (primary_expression -> CONSTANT .)


state 44

    (92) primary_expression -> STRING_CONSTANT .

    OPEN_PAREN      reduce using rule 92 (primary_expression -> STRING_CONSTANT .)
    OPEN_BRACKET    reduce using rule 92 (primary_expression -> STRING_CONSTANT .)
    DOT             reduce using rule 92 (primary_expression -> STRING_CONSTANT .)
    ARROW           reduce using rule 92 (primary_expression -> STRING_CONSTANT .)
    INCREMENT       reduce using rule 92 (primary_expression -> STRING_CONSTANT .)
    DECREMENT       reduce using rule 92 (primary_expression -> STRING_CONSTANT .)
    MUL             reduce using rule 92 (primary_expression -> STRING_CONSTANT .)
    DIV             reduce using rule 92 (primary_expression -> STRING_CONSTANT .)
    MOD             reduce using rule 92 (primary_expression -> STRING_CONSTANT .)
    PLUS            reduce using rule 92 (primary_expression -> STRING_CONSTANT .)
    MINUS           reduce using rule 92 (primary_expression -> STRING_CONSTANT .)
    LOGICAL_OR      reduce using rule 92 (primary_expression -> STRING_CONSTANT .)
    LOGICAL_AND     reduce using rule 92 (primary_expression -> STRING_CONSTANT .)
    BITWISE_OR      reduce using rule 92 (primary_expression -> STRING_CONSTANT .)
    BITWISE_XOR     reduce using rule 92 (primary_expression -> STRING_CONSTANT .)
    BITWISE_AND     reduce using rule 92 (primary_expression -> STRING_CONSTANT .)
    EQUALS          reduce using rule 92 (primary_expression -> STRING_CONSTANT .)
    NOT_EQUALS      reduce using rule 92 (primary_expression -> STRING_CONSTANT .)
    LESS_THAN       reduce using rule 92 (primary_expression -> STRING_CONSTANT .)
    GREATER_THAN    reduce using rule 92 (primary_expression -> STRING_CONSTANT .)
    LESS_EQUALS     reduce using rule 92 (primary_expression -> STRING_CONSTANT .)
    GREATER_EQUALS  reduce using rule 92 (primary_expression -> STRING_CONSTANT .)
    SHIFT_LEFT      reduce using rule 92 (primary_expression -> STRING_CONSTANT .)
    SHIFT_RIGHT     reduce using rule 92 (primary_expression -> STRING_CONSTANT .)
    SEMICOLON       reduce using rule 92 (primary_expression -> STRING_CONSTANT .)
    CONDITIONAL_OPERATOR reduce using rule 92 (primary_expression -> STRING_CONSTANT .)
    COMMA           reduce using rule 92 (primary_expression -> STRING_CONSTANT .)
    CLOSE_PAREN     reduce using rule 92 (primary_expression -> STRING_CONSTANT .)
    COLON           reduce using rule 92 (primary_expression -> STRING_CONSTANT .)
    CLOSE_BRACKET   reduce using rule 92 (primary_expression -> STRING_CONSTANT .)


state 45

    (53) bitwise_xor_expression -> bitwise_and_expression .
    (56) bitwise_and_expression -> bitwise_and_expression . BITWISE_AND equality_expression

  ! shift/reduce conflict for BITWISE_AND resolved as shift
    BITWISE_XOR     reduce using rule 53 (bitwise_xor_expression -> bitwise_and_expression .)
    BITWISE_OR      reduce using rule 53 (bitwise_xor_expression -> bitwise_and_expression .)
    LOGICAL_AND     reduce using rule 53 (bitwise_xor_expression -> bitwise_and_expression .)
    CONDITIONAL_OPERATOR reduce using rule 53 (bitwise_xor_expression -> bitwise_and_expression .)
    LOGICAL_OR      reduce using rule 53 (bitwise_xor_expression -> bitwise_and_expression .)
    EQUALS          reduce using rule 53 (bitwise_xor_expression -> bitwise_and_expression .)
    NOT_EQUALS      reduce using rule 53 (bitwise_xor_expression -> bitwise_and_expression .)
    LESS_THAN       reduce using rule 53 (bitwise_xor_expression -> bitwise_and_expression .)
    GREATER_THAN    reduce using rule 53 (bitwise_xor_expression -> bitwise_and_expression .)
    LESS_EQUALS     reduce using rule 53 (bitwise_xor_expression -> bitwise_and_expression .)
    GREATER_EQUALS  reduce using rule 53 (bitwise_xor_expression -> bitwise_and_expression .)
    SHIFT_LEFT      reduce using rule 53 (bitwise_xor_expression -> bitwise_and_expression .)
    SHIFT_RIGHT     reduce using rule 53 (bitwise_xor_expression -> bitwise_and_expression .)
    SEMICOLON       reduce using rule 53 (bitwise_xor_expression -> bitwise_and_expression .)
    COMMA           reduce using rule 53 (bitwise_xor_expression -> bitwise_and_expression .)
    CLOSE_PAREN     reduce using rule 53 (bitwise_xor_expression -> bitwise_and_expression .)
    COLON           reduce using rule 53 (bitwise_xor_expression -> bitwise_and_expression .)
    CLOSE_BRACKET   reduce using rule 53 (bitwise_xor_expression -> bitwise_and_expression .)
    BITWISE_AND     shift and go to state 94

  ! BITWISE_AND     [ reduce using rule 53 (bitwise_xor_expression -> bitwise_and_expression .) ]


state 46

    (55) bitwise_and_expression -> equality_expression .
    (58) equality_expression -> equality_expression . EQUALS relational_expression
    (59) equality_expression -> equality_expression . NOT_EQUALS relational_expression

  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
    BITWISE_AND     reduce using rule 55 (bitwise_and_expression -> equality_expression .)
    BITWISE_XOR     reduce using rule 55 (bitwise_and_expression -> equality_expression .)
    BITWISE_OR      reduce using rule 55 (bitwise_and_expression -> equality_expression .)
    LOGICAL_AND     reduce using rule 55 (bitwise_and_expression -> equality_expression .)
    CONDITIONAL_OPERATOR reduce using rule 55 (bitwise_and_expression -> equality_expression .)
    LOGICAL_OR      reduce using rule 55 (bitwise_and_expression -> equality_expression .)
    LESS_THAN       reduce using rule 55 (bitwise_and_expression -> equality_expression .)
    GREATER_THAN    reduce using rule 55 (bitwise_and_expression -> equality_expression .)
    LESS_EQUALS     reduce using rule 55 (bitwise_and_expression -> equality_expression .)
    GREATER_EQUALS  reduce using rule 55 (bitwise_and_expression -> equality_expression .)
    SHIFT_LEFT      reduce using rule 55 (bitwise_and_expression -> equality_expression .)
    SHIFT_RIGHT     reduce using rule 55 (bitwise_and_expression -> equality_expression .)
    SEMICOLON       reduce using rule 55 (bitwise_and_expression -> equality_expression .)
    COMMA           reduce using rule 55 (bitwise_and_expression -> equality_expression .)
    CLOSE_PAREN     reduce using rule 55 (bitwise_and_expression -> equality_expression .)
    COLON           reduce using rule 55 (bitwise_and_expression -> equality_expression .)
    CLOSE_BRACKET   reduce using rule 55 (bitwise_and_expression -> equality_expression .)
    EQUALS          shift and go to state 95
    NOT_EQUALS      shift and go to state 96

  ! EQUALS          [ reduce using rule 55 (bitwise_and_expression -> equality_expression .) ]
  ! NOT_EQUALS      [ reduce using rule 55 (bitwise_and_expression -> equality_expression .) ]


state 47

    (57) equality_expression -> relational_expression .
    (61) relational_expression -> relational_expression . LESS_THAN shift_expression
    (62) relational_expression -> relational_expression . GREATER_THAN shift_expression
    (63) relational_expression -> relational_expression . LESS_EQUALS shift_expression
    (64) relational_expression -> relational_expression . GREATER_EQUALS shift_expression

  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS resolved as shift
    EQUALS          reduce using rule 57 (equality_expression -> relational_expression .)
    NOT_EQUALS      reduce using rule 57 (equality_expression -> relational_expression .)
    BITWISE_AND     reduce using rule 57 (equality_expression -> relational_expression .)
    BITWISE_XOR     reduce using rule 57 (equality_expression -> relational_expression .)
    BITWISE_OR      reduce using rule 57 (equality_expression -> relational_expression .)
    LOGICAL_AND     reduce using rule 57 (equality_expression -> relational_expression .)
    CONDITIONAL_OPERATOR reduce using rule 57 (equality_expression -> relational_expression .)
    LOGICAL_OR      reduce using rule 57 (equality_expression -> relational_expression .)
    SHIFT_LEFT      reduce using rule 57 (equality_expression -> relational_expression .)
    SHIFT_RIGHT     reduce using rule 57 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 57 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 57 (equality_expression -> relational_expression .)
    CLOSE_PAREN     reduce using rule 57 (equality_expression -> relational_expression .)
    COLON           reduce using rule 57 (equality_expression -> relational_expression .)
    CLOSE_BRACKET   reduce using rule 57 (equality_expression -> relational_expression .)
    LESS_THAN       shift and go to state 97
    GREATER_THAN    shift and go to state 98
    LESS_EQUALS     shift and go to state 99
    GREATER_EQUALS  shift and go to state 100

  ! LESS_THAN       [ reduce using rule 57 (equality_expression -> relational_expression .) ]
  ! GREATER_THAN    [ reduce using rule 57 (equality_expression -> relational_expression .) ]
  ! LESS_EQUALS     [ reduce using rule 57 (equality_expression -> relational_expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 57 (equality_expression -> relational_expression .) ]


state 48

    (60) relational_expression -> shift_expression .
    (66) shift_expression -> shift_expression . SHIFT_LEFT additive_expression
    (67) shift_expression -> shift_expression . SHIFT_RIGHT additive_expression

  ! shift/reduce conflict for SHIFT_LEFT resolved as shift
  ! shift/reduce conflict for SHIFT_RIGHT resolved as shift
    LESS_THAN       reduce using rule 60 (relational_expression -> shift_expression .)
    GREATER_THAN    reduce using rule 60 (relational_expression -> shift_expression .)
    LESS_EQUALS     reduce using rule 60 (relational_expression -> shift_expression .)
    GREATER_EQUALS  reduce using rule 60 (relational_expression -> shift_expression .)
    EQUALS          reduce using rule 60 (relational_expression -> shift_expression .)
    NOT_EQUALS      reduce using rule 60 (relational_expression -> shift_expression .)
    BITWISE_AND     reduce using rule 60 (relational_expression -> shift_expression .)
    BITWISE_XOR     reduce using rule 60 (relational_expression -> shift_expression .)
    BITWISE_OR      reduce using rule 60 (relational_expression -> shift_expression .)
    LOGICAL_AND     reduce using rule 60 (relational_expression -> shift_expression .)
    CONDITIONAL_OPERATOR reduce using rule 60 (relational_expression -> shift_expression .)
    LOGICAL_OR      reduce using rule 60 (relational_expression -> shift_expression .)
    SEMICOLON       reduce using rule 60 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 60 (relational_expression -> shift_expression .)
    CLOSE_PAREN     reduce using rule 60 (relational_expression -> shift_expression .)
    COLON           reduce using rule 60 (relational_expression -> shift_expression .)
    CLOSE_BRACKET   reduce using rule 60 (relational_expression -> shift_expression .)
    SHIFT_LEFT      shift and go to state 101
    SHIFT_RIGHT     shift and go to state 102

  ! SHIFT_LEFT      [ reduce using rule 60 (relational_expression -> shift_expression .) ]
  ! SHIFT_RIGHT     [ reduce using rule 60 (relational_expression -> shift_expression .) ]


state 49

    (17) declaration_without_type -> IDENTIFIER OPEN_BRACKET CONSTANT . CLOSE_BRACKET
    (18) declaration_without_type -> IDENTIFIER OPEN_BRACKET CONSTANT . CLOSE_BRACKET ASSIGN expression
    (20) declaration_without_type -> IDENTIFIER OPEN_BRACKET CONSTANT . CLOSE_BRACKET ASSIGN float_constant

    CLOSE_BRACKET   shift and go to state 103


state 50

    (8) declaration_list -> declaration_list COMMA declaration_item .

    SEMICOLON       reduce using rule 8 (declaration_list -> declaration_list COMMA declaration_item .)
    COMMA           reduce using rule 8 (declaration_list -> declaration_list COMMA declaration_item .)


state 51

    (10) declaration_item -> IDENTIFIER OPEN_BRACKET CONSTANT . CLOSE_BRACKET
    (12) declaration_item -> IDENTIFIER OPEN_BRACKET CONSTANT . CLOSE_BRACKET ASSIGN expression
    (14) declaration_item -> IDENTIFIER OPEN_BRACKET CONSTANT . CLOSE_BRACKET ASSIGN float_constant

    CLOSE_BRACKET   shift and go to state 104


state 52

    (11) declaration_item -> IDENTIFIER ASSIGN expression .
    (27) expression -> expression . LOGICAL_OR expression
    (28) expression -> expression . LOGICAL_AND expression
    (29) expression -> expression . BITWISE_OR expression
    (30) expression -> expression . BITWISE_XOR expression
    (31) expression -> expression . BITWISE_AND expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . GREATER_THAN expression
    (36) expression -> expression . LESS_EQUALS expression
    (37) expression -> expression . GREATER_EQUALS expression
    (38) expression -> expression . SHIFT_LEFT expression
    (39) expression -> expression . SHIFT_RIGHT expression

    SEMICOLON       reduce using rule 11 (declaration_item -> IDENTIFIER ASSIGN expression .)
    COMMA           reduce using rule 11 (declaration_item -> IDENTIFIER ASSIGN expression .)
    LOGICAL_OR      shift and go to state 54
    LOGICAL_AND     shift and go to state 55
    BITWISE_OR      shift and go to state 56
    BITWISE_XOR     shift and go to state 57
    BITWISE_AND     shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUALS      shift and go to state 60
    LESS_THAN       shift and go to state 61
    GREATER_THAN    shift and go to state 62
    LESS_EQUALS     shift and go to state 63
    GREATER_EQUALS  shift and go to state 64
    SHIFT_LEFT      shift and go to state 65
    SHIFT_RIGHT     shift and go to state 66


state 53

    (13) declaration_item -> IDENTIFIER ASSIGN float_constant .

    SEMICOLON       reduce using rule 13 (declaration_item -> IDENTIFIER ASSIGN float_constant .)
    COMMA           reduce using rule 13 (declaration_item -> IDENTIFIER ASSIGN float_constant .)


state 54

    (27) expression -> expression LOGICAL_OR . expression
    (25) expression -> . additive_expression
    (26) expression -> . conditional_expression
    (27) expression -> . expression LOGICAL_OR expression
    (28) expression -> . expression LOGICAL_AND expression
    (29) expression -> . expression BITWISE_OR expression
    (30) expression -> . expression BITWISE_XOR expression
    (31) expression -> . expression BITWISE_AND expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression GREATER_THAN expression
    (36) expression -> . expression LESS_EQUALS expression
    (37) expression -> . expression GREATER_EQUALS expression
    (38) expression -> . expression SHIFT_LEFT expression
    (39) expression -> . expression SHIFT_RIGHT expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression
    (45) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (48) logical_or_expression -> . conditional_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (49) logical_and_expression -> . bitwise_or_expression
    (50) logical_and_expression -> . logical_and_expression LOGICAL_AND bitwise_or_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (51) bitwise_or_expression -> . bitwise_xor_expression
    (52) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (53) bitwise_xor_expression -> . bitwise_and_expression
    (54) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (55) bitwise_and_expression -> . equality_expression
    (56) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (57) equality_expression -> . relational_expression
    (58) equality_expression -> . equality_expression EQUALS relational_expression
    (59) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (60) relational_expression -> . shift_expression
    (61) relational_expression -> . relational_expression LESS_THAN shift_expression
    (62) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (63) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (64) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    expression                     shift and go to state 105
    additive_expression            shift and go to state 24
    conditional_expression         shift and go to state 25
    multiplicative_expression      shift and go to state 29
    logical_or_expression          shift and go to state 31
    unary_expression               shift and go to state 32
    logical_and_expression         shift and go to state 33
    postfix_expression             shift and go to state 34
    bitwise_or_expression          shift and go to state 39
    primary_expression             shift and go to state 40
    bitwise_xor_expression         shift and go to state 42
    bitwise_and_expression         shift and go to state 45
    equality_expression            shift and go to state 46
    relational_expression          shift and go to state 47
    shift_expression               shift and go to state 48

state 55

    (28) expression -> expression LOGICAL_AND . expression
    (25) expression -> . additive_expression
    (26) expression -> . conditional_expression
    (27) expression -> . expression LOGICAL_OR expression
    (28) expression -> . expression LOGICAL_AND expression
    (29) expression -> . expression BITWISE_OR expression
    (30) expression -> . expression BITWISE_XOR expression
    (31) expression -> . expression BITWISE_AND expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression GREATER_THAN expression
    (36) expression -> . expression LESS_EQUALS expression
    (37) expression -> . expression GREATER_EQUALS expression
    (38) expression -> . expression SHIFT_LEFT expression
    (39) expression -> . expression SHIFT_RIGHT expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression
    (45) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (48) logical_or_expression -> . conditional_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (49) logical_and_expression -> . bitwise_or_expression
    (50) logical_and_expression -> . logical_and_expression LOGICAL_AND bitwise_or_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (51) bitwise_or_expression -> . bitwise_xor_expression
    (52) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (53) bitwise_xor_expression -> . bitwise_and_expression
    (54) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (55) bitwise_and_expression -> . equality_expression
    (56) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (57) equality_expression -> . relational_expression
    (58) equality_expression -> . equality_expression EQUALS relational_expression
    (59) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (60) relational_expression -> . shift_expression
    (61) relational_expression -> . relational_expression LESS_THAN shift_expression
    (62) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (63) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (64) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    expression                     shift and go to state 106
    additive_expression            shift and go to state 24
    conditional_expression         shift and go to state 25
    multiplicative_expression      shift and go to state 29
    logical_or_expression          shift and go to state 31
    unary_expression               shift and go to state 32
    logical_and_expression         shift and go to state 33
    postfix_expression             shift and go to state 34
    bitwise_or_expression          shift and go to state 39
    primary_expression             shift and go to state 40
    bitwise_xor_expression         shift and go to state 42
    bitwise_and_expression         shift and go to state 45
    equality_expression            shift and go to state 46
    relational_expression          shift and go to state 47
    shift_expression               shift and go to state 48

state 56

    (29) expression -> expression BITWISE_OR . expression
    (25) expression -> . additive_expression
    (26) expression -> . conditional_expression
    (27) expression -> . expression LOGICAL_OR expression
    (28) expression -> . expression LOGICAL_AND expression
    (29) expression -> . expression BITWISE_OR expression
    (30) expression -> . expression BITWISE_XOR expression
    (31) expression -> . expression BITWISE_AND expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression GREATER_THAN expression
    (36) expression -> . expression LESS_EQUALS expression
    (37) expression -> . expression GREATER_EQUALS expression
    (38) expression -> . expression SHIFT_LEFT expression
    (39) expression -> . expression SHIFT_RIGHT expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression
    (45) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (48) logical_or_expression -> . conditional_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (49) logical_and_expression -> . bitwise_or_expression
    (50) logical_and_expression -> . logical_and_expression LOGICAL_AND bitwise_or_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (51) bitwise_or_expression -> . bitwise_xor_expression
    (52) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (53) bitwise_xor_expression -> . bitwise_and_expression
    (54) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (55) bitwise_and_expression -> . equality_expression
    (56) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (57) equality_expression -> . relational_expression
    (58) equality_expression -> . equality_expression EQUALS relational_expression
    (59) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (60) relational_expression -> . shift_expression
    (61) relational_expression -> . relational_expression LESS_THAN shift_expression
    (62) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (63) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (64) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    expression                     shift and go to state 107
    additive_expression            shift and go to state 24
    conditional_expression         shift and go to state 25
    multiplicative_expression      shift and go to state 29
    logical_or_expression          shift and go to state 31
    unary_expression               shift and go to state 32
    logical_and_expression         shift and go to state 33
    postfix_expression             shift and go to state 34
    bitwise_or_expression          shift and go to state 39
    primary_expression             shift and go to state 40
    bitwise_xor_expression         shift and go to state 42
    bitwise_and_expression         shift and go to state 45
    equality_expression            shift and go to state 46
    relational_expression          shift and go to state 47
    shift_expression               shift and go to state 48

state 57

    (30) expression -> expression BITWISE_XOR . expression
    (25) expression -> . additive_expression
    (26) expression -> . conditional_expression
    (27) expression -> . expression LOGICAL_OR expression
    (28) expression -> . expression LOGICAL_AND expression
    (29) expression -> . expression BITWISE_OR expression
    (30) expression -> . expression BITWISE_XOR expression
    (31) expression -> . expression BITWISE_AND expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression GREATER_THAN expression
    (36) expression -> . expression LESS_EQUALS expression
    (37) expression -> . expression GREATER_EQUALS expression
    (38) expression -> . expression SHIFT_LEFT expression
    (39) expression -> . expression SHIFT_RIGHT expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression
    (45) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (48) logical_or_expression -> . conditional_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (49) logical_and_expression -> . bitwise_or_expression
    (50) logical_and_expression -> . logical_and_expression LOGICAL_AND bitwise_or_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (51) bitwise_or_expression -> . bitwise_xor_expression
    (52) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (53) bitwise_xor_expression -> . bitwise_and_expression
    (54) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (55) bitwise_and_expression -> . equality_expression
    (56) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (57) equality_expression -> . relational_expression
    (58) equality_expression -> . equality_expression EQUALS relational_expression
    (59) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (60) relational_expression -> . shift_expression
    (61) relational_expression -> . relational_expression LESS_THAN shift_expression
    (62) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (63) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (64) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    expression                     shift and go to state 108
    additive_expression            shift and go to state 24
    conditional_expression         shift and go to state 25
    multiplicative_expression      shift and go to state 29
    logical_or_expression          shift and go to state 31
    unary_expression               shift and go to state 32
    logical_and_expression         shift and go to state 33
    postfix_expression             shift and go to state 34
    bitwise_or_expression          shift and go to state 39
    primary_expression             shift and go to state 40
    bitwise_xor_expression         shift and go to state 42
    bitwise_and_expression         shift and go to state 45
    equality_expression            shift and go to state 46
    relational_expression          shift and go to state 47
    shift_expression               shift and go to state 48

state 58

    (31) expression -> expression BITWISE_AND . expression
    (25) expression -> . additive_expression
    (26) expression -> . conditional_expression
    (27) expression -> . expression LOGICAL_OR expression
    (28) expression -> . expression LOGICAL_AND expression
    (29) expression -> . expression BITWISE_OR expression
    (30) expression -> . expression BITWISE_XOR expression
    (31) expression -> . expression BITWISE_AND expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression GREATER_THAN expression
    (36) expression -> . expression LESS_EQUALS expression
    (37) expression -> . expression GREATER_EQUALS expression
    (38) expression -> . expression SHIFT_LEFT expression
    (39) expression -> . expression SHIFT_RIGHT expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression
    (45) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (48) logical_or_expression -> . conditional_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (49) logical_and_expression -> . bitwise_or_expression
    (50) logical_and_expression -> . logical_and_expression LOGICAL_AND bitwise_or_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (51) bitwise_or_expression -> . bitwise_xor_expression
    (52) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (53) bitwise_xor_expression -> . bitwise_and_expression
    (54) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (55) bitwise_and_expression -> . equality_expression
    (56) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (57) equality_expression -> . relational_expression
    (58) equality_expression -> . equality_expression EQUALS relational_expression
    (59) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (60) relational_expression -> . shift_expression
    (61) relational_expression -> . relational_expression LESS_THAN shift_expression
    (62) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (63) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (64) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    expression                     shift and go to state 109
    additive_expression            shift and go to state 24
    conditional_expression         shift and go to state 25
    multiplicative_expression      shift and go to state 29
    logical_or_expression          shift and go to state 31
    unary_expression               shift and go to state 32
    logical_and_expression         shift and go to state 33
    postfix_expression             shift and go to state 34
    bitwise_or_expression          shift and go to state 39
    primary_expression             shift and go to state 40
    bitwise_xor_expression         shift and go to state 42
    bitwise_and_expression         shift and go to state 45
    equality_expression            shift and go to state 46
    relational_expression          shift and go to state 47
    shift_expression               shift and go to state 48

state 59

    (32) expression -> expression EQUALS . expression
    (25) expression -> . additive_expression
    (26) expression -> . conditional_expression
    (27) expression -> . expression LOGICAL_OR expression
    (28) expression -> . expression LOGICAL_AND expression
    (29) expression -> . expression BITWISE_OR expression
    (30) expression -> . expression BITWISE_XOR expression
    (31) expression -> . expression BITWISE_AND expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression GREATER_THAN expression
    (36) expression -> . expression LESS_EQUALS expression
    (37) expression -> . expression GREATER_EQUALS expression
    (38) expression -> . expression SHIFT_LEFT expression
    (39) expression -> . expression SHIFT_RIGHT expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression
    (45) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (48) logical_or_expression -> . conditional_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (49) logical_and_expression -> . bitwise_or_expression
    (50) logical_and_expression -> . logical_and_expression LOGICAL_AND bitwise_or_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (51) bitwise_or_expression -> . bitwise_xor_expression
    (52) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (53) bitwise_xor_expression -> . bitwise_and_expression
    (54) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (55) bitwise_and_expression -> . equality_expression
    (56) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (57) equality_expression -> . relational_expression
    (58) equality_expression -> . equality_expression EQUALS relational_expression
    (59) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (60) relational_expression -> . shift_expression
    (61) relational_expression -> . relational_expression LESS_THAN shift_expression
    (62) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (63) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (64) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    expression                     shift and go to state 110
    additive_expression            shift and go to state 24
    conditional_expression         shift and go to state 25
    multiplicative_expression      shift and go to state 29
    logical_or_expression          shift and go to state 31
    unary_expression               shift and go to state 32
    logical_and_expression         shift and go to state 33
    postfix_expression             shift and go to state 34
    bitwise_or_expression          shift and go to state 39
    primary_expression             shift and go to state 40
    bitwise_xor_expression         shift and go to state 42
    bitwise_and_expression         shift and go to state 45
    equality_expression            shift and go to state 46
    relational_expression          shift and go to state 47
    shift_expression               shift and go to state 48

state 60

    (33) expression -> expression NOT_EQUALS . expression
    (25) expression -> . additive_expression
    (26) expression -> . conditional_expression
    (27) expression -> . expression LOGICAL_OR expression
    (28) expression -> . expression LOGICAL_AND expression
    (29) expression -> . expression BITWISE_OR expression
    (30) expression -> . expression BITWISE_XOR expression
    (31) expression -> . expression BITWISE_AND expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression GREATER_THAN expression
    (36) expression -> . expression LESS_EQUALS expression
    (37) expression -> . expression GREATER_EQUALS expression
    (38) expression -> . expression SHIFT_LEFT expression
    (39) expression -> . expression SHIFT_RIGHT expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression
    (45) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (48) logical_or_expression -> . conditional_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (49) logical_and_expression -> . bitwise_or_expression
    (50) logical_and_expression -> . logical_and_expression LOGICAL_AND bitwise_or_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (51) bitwise_or_expression -> . bitwise_xor_expression
    (52) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (53) bitwise_xor_expression -> . bitwise_and_expression
    (54) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (55) bitwise_and_expression -> . equality_expression
    (56) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (57) equality_expression -> . relational_expression
    (58) equality_expression -> . equality_expression EQUALS relational_expression
    (59) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (60) relational_expression -> . shift_expression
    (61) relational_expression -> . relational_expression LESS_THAN shift_expression
    (62) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (63) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (64) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    expression                     shift and go to state 111
    additive_expression            shift and go to state 24
    conditional_expression         shift and go to state 25
    multiplicative_expression      shift and go to state 29
    logical_or_expression          shift and go to state 31
    unary_expression               shift and go to state 32
    logical_and_expression         shift and go to state 33
    postfix_expression             shift and go to state 34
    bitwise_or_expression          shift and go to state 39
    primary_expression             shift and go to state 40
    bitwise_xor_expression         shift and go to state 42
    bitwise_and_expression         shift and go to state 45
    equality_expression            shift and go to state 46
    relational_expression          shift and go to state 47
    shift_expression               shift and go to state 48

state 61

    (34) expression -> expression LESS_THAN . expression
    (25) expression -> . additive_expression
    (26) expression -> . conditional_expression
    (27) expression -> . expression LOGICAL_OR expression
    (28) expression -> . expression LOGICAL_AND expression
    (29) expression -> . expression BITWISE_OR expression
    (30) expression -> . expression BITWISE_XOR expression
    (31) expression -> . expression BITWISE_AND expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression GREATER_THAN expression
    (36) expression -> . expression LESS_EQUALS expression
    (37) expression -> . expression GREATER_EQUALS expression
    (38) expression -> . expression SHIFT_LEFT expression
    (39) expression -> . expression SHIFT_RIGHT expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression
    (45) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (48) logical_or_expression -> . conditional_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (49) logical_and_expression -> . bitwise_or_expression
    (50) logical_and_expression -> . logical_and_expression LOGICAL_AND bitwise_or_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (51) bitwise_or_expression -> . bitwise_xor_expression
    (52) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (53) bitwise_xor_expression -> . bitwise_and_expression
    (54) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (55) bitwise_and_expression -> . equality_expression
    (56) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (57) equality_expression -> . relational_expression
    (58) equality_expression -> . equality_expression EQUALS relational_expression
    (59) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (60) relational_expression -> . shift_expression
    (61) relational_expression -> . relational_expression LESS_THAN shift_expression
    (62) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (63) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (64) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    expression                     shift and go to state 112
    additive_expression            shift and go to state 24
    conditional_expression         shift and go to state 25
    multiplicative_expression      shift and go to state 29
    logical_or_expression          shift and go to state 31
    unary_expression               shift and go to state 32
    logical_and_expression         shift and go to state 33
    postfix_expression             shift and go to state 34
    bitwise_or_expression          shift and go to state 39
    primary_expression             shift and go to state 40
    bitwise_xor_expression         shift and go to state 42
    bitwise_and_expression         shift and go to state 45
    equality_expression            shift and go to state 46
    relational_expression          shift and go to state 47
    shift_expression               shift and go to state 48

state 62

    (35) expression -> expression GREATER_THAN . expression
    (25) expression -> . additive_expression
    (26) expression -> . conditional_expression
    (27) expression -> . expression LOGICAL_OR expression
    (28) expression -> . expression LOGICAL_AND expression
    (29) expression -> . expression BITWISE_OR expression
    (30) expression -> . expression BITWISE_XOR expression
    (31) expression -> . expression BITWISE_AND expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression GREATER_THAN expression
    (36) expression -> . expression LESS_EQUALS expression
    (37) expression -> . expression GREATER_EQUALS expression
    (38) expression -> . expression SHIFT_LEFT expression
    (39) expression -> . expression SHIFT_RIGHT expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression
    (45) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (48) logical_or_expression -> . conditional_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (49) logical_and_expression -> . bitwise_or_expression
    (50) logical_and_expression -> . logical_and_expression LOGICAL_AND bitwise_or_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (51) bitwise_or_expression -> . bitwise_xor_expression
    (52) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (53) bitwise_xor_expression -> . bitwise_and_expression
    (54) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (55) bitwise_and_expression -> . equality_expression
    (56) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (57) equality_expression -> . relational_expression
    (58) equality_expression -> . equality_expression EQUALS relational_expression
    (59) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (60) relational_expression -> . shift_expression
    (61) relational_expression -> . relational_expression LESS_THAN shift_expression
    (62) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (63) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (64) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    expression                     shift and go to state 113
    additive_expression            shift and go to state 24
    conditional_expression         shift and go to state 25
    multiplicative_expression      shift and go to state 29
    logical_or_expression          shift and go to state 31
    unary_expression               shift and go to state 32
    logical_and_expression         shift and go to state 33
    postfix_expression             shift and go to state 34
    bitwise_or_expression          shift and go to state 39
    primary_expression             shift and go to state 40
    bitwise_xor_expression         shift and go to state 42
    bitwise_and_expression         shift and go to state 45
    equality_expression            shift and go to state 46
    relational_expression          shift and go to state 47
    shift_expression               shift and go to state 48

state 63

    (36) expression -> expression LESS_EQUALS . expression
    (25) expression -> . additive_expression
    (26) expression -> . conditional_expression
    (27) expression -> . expression LOGICAL_OR expression
    (28) expression -> . expression LOGICAL_AND expression
    (29) expression -> . expression BITWISE_OR expression
    (30) expression -> . expression BITWISE_XOR expression
    (31) expression -> . expression BITWISE_AND expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression GREATER_THAN expression
    (36) expression -> . expression LESS_EQUALS expression
    (37) expression -> . expression GREATER_EQUALS expression
    (38) expression -> . expression SHIFT_LEFT expression
    (39) expression -> . expression SHIFT_RIGHT expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression
    (45) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (48) logical_or_expression -> . conditional_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (49) logical_and_expression -> . bitwise_or_expression
    (50) logical_and_expression -> . logical_and_expression LOGICAL_AND bitwise_or_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (51) bitwise_or_expression -> . bitwise_xor_expression
    (52) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (53) bitwise_xor_expression -> . bitwise_and_expression
    (54) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (55) bitwise_and_expression -> . equality_expression
    (56) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (57) equality_expression -> . relational_expression
    (58) equality_expression -> . equality_expression EQUALS relational_expression
    (59) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (60) relational_expression -> . shift_expression
    (61) relational_expression -> . relational_expression LESS_THAN shift_expression
    (62) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (63) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (64) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    expression                     shift and go to state 114
    additive_expression            shift and go to state 24
    conditional_expression         shift and go to state 25
    multiplicative_expression      shift and go to state 29
    logical_or_expression          shift and go to state 31
    unary_expression               shift and go to state 32
    logical_and_expression         shift and go to state 33
    postfix_expression             shift and go to state 34
    bitwise_or_expression          shift and go to state 39
    primary_expression             shift and go to state 40
    bitwise_xor_expression         shift and go to state 42
    bitwise_and_expression         shift and go to state 45
    equality_expression            shift and go to state 46
    relational_expression          shift and go to state 47
    shift_expression               shift and go to state 48

state 64

    (37) expression -> expression GREATER_EQUALS . expression
    (25) expression -> . additive_expression
    (26) expression -> . conditional_expression
    (27) expression -> . expression LOGICAL_OR expression
    (28) expression -> . expression LOGICAL_AND expression
    (29) expression -> . expression BITWISE_OR expression
    (30) expression -> . expression BITWISE_XOR expression
    (31) expression -> . expression BITWISE_AND expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression GREATER_THAN expression
    (36) expression -> . expression LESS_EQUALS expression
    (37) expression -> . expression GREATER_EQUALS expression
    (38) expression -> . expression SHIFT_LEFT expression
    (39) expression -> . expression SHIFT_RIGHT expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression
    (45) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (48) logical_or_expression -> . conditional_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (49) logical_and_expression -> . bitwise_or_expression
    (50) logical_and_expression -> . logical_and_expression LOGICAL_AND bitwise_or_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (51) bitwise_or_expression -> . bitwise_xor_expression
    (52) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (53) bitwise_xor_expression -> . bitwise_and_expression
    (54) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (55) bitwise_and_expression -> . equality_expression
    (56) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (57) equality_expression -> . relational_expression
    (58) equality_expression -> . equality_expression EQUALS relational_expression
    (59) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (60) relational_expression -> . shift_expression
    (61) relational_expression -> . relational_expression LESS_THAN shift_expression
    (62) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (63) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (64) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    expression                     shift and go to state 115
    additive_expression            shift and go to state 24
    conditional_expression         shift and go to state 25
    multiplicative_expression      shift and go to state 29
    logical_or_expression          shift and go to state 31
    unary_expression               shift and go to state 32
    logical_and_expression         shift and go to state 33
    postfix_expression             shift and go to state 34
    bitwise_or_expression          shift and go to state 39
    primary_expression             shift and go to state 40
    bitwise_xor_expression         shift and go to state 42
    bitwise_and_expression         shift and go to state 45
    equality_expression            shift and go to state 46
    relational_expression          shift and go to state 47
    shift_expression               shift and go to state 48

state 65

    (38) expression -> expression SHIFT_LEFT . expression
    (25) expression -> . additive_expression
    (26) expression -> . conditional_expression
    (27) expression -> . expression LOGICAL_OR expression
    (28) expression -> . expression LOGICAL_AND expression
    (29) expression -> . expression BITWISE_OR expression
    (30) expression -> . expression BITWISE_XOR expression
    (31) expression -> . expression BITWISE_AND expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression GREATER_THAN expression
    (36) expression -> . expression LESS_EQUALS expression
    (37) expression -> . expression GREATER_EQUALS expression
    (38) expression -> . expression SHIFT_LEFT expression
    (39) expression -> . expression SHIFT_RIGHT expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression
    (45) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (48) logical_or_expression -> . conditional_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (49) logical_and_expression -> . bitwise_or_expression
    (50) logical_and_expression -> . logical_and_expression LOGICAL_AND bitwise_or_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (51) bitwise_or_expression -> . bitwise_xor_expression
    (52) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (53) bitwise_xor_expression -> . bitwise_and_expression
    (54) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (55) bitwise_and_expression -> . equality_expression
    (56) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (57) equality_expression -> . relational_expression
    (58) equality_expression -> . equality_expression EQUALS relational_expression
    (59) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (60) relational_expression -> . shift_expression
    (61) relational_expression -> . relational_expression LESS_THAN shift_expression
    (62) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (63) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (64) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    expression                     shift and go to state 116
    additive_expression            shift and go to state 24
    conditional_expression         shift and go to state 25
    multiplicative_expression      shift and go to state 29
    logical_or_expression          shift and go to state 31
    unary_expression               shift and go to state 32
    logical_and_expression         shift and go to state 33
    postfix_expression             shift and go to state 34
    bitwise_or_expression          shift and go to state 39
    primary_expression             shift and go to state 40
    bitwise_xor_expression         shift and go to state 42
    bitwise_and_expression         shift and go to state 45
    equality_expression            shift and go to state 46
    relational_expression          shift and go to state 47
    shift_expression               shift and go to state 48

state 66

    (39) expression -> expression SHIFT_RIGHT . expression
    (25) expression -> . additive_expression
    (26) expression -> . conditional_expression
    (27) expression -> . expression LOGICAL_OR expression
    (28) expression -> . expression LOGICAL_AND expression
    (29) expression -> . expression BITWISE_OR expression
    (30) expression -> . expression BITWISE_XOR expression
    (31) expression -> . expression BITWISE_AND expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression GREATER_THAN expression
    (36) expression -> . expression LESS_EQUALS expression
    (37) expression -> . expression GREATER_EQUALS expression
    (38) expression -> . expression SHIFT_LEFT expression
    (39) expression -> . expression SHIFT_RIGHT expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression
    (45) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (48) logical_or_expression -> . conditional_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (49) logical_and_expression -> . bitwise_or_expression
    (50) logical_and_expression -> . logical_and_expression LOGICAL_AND bitwise_or_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (51) bitwise_or_expression -> . bitwise_xor_expression
    (52) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (53) bitwise_xor_expression -> . bitwise_and_expression
    (54) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (55) bitwise_and_expression -> . equality_expression
    (56) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (57) equality_expression -> . relational_expression
    (58) equality_expression -> . equality_expression EQUALS relational_expression
    (59) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (60) relational_expression -> . shift_expression
    (61) relational_expression -> . relational_expression LESS_THAN shift_expression
    (62) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (63) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (64) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    expression                     shift and go to state 117
    additive_expression            shift and go to state 24
    conditional_expression         shift and go to state 25
    multiplicative_expression      shift and go to state 29
    logical_or_expression          shift and go to state 31
    unary_expression               shift and go to state 32
    logical_and_expression         shift and go to state 33
    postfix_expression             shift and go to state 34
    bitwise_or_expression          shift and go to state 39
    primary_expression             shift and go to state 40
    bitwise_xor_expression         shift and go to state 42
    bitwise_and_expression         shift and go to state 45
    equality_expression            shift and go to state 46
    relational_expression          shift and go to state 47
    shift_expression               shift and go to state 48

state 67

    (69) additive_expression -> additive_expression PLUS . multiplicative_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    multiplicative_expression      shift and go to state 118
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 40

state 68

    (70) additive_expression -> additive_expression MINUS . multiplicative_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    multiplicative_expression      shift and go to state 119
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 40

state 69

    (76) unary_expression -> BITWISE_AND unary_expression .

    MUL             reduce using rule 76 (unary_expression -> BITWISE_AND unary_expression .)
    DIV             reduce using rule 76 (unary_expression -> BITWISE_AND unary_expression .)
    MOD             reduce using rule 76 (unary_expression -> BITWISE_AND unary_expression .)
    PLUS            reduce using rule 76 (unary_expression -> BITWISE_AND unary_expression .)
    MINUS           reduce using rule 76 (unary_expression -> BITWISE_AND unary_expression .)
    LOGICAL_OR      reduce using rule 76 (unary_expression -> BITWISE_AND unary_expression .)
    LOGICAL_AND     reduce using rule 76 (unary_expression -> BITWISE_AND unary_expression .)
    BITWISE_OR      reduce using rule 76 (unary_expression -> BITWISE_AND unary_expression .)
    BITWISE_XOR     reduce using rule 76 (unary_expression -> BITWISE_AND unary_expression .)
    BITWISE_AND     reduce using rule 76 (unary_expression -> BITWISE_AND unary_expression .)
    EQUALS          reduce using rule 76 (unary_expression -> BITWISE_AND unary_expression .)
    NOT_EQUALS      reduce using rule 76 (unary_expression -> BITWISE_AND unary_expression .)
    LESS_THAN       reduce using rule 76 (unary_expression -> BITWISE_AND unary_expression .)
    GREATER_THAN    reduce using rule 76 (unary_expression -> BITWISE_AND unary_expression .)
    LESS_EQUALS     reduce using rule 76 (unary_expression -> BITWISE_AND unary_expression .)
    GREATER_EQUALS  reduce using rule 76 (unary_expression -> BITWISE_AND unary_expression .)
    SHIFT_LEFT      reduce using rule 76 (unary_expression -> BITWISE_AND unary_expression .)
    SHIFT_RIGHT     reduce using rule 76 (unary_expression -> BITWISE_AND unary_expression .)
    SEMICOLON       reduce using rule 76 (unary_expression -> BITWISE_AND unary_expression .)
    CONDITIONAL_OPERATOR reduce using rule 76 (unary_expression -> BITWISE_AND unary_expression .)
    COMMA           reduce using rule 76 (unary_expression -> BITWISE_AND unary_expression .)
    CLOSE_PAREN     reduce using rule 76 (unary_expression -> BITWISE_AND unary_expression .)
    COLON           reduce using rule 76 (unary_expression -> BITWISE_AND unary_expression .)
    CLOSE_BRACKET   reduce using rule 76 (unary_expression -> BITWISE_AND unary_expression .)


state 70

    (79) unary_expression -> MINUS . unary_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    unary_expression               shift and go to state 73
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 40

state 71

    (93) primary_expression -> FLOAT .

    OPEN_PAREN      reduce using rule 93 (primary_expression -> FLOAT .)
    OPEN_BRACKET    reduce using rule 93 (primary_expression -> FLOAT .)
    DOT             reduce using rule 93 (primary_expression -> FLOAT .)
    ARROW           reduce using rule 93 (primary_expression -> FLOAT .)
    INCREMENT       reduce using rule 93 (primary_expression -> FLOAT .)
    DECREMENT       reduce using rule 93 (primary_expression -> FLOAT .)
    MUL             reduce using rule 93 (primary_expression -> FLOAT .)
    DIV             reduce using rule 93 (primary_expression -> FLOAT .)
    MOD             reduce using rule 93 (primary_expression -> FLOAT .)
    PLUS            reduce using rule 93 (primary_expression -> FLOAT .)
    MINUS           reduce using rule 93 (primary_expression -> FLOAT .)
    LOGICAL_OR      reduce using rule 93 (primary_expression -> FLOAT .)
    LOGICAL_AND     reduce using rule 93 (primary_expression -> FLOAT .)
    BITWISE_OR      reduce using rule 93 (primary_expression -> FLOAT .)
    BITWISE_XOR     reduce using rule 93 (primary_expression -> FLOAT .)
    BITWISE_AND     reduce using rule 93 (primary_expression -> FLOAT .)
    EQUALS          reduce using rule 93 (primary_expression -> FLOAT .)
    NOT_EQUALS      reduce using rule 93 (primary_expression -> FLOAT .)
    LESS_THAN       reduce using rule 93 (primary_expression -> FLOAT .)
    GREATER_THAN    reduce using rule 93 (primary_expression -> FLOAT .)
    LESS_EQUALS     reduce using rule 93 (primary_expression -> FLOAT .)
    GREATER_EQUALS  reduce using rule 93 (primary_expression -> FLOAT .)
    SHIFT_LEFT      reduce using rule 93 (primary_expression -> FLOAT .)
    SHIFT_RIGHT     reduce using rule 93 (primary_expression -> FLOAT .)
    SEMICOLON       reduce using rule 93 (primary_expression -> FLOAT .)
    CONDITIONAL_OPERATOR reduce using rule 93 (primary_expression -> FLOAT .)
    COMMA           reduce using rule 93 (primary_expression -> FLOAT .)
    CLOSE_PAREN     reduce using rule 93 (primary_expression -> FLOAT .)
    COLON           reduce using rule 93 (primary_expression -> FLOAT .)
    CLOSE_BRACKET   reduce using rule 93 (primary_expression -> FLOAT .)


state 72

    (111) float_constant -> MINUS FLOAT .
    (93) primary_expression -> FLOAT .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 93 (primary_expression -> FLOAT .)
  ! reduce/reduce conflict for COMMA resolved using rule 93 (primary_expression -> FLOAT .)
    OPEN_PAREN      reduce using rule 93 (primary_expression -> FLOAT .)
    OPEN_BRACKET    reduce using rule 93 (primary_expression -> FLOAT .)
    DOT             reduce using rule 93 (primary_expression -> FLOAT .)
    ARROW           reduce using rule 93 (primary_expression -> FLOAT .)
    INCREMENT       reduce using rule 93 (primary_expression -> FLOAT .)
    DECREMENT       reduce using rule 93 (primary_expression -> FLOAT .)
    MUL             reduce using rule 93 (primary_expression -> FLOAT .)
    DIV             reduce using rule 93 (primary_expression -> FLOAT .)
    MOD             reduce using rule 93 (primary_expression -> FLOAT .)
    PLUS            reduce using rule 93 (primary_expression -> FLOAT .)
    MINUS           reduce using rule 93 (primary_expression -> FLOAT .)
    LOGICAL_OR      reduce using rule 93 (primary_expression -> FLOAT .)
    LOGICAL_AND     reduce using rule 93 (primary_expression -> FLOAT .)
    BITWISE_OR      reduce using rule 93 (primary_expression -> FLOAT .)
    BITWISE_XOR     reduce using rule 93 (primary_expression -> FLOAT .)
    BITWISE_AND     reduce using rule 93 (primary_expression -> FLOAT .)
    EQUALS          reduce using rule 93 (primary_expression -> FLOAT .)
    NOT_EQUALS      reduce using rule 93 (primary_expression -> FLOAT .)
    LESS_THAN       reduce using rule 93 (primary_expression -> FLOAT .)
    GREATER_THAN    reduce using rule 93 (primary_expression -> FLOAT .)
    LESS_EQUALS     reduce using rule 93 (primary_expression -> FLOAT .)
    GREATER_EQUALS  reduce using rule 93 (primary_expression -> FLOAT .)
    SHIFT_LEFT      reduce using rule 93 (primary_expression -> FLOAT .)
    SHIFT_RIGHT     reduce using rule 93 (primary_expression -> FLOAT .)
    SEMICOLON       reduce using rule 93 (primary_expression -> FLOAT .)
    CONDITIONAL_OPERATOR reduce using rule 93 (primary_expression -> FLOAT .)
    COMMA           reduce using rule 93 (primary_expression -> FLOAT .)

  ! SEMICOLON       [ reduce using rule 111 (float_constant -> MINUS FLOAT .) ]
  ! COMMA           [ reduce using rule 111 (float_constant -> MINUS FLOAT .) ]


state 73

    (79) unary_expression -> MINUS unary_expression .

    MUL             reduce using rule 79 (unary_expression -> MINUS unary_expression .)
    DIV             reduce using rule 79 (unary_expression -> MINUS unary_expression .)
    MOD             reduce using rule 79 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 79 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 79 (unary_expression -> MINUS unary_expression .)
    LOGICAL_OR      reduce using rule 79 (unary_expression -> MINUS unary_expression .)
    LOGICAL_AND     reduce using rule 79 (unary_expression -> MINUS unary_expression .)
    BITWISE_OR      reduce using rule 79 (unary_expression -> MINUS unary_expression .)
    BITWISE_XOR     reduce using rule 79 (unary_expression -> MINUS unary_expression .)
    BITWISE_AND     reduce using rule 79 (unary_expression -> MINUS unary_expression .)
    EQUALS          reduce using rule 79 (unary_expression -> MINUS unary_expression .)
    NOT_EQUALS      reduce using rule 79 (unary_expression -> MINUS unary_expression .)
    LESS_THAN       reduce using rule 79 (unary_expression -> MINUS unary_expression .)
    GREATER_THAN    reduce using rule 79 (unary_expression -> MINUS unary_expression .)
    LESS_EQUALS     reduce using rule 79 (unary_expression -> MINUS unary_expression .)
    GREATER_EQUALS  reduce using rule 79 (unary_expression -> MINUS unary_expression .)
    SHIFT_LEFT      reduce using rule 79 (unary_expression -> MINUS unary_expression .)
    SHIFT_RIGHT     reduce using rule 79 (unary_expression -> MINUS unary_expression .)
    SEMICOLON       reduce using rule 79 (unary_expression -> MINUS unary_expression .)
    CONDITIONAL_OPERATOR reduce using rule 79 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 79 (unary_expression -> MINUS unary_expression .)
    CLOSE_PAREN     reduce using rule 79 (unary_expression -> MINUS unary_expression .)
    COLON           reduce using rule 79 (unary_expression -> MINUS unary_expression .)
    CLOSE_BRACKET   reduce using rule 79 (unary_expression -> MINUS unary_expression .)


state 74

    (72) multiplicative_expression -> multiplicative_expression MUL . unary_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 40

state 75

    (73) multiplicative_expression -> multiplicative_expression DIV . unary_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    unary_expression               shift and go to state 121
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 40

state 76

    (74) multiplicative_expression -> multiplicative_expression MOD . unary_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    unary_expression               shift and go to state 122
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 40

state 77

    (78) unary_expression -> PLUS unary_expression .

    MUL             reduce using rule 78 (unary_expression -> PLUS unary_expression .)
    DIV             reduce using rule 78 (unary_expression -> PLUS unary_expression .)
    MOD             reduce using rule 78 (unary_expression -> PLUS unary_expression .)
    PLUS            reduce using rule 78 (unary_expression -> PLUS unary_expression .)
    MINUS           reduce using rule 78 (unary_expression -> PLUS unary_expression .)
    LOGICAL_OR      reduce using rule 78 (unary_expression -> PLUS unary_expression .)
    LOGICAL_AND     reduce using rule 78 (unary_expression -> PLUS unary_expression .)
    BITWISE_OR      reduce using rule 78 (unary_expression -> PLUS unary_expression .)
    BITWISE_XOR     reduce using rule 78 (unary_expression -> PLUS unary_expression .)
    BITWISE_AND     reduce using rule 78 (unary_expression -> PLUS unary_expression .)
    EQUALS          reduce using rule 78 (unary_expression -> PLUS unary_expression .)
    NOT_EQUALS      reduce using rule 78 (unary_expression -> PLUS unary_expression .)
    LESS_THAN       reduce using rule 78 (unary_expression -> PLUS unary_expression .)
    GREATER_THAN    reduce using rule 78 (unary_expression -> PLUS unary_expression .)
    LESS_EQUALS     reduce using rule 78 (unary_expression -> PLUS unary_expression .)
    GREATER_EQUALS  reduce using rule 78 (unary_expression -> PLUS unary_expression .)
    SHIFT_LEFT      reduce using rule 78 (unary_expression -> PLUS unary_expression .)
    SHIFT_RIGHT     reduce using rule 78 (unary_expression -> PLUS unary_expression .)
    SEMICOLON       reduce using rule 78 (unary_expression -> PLUS unary_expression .)
    CONDITIONAL_OPERATOR reduce using rule 78 (unary_expression -> PLUS unary_expression .)
    COMMA           reduce using rule 78 (unary_expression -> PLUS unary_expression .)
    CLOSE_PAREN     reduce using rule 78 (unary_expression -> PLUS unary_expression .)
    COLON           reduce using rule 78 (unary_expression -> PLUS unary_expression .)
    CLOSE_BRACKET   reduce using rule 78 (unary_expression -> PLUS unary_expression .)


state 78

    (44) conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR . expression COLON conditional_expression
    (45) conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR . expression COMMA conditional_expression
    (25) expression -> . additive_expression
    (26) expression -> . conditional_expression
    (27) expression -> . expression LOGICAL_OR expression
    (28) expression -> . expression LOGICAL_AND expression
    (29) expression -> . expression BITWISE_OR expression
    (30) expression -> . expression BITWISE_XOR expression
    (31) expression -> . expression BITWISE_AND expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression GREATER_THAN expression
    (36) expression -> . expression LESS_EQUALS expression
    (37) expression -> . expression GREATER_EQUALS expression
    (38) expression -> . expression SHIFT_LEFT expression
    (39) expression -> . expression SHIFT_RIGHT expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression
    (45) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (48) logical_or_expression -> . conditional_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (49) logical_and_expression -> . bitwise_or_expression
    (50) logical_and_expression -> . logical_and_expression LOGICAL_AND bitwise_or_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (51) bitwise_or_expression -> . bitwise_xor_expression
    (52) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (53) bitwise_xor_expression -> . bitwise_and_expression
    (54) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (55) bitwise_and_expression -> . equality_expression
    (56) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (57) equality_expression -> . relational_expression
    (58) equality_expression -> . equality_expression EQUALS relational_expression
    (59) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (60) relational_expression -> . shift_expression
    (61) relational_expression -> . relational_expression LESS_THAN shift_expression
    (62) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (63) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (64) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    logical_or_expression          shift and go to state 31
    expression                     shift and go to state 123
    conditional_expression         shift and go to state 25
    additive_expression            shift and go to state 24
    multiplicative_expression      shift and go to state 29
    unary_expression               shift and go to state 32
    logical_and_expression         shift and go to state 33
    postfix_expression             shift and go to state 34
    bitwise_or_expression          shift and go to state 39
    primary_expression             shift and go to state 40
    bitwise_xor_expression         shift and go to state 42
    bitwise_and_expression         shift and go to state 45
    equality_expression            shift and go to state 46
    relational_expression          shift and go to state 47
    shift_expression               shift and go to state 48

state 79

    (47) logical_or_expression -> logical_or_expression LOGICAL_OR . logical_and_expression
    (49) logical_and_expression -> . bitwise_or_expression
    (50) logical_and_expression -> . logical_and_expression LOGICAL_AND bitwise_or_expression
    (51) bitwise_or_expression -> . bitwise_xor_expression
    (52) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (53) bitwise_xor_expression -> . bitwise_and_expression
    (54) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (55) bitwise_and_expression -> . equality_expression
    (56) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (57) equality_expression -> . relational_expression
    (58) equality_expression -> . equality_expression EQUALS relational_expression
    (59) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (60) relational_expression -> . shift_expression
    (61) relational_expression -> . relational_expression LESS_THAN shift_expression
    (62) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (63) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (64) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    logical_and_expression         shift and go to state 124
    bitwise_or_expression          shift and go to state 39
    bitwise_xor_expression         shift and go to state 42
    bitwise_and_expression         shift and go to state 45
    equality_expression            shift and go to state 46
    relational_expression          shift and go to state 47
    shift_expression               shift and go to state 48
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 29
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 40

state 80

    (50) logical_and_expression -> logical_and_expression LOGICAL_AND . bitwise_or_expression
    (51) bitwise_or_expression -> . bitwise_xor_expression
    (52) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (53) bitwise_xor_expression -> . bitwise_and_expression
    (54) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (55) bitwise_and_expression -> . equality_expression
    (56) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (57) equality_expression -> . relational_expression
    (58) equality_expression -> . equality_expression EQUALS relational_expression
    (59) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (60) relational_expression -> . shift_expression
    (61) relational_expression -> . relational_expression LESS_THAN shift_expression
    (62) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (63) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (64) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    bitwise_or_expression          shift and go to state 126
    bitwise_xor_expression         shift and go to state 42
    bitwise_and_expression         shift and go to state 45
    equality_expression            shift and go to state 46
    relational_expression          shift and go to state 47
    shift_expression               shift and go to state 48
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 29
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 40

state 81

    (84) postfix_expression -> postfix_expression OPEN_PAREN . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 127


state 82

    (85) postfix_expression -> postfix_expression OPEN_BRACKET . expression CLOSE_BRACKET
    (25) expression -> . additive_expression
    (26) expression -> . conditional_expression
    (27) expression -> . expression LOGICAL_OR expression
    (28) expression -> . expression LOGICAL_AND expression
    (29) expression -> . expression BITWISE_OR expression
    (30) expression -> . expression BITWISE_XOR expression
    (31) expression -> . expression BITWISE_AND expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression GREATER_THAN expression
    (36) expression -> . expression LESS_EQUALS expression
    (37) expression -> . expression GREATER_EQUALS expression
    (38) expression -> . expression SHIFT_LEFT expression
    (39) expression -> . expression SHIFT_RIGHT expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression
    (45) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (48) logical_or_expression -> . conditional_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (49) logical_and_expression -> . bitwise_or_expression
    (50) logical_and_expression -> . logical_and_expression LOGICAL_AND bitwise_or_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (51) bitwise_or_expression -> . bitwise_xor_expression
    (52) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (53) bitwise_xor_expression -> . bitwise_and_expression
    (54) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (55) bitwise_and_expression -> . equality_expression
    (56) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (57) equality_expression -> . relational_expression
    (58) equality_expression -> . equality_expression EQUALS relational_expression
    (59) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (60) relational_expression -> . shift_expression
    (61) relational_expression -> . relational_expression LESS_THAN shift_expression
    (62) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (63) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (64) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    postfix_expression             shift and go to state 34
    expression                     shift and go to state 128
    additive_expression            shift and go to state 24
    conditional_expression         shift and go to state 25
    multiplicative_expression      shift and go to state 29
    logical_or_expression          shift and go to state 31
    unary_expression               shift and go to state 32
    logical_and_expression         shift and go to state 33
    bitwise_or_expression          shift and go to state 39
    primary_expression             shift and go to state 40
    bitwise_xor_expression         shift and go to state 42
    bitwise_and_expression         shift and go to state 45
    equality_expression            shift and go to state 46
    relational_expression          shift and go to state 47
    shift_expression               shift and go to state 48

state 83

    (86) postfix_expression -> postfix_expression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 129


state 84

    (87) postfix_expression -> postfix_expression ARROW . IDENTIFIER

    IDENTIFIER      shift and go to state 130


state 85

    (88) postfix_expression -> postfix_expression INCREMENT .

    OPEN_PAREN      reduce using rule 88 (postfix_expression -> postfix_expression INCREMENT .)
    OPEN_BRACKET    reduce using rule 88 (postfix_expression -> postfix_expression INCREMENT .)
    DOT             reduce using rule 88 (postfix_expression -> postfix_expression INCREMENT .)
    ARROW           reduce using rule 88 (postfix_expression -> postfix_expression INCREMENT .)
    INCREMENT       reduce using rule 88 (postfix_expression -> postfix_expression INCREMENT .)
    DECREMENT       reduce using rule 88 (postfix_expression -> postfix_expression INCREMENT .)
    MUL             reduce using rule 88 (postfix_expression -> postfix_expression INCREMENT .)
    DIV             reduce using rule 88 (postfix_expression -> postfix_expression INCREMENT .)
    MOD             reduce using rule 88 (postfix_expression -> postfix_expression INCREMENT .)
    PLUS            reduce using rule 88 (postfix_expression -> postfix_expression INCREMENT .)
    MINUS           reduce using rule 88 (postfix_expression -> postfix_expression INCREMENT .)
    LOGICAL_OR      reduce using rule 88 (postfix_expression -> postfix_expression INCREMENT .)
    LOGICAL_AND     reduce using rule 88 (postfix_expression -> postfix_expression INCREMENT .)
    BITWISE_OR      reduce using rule 88 (postfix_expression -> postfix_expression INCREMENT .)
    BITWISE_XOR     reduce using rule 88 (postfix_expression -> postfix_expression INCREMENT .)
    BITWISE_AND     reduce using rule 88 (postfix_expression -> postfix_expression INCREMENT .)
    EQUALS          reduce using rule 88 (postfix_expression -> postfix_expression INCREMENT .)
    NOT_EQUALS      reduce using rule 88 (postfix_expression -> postfix_expression INCREMENT .)
    LESS_THAN       reduce using rule 88 (postfix_expression -> postfix_expression INCREMENT .)
    GREATER_THAN    reduce using rule 88 (postfix_expression -> postfix_expression INCREMENT .)
    LESS_EQUALS     reduce using rule 88 (postfix_expression -> postfix_expression INCREMENT .)
    GREATER_EQUALS  reduce using rule 88 (postfix_expression -> postfix_expression INCREMENT .)
    SHIFT_LEFT      reduce using rule 88 (postfix_expression -> postfix_expression INCREMENT .)
    SHIFT_RIGHT     reduce using rule 88 (postfix_expression -> postfix_expression INCREMENT .)
    SEMICOLON       reduce using rule 88 (postfix_expression -> postfix_expression INCREMENT .)
    CONDITIONAL_OPERATOR reduce using rule 88 (postfix_expression -> postfix_expression INCREMENT .)
    COMMA           reduce using rule 88 (postfix_expression -> postfix_expression INCREMENT .)
    CLOSE_PAREN     reduce using rule 88 (postfix_expression -> postfix_expression INCREMENT .)
    COLON           reduce using rule 88 (postfix_expression -> postfix_expression INCREMENT .)
    CLOSE_BRACKET   reduce using rule 88 (postfix_expression -> postfix_expression INCREMENT .)


state 86

    (89) postfix_expression -> postfix_expression DECREMENT .

    OPEN_PAREN      reduce using rule 89 (postfix_expression -> postfix_expression DECREMENT .)
    OPEN_BRACKET    reduce using rule 89 (postfix_expression -> postfix_expression DECREMENT .)
    DOT             reduce using rule 89 (postfix_expression -> postfix_expression DECREMENT .)
    ARROW           reduce using rule 89 (postfix_expression -> postfix_expression DECREMENT .)
    INCREMENT       reduce using rule 89 (postfix_expression -> postfix_expression DECREMENT .)
    DECREMENT       reduce using rule 89 (postfix_expression -> postfix_expression DECREMENT .)
    MUL             reduce using rule 89 (postfix_expression -> postfix_expression DECREMENT .)
    DIV             reduce using rule 89 (postfix_expression -> postfix_expression DECREMENT .)
    MOD             reduce using rule 89 (postfix_expression -> postfix_expression DECREMENT .)
    PLUS            reduce using rule 89 (postfix_expression -> postfix_expression DECREMENT .)
    MINUS           reduce using rule 89 (postfix_expression -> postfix_expression DECREMENT .)
    LOGICAL_OR      reduce using rule 89 (postfix_expression -> postfix_expression DECREMENT .)
    LOGICAL_AND     reduce using rule 89 (postfix_expression -> postfix_expression DECREMENT .)
    BITWISE_OR      reduce using rule 89 (postfix_expression -> postfix_expression DECREMENT .)
    BITWISE_XOR     reduce using rule 89 (postfix_expression -> postfix_expression DECREMENT .)
    BITWISE_AND     reduce using rule 89 (postfix_expression -> postfix_expression DECREMENT .)
    EQUALS          reduce using rule 89 (postfix_expression -> postfix_expression DECREMENT .)
    NOT_EQUALS      reduce using rule 89 (postfix_expression -> postfix_expression DECREMENT .)
    LESS_THAN       reduce using rule 89 (postfix_expression -> postfix_expression DECREMENT .)
    GREATER_THAN    reduce using rule 89 (postfix_expression -> postfix_expression DECREMENT .)
    LESS_EQUALS     reduce using rule 89 (postfix_expression -> postfix_expression DECREMENT .)
    GREATER_EQUALS  reduce using rule 89 (postfix_expression -> postfix_expression DECREMENT .)
    SHIFT_LEFT      reduce using rule 89 (postfix_expression -> postfix_expression DECREMENT .)
    SHIFT_RIGHT     reduce using rule 89 (postfix_expression -> postfix_expression DECREMENT .)
    SEMICOLON       reduce using rule 89 (postfix_expression -> postfix_expression DECREMENT .)
    CONDITIONAL_OPERATOR reduce using rule 89 (postfix_expression -> postfix_expression DECREMENT .)
    COMMA           reduce using rule 89 (postfix_expression -> postfix_expression DECREMENT .)
    CLOSE_PAREN     reduce using rule 89 (postfix_expression -> postfix_expression DECREMENT .)
    COLON           reduce using rule 89 (postfix_expression -> postfix_expression DECREMENT .)
    CLOSE_BRACKET   reduce using rule 89 (postfix_expression -> postfix_expression DECREMENT .)


state 87

    (77) unary_expression -> TIMES unary_expression .

    MUL             reduce using rule 77 (unary_expression -> TIMES unary_expression .)
    DIV             reduce using rule 77 (unary_expression -> TIMES unary_expression .)
    MOD             reduce using rule 77 (unary_expression -> TIMES unary_expression .)
    PLUS            reduce using rule 77 (unary_expression -> TIMES unary_expression .)
    MINUS           reduce using rule 77 (unary_expression -> TIMES unary_expression .)
    LOGICAL_OR      reduce using rule 77 (unary_expression -> TIMES unary_expression .)
    LOGICAL_AND     reduce using rule 77 (unary_expression -> TIMES unary_expression .)
    BITWISE_OR      reduce using rule 77 (unary_expression -> TIMES unary_expression .)
    BITWISE_XOR     reduce using rule 77 (unary_expression -> TIMES unary_expression .)
    BITWISE_AND     reduce using rule 77 (unary_expression -> TIMES unary_expression .)
    EQUALS          reduce using rule 77 (unary_expression -> TIMES unary_expression .)
    NOT_EQUALS      reduce using rule 77 (unary_expression -> TIMES unary_expression .)
    LESS_THAN       reduce using rule 77 (unary_expression -> TIMES unary_expression .)
    GREATER_THAN    reduce using rule 77 (unary_expression -> TIMES unary_expression .)
    LESS_EQUALS     reduce using rule 77 (unary_expression -> TIMES unary_expression .)
    GREATER_EQUALS  reduce using rule 77 (unary_expression -> TIMES unary_expression .)
    SHIFT_LEFT      reduce using rule 77 (unary_expression -> TIMES unary_expression .)
    SHIFT_RIGHT     reduce using rule 77 (unary_expression -> TIMES unary_expression .)
    SEMICOLON       reduce using rule 77 (unary_expression -> TIMES unary_expression .)
    CONDITIONAL_OPERATOR reduce using rule 77 (unary_expression -> TIMES unary_expression .)
    COMMA           reduce using rule 77 (unary_expression -> TIMES unary_expression .)
    CLOSE_PAREN     reduce using rule 77 (unary_expression -> TIMES unary_expression .)
    COLON           reduce using rule 77 (unary_expression -> TIMES unary_expression .)
    CLOSE_BRACKET   reduce using rule 77 (unary_expression -> TIMES unary_expression .)


state 88

    (80) unary_expression -> LOGICAL_NOT unary_expression .

    MUL             reduce using rule 80 (unary_expression -> LOGICAL_NOT unary_expression .)
    DIV             reduce using rule 80 (unary_expression -> LOGICAL_NOT unary_expression .)
    MOD             reduce using rule 80 (unary_expression -> LOGICAL_NOT unary_expression .)
    PLUS            reduce using rule 80 (unary_expression -> LOGICAL_NOT unary_expression .)
    MINUS           reduce using rule 80 (unary_expression -> LOGICAL_NOT unary_expression .)
    LOGICAL_OR      reduce using rule 80 (unary_expression -> LOGICAL_NOT unary_expression .)
    LOGICAL_AND     reduce using rule 80 (unary_expression -> LOGICAL_NOT unary_expression .)
    BITWISE_OR      reduce using rule 80 (unary_expression -> LOGICAL_NOT unary_expression .)
    BITWISE_XOR     reduce using rule 80 (unary_expression -> LOGICAL_NOT unary_expression .)
    BITWISE_AND     reduce using rule 80 (unary_expression -> LOGICAL_NOT unary_expression .)
    EQUALS          reduce using rule 80 (unary_expression -> LOGICAL_NOT unary_expression .)
    NOT_EQUALS      reduce using rule 80 (unary_expression -> LOGICAL_NOT unary_expression .)
    LESS_THAN       reduce using rule 80 (unary_expression -> LOGICAL_NOT unary_expression .)
    GREATER_THAN    reduce using rule 80 (unary_expression -> LOGICAL_NOT unary_expression .)
    LESS_EQUALS     reduce using rule 80 (unary_expression -> LOGICAL_NOT unary_expression .)
    GREATER_EQUALS  reduce using rule 80 (unary_expression -> LOGICAL_NOT unary_expression .)
    SHIFT_LEFT      reduce using rule 80 (unary_expression -> LOGICAL_NOT unary_expression .)
    SHIFT_RIGHT     reduce using rule 80 (unary_expression -> LOGICAL_NOT unary_expression .)
    SEMICOLON       reduce using rule 80 (unary_expression -> LOGICAL_NOT unary_expression .)
    CONDITIONAL_OPERATOR reduce using rule 80 (unary_expression -> LOGICAL_NOT unary_expression .)
    COMMA           reduce using rule 80 (unary_expression -> LOGICAL_NOT unary_expression .)
    CLOSE_PAREN     reduce using rule 80 (unary_expression -> LOGICAL_NOT unary_expression .)
    COLON           reduce using rule 80 (unary_expression -> LOGICAL_NOT unary_expression .)
    CLOSE_BRACKET   reduce using rule 80 (unary_expression -> LOGICAL_NOT unary_expression .)


state 89

    (81) unary_expression -> INCREMENT unary_expression .

    MUL             reduce using rule 81 (unary_expression -> INCREMENT unary_expression .)
    DIV             reduce using rule 81 (unary_expression -> INCREMENT unary_expression .)
    MOD             reduce using rule 81 (unary_expression -> INCREMENT unary_expression .)
    PLUS            reduce using rule 81 (unary_expression -> INCREMENT unary_expression .)
    MINUS           reduce using rule 81 (unary_expression -> INCREMENT unary_expression .)
    LOGICAL_OR      reduce using rule 81 (unary_expression -> INCREMENT unary_expression .)
    LOGICAL_AND     reduce using rule 81 (unary_expression -> INCREMENT unary_expression .)
    BITWISE_OR      reduce using rule 81 (unary_expression -> INCREMENT unary_expression .)
    BITWISE_XOR     reduce using rule 81 (unary_expression -> INCREMENT unary_expression .)
    BITWISE_AND     reduce using rule 81 (unary_expression -> INCREMENT unary_expression .)
    EQUALS          reduce using rule 81 (unary_expression -> INCREMENT unary_expression .)
    NOT_EQUALS      reduce using rule 81 (unary_expression -> INCREMENT unary_expression .)
    LESS_THAN       reduce using rule 81 (unary_expression -> INCREMENT unary_expression .)
    GREATER_THAN    reduce using rule 81 (unary_expression -> INCREMENT unary_expression .)
    LESS_EQUALS     reduce using rule 81 (unary_expression -> INCREMENT unary_expression .)
    GREATER_EQUALS  reduce using rule 81 (unary_expression -> INCREMENT unary_expression .)
    SHIFT_LEFT      reduce using rule 81 (unary_expression -> INCREMENT unary_expression .)
    SHIFT_RIGHT     reduce using rule 81 (unary_expression -> INCREMENT unary_expression .)
    SEMICOLON       reduce using rule 81 (unary_expression -> INCREMENT unary_expression .)
    CONDITIONAL_OPERATOR reduce using rule 81 (unary_expression -> INCREMENT unary_expression .)
    COMMA           reduce using rule 81 (unary_expression -> INCREMENT unary_expression .)
    CLOSE_PAREN     reduce using rule 81 (unary_expression -> INCREMENT unary_expression .)
    COLON           reduce using rule 81 (unary_expression -> INCREMENT unary_expression .)
    CLOSE_BRACKET   reduce using rule 81 (unary_expression -> INCREMENT unary_expression .)


state 90

    (82) unary_expression -> DECREMENT unary_expression .

    MUL             reduce using rule 82 (unary_expression -> DECREMENT unary_expression .)
    DIV             reduce using rule 82 (unary_expression -> DECREMENT unary_expression .)
    MOD             reduce using rule 82 (unary_expression -> DECREMENT unary_expression .)
    PLUS            reduce using rule 82 (unary_expression -> DECREMENT unary_expression .)
    MINUS           reduce using rule 82 (unary_expression -> DECREMENT unary_expression .)
    LOGICAL_OR      reduce using rule 82 (unary_expression -> DECREMENT unary_expression .)
    LOGICAL_AND     reduce using rule 82 (unary_expression -> DECREMENT unary_expression .)
    BITWISE_OR      reduce using rule 82 (unary_expression -> DECREMENT unary_expression .)
    BITWISE_XOR     reduce using rule 82 (unary_expression -> DECREMENT unary_expression .)
    BITWISE_AND     reduce using rule 82 (unary_expression -> DECREMENT unary_expression .)
    EQUALS          reduce using rule 82 (unary_expression -> DECREMENT unary_expression .)
    NOT_EQUALS      reduce using rule 82 (unary_expression -> DECREMENT unary_expression .)
    LESS_THAN       reduce using rule 82 (unary_expression -> DECREMENT unary_expression .)
    GREATER_THAN    reduce using rule 82 (unary_expression -> DECREMENT unary_expression .)
    LESS_EQUALS     reduce using rule 82 (unary_expression -> DECREMENT unary_expression .)
    GREATER_EQUALS  reduce using rule 82 (unary_expression -> DECREMENT unary_expression .)
    SHIFT_LEFT      reduce using rule 82 (unary_expression -> DECREMENT unary_expression .)
    SHIFT_RIGHT     reduce using rule 82 (unary_expression -> DECREMENT unary_expression .)
    SEMICOLON       reduce using rule 82 (unary_expression -> DECREMENT unary_expression .)
    CONDITIONAL_OPERATOR reduce using rule 82 (unary_expression -> DECREMENT unary_expression .)
    COMMA           reduce using rule 82 (unary_expression -> DECREMENT unary_expression .)
    CLOSE_PAREN     reduce using rule 82 (unary_expression -> DECREMENT unary_expression .)
    COLON           reduce using rule 82 (unary_expression -> DECREMENT unary_expression .)
    CLOSE_BRACKET   reduce using rule 82 (unary_expression -> DECREMENT unary_expression .)


state 91

    (52) bitwise_or_expression -> bitwise_or_expression BITWISE_OR . bitwise_xor_expression
    (53) bitwise_xor_expression -> . bitwise_and_expression
    (54) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (55) bitwise_and_expression -> . equality_expression
    (56) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (57) equality_expression -> . relational_expression
    (58) equality_expression -> . equality_expression EQUALS relational_expression
    (59) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (60) relational_expression -> . shift_expression
    (61) relational_expression -> . relational_expression LESS_THAN shift_expression
    (62) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (63) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (64) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    bitwise_xor_expression         shift and go to state 131
    bitwise_and_expression         shift and go to state 45
    equality_expression            shift and go to state 46
    relational_expression          shift and go to state 47
    shift_expression               shift and go to state 48
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 29
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 40

state 92

    (94) primary_expression -> OPEN_PAREN expression . CLOSE_PAREN
    (27) expression -> expression . LOGICAL_OR expression
    (28) expression -> expression . LOGICAL_AND expression
    (29) expression -> expression . BITWISE_OR expression
    (30) expression -> expression . BITWISE_XOR expression
    (31) expression -> expression . BITWISE_AND expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . GREATER_THAN expression
    (36) expression -> expression . LESS_EQUALS expression
    (37) expression -> expression . GREATER_EQUALS expression
    (38) expression -> expression . SHIFT_LEFT expression
    (39) expression -> expression . SHIFT_RIGHT expression

    CLOSE_PAREN     shift and go to state 132
    LOGICAL_OR      shift and go to state 54
    LOGICAL_AND     shift and go to state 55
    BITWISE_OR      shift and go to state 56
    BITWISE_XOR     shift and go to state 57
    BITWISE_AND     shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUALS      shift and go to state 60
    LESS_THAN       shift and go to state 61
    GREATER_THAN    shift and go to state 62
    LESS_EQUALS     shift and go to state 63
    GREATER_EQUALS  shift and go to state 64
    SHIFT_LEFT      shift and go to state 65
    SHIFT_RIGHT     shift and go to state 66


state 93

    (54) bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR . bitwise_and_expression
    (55) bitwise_and_expression -> . equality_expression
    (56) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (57) equality_expression -> . relational_expression
    (58) equality_expression -> . equality_expression EQUALS relational_expression
    (59) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (60) relational_expression -> . shift_expression
    (61) relational_expression -> . relational_expression LESS_THAN shift_expression
    (62) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (63) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (64) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    bitwise_and_expression         shift and go to state 133
    equality_expression            shift and go to state 46
    relational_expression          shift and go to state 47
    shift_expression               shift and go to state 48
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 29
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 40

state 94

    (56) bitwise_and_expression -> bitwise_and_expression BITWISE_AND . equality_expression
    (57) equality_expression -> . relational_expression
    (58) equality_expression -> . equality_expression EQUALS relational_expression
    (59) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (60) relational_expression -> . shift_expression
    (61) relational_expression -> . relational_expression LESS_THAN shift_expression
    (62) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (63) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (64) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    equality_expression            shift and go to state 134
    relational_expression          shift and go to state 47
    shift_expression               shift and go to state 48
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 29
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 40

state 95

    (58) equality_expression -> equality_expression EQUALS . relational_expression
    (60) relational_expression -> . shift_expression
    (61) relational_expression -> . relational_expression LESS_THAN shift_expression
    (62) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (63) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (64) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    relational_expression          shift and go to state 135
    shift_expression               shift and go to state 48
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 29
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 40

state 96

    (59) equality_expression -> equality_expression NOT_EQUALS . relational_expression
    (60) relational_expression -> . shift_expression
    (61) relational_expression -> . relational_expression LESS_THAN shift_expression
    (62) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (63) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (64) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    relational_expression          shift and go to state 136
    shift_expression               shift and go to state 48
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 29
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 40

state 97

    (61) relational_expression -> relational_expression LESS_THAN . shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    shift_expression               shift and go to state 137
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 29
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 40

state 98

    (62) relational_expression -> relational_expression GREATER_THAN . shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    shift_expression               shift and go to state 138
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 29
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 40

state 99

    (63) relational_expression -> relational_expression LESS_EQUALS . shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    shift_expression               shift and go to state 139
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 29
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 40

state 100

    (64) relational_expression -> relational_expression GREATER_EQUALS . shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    shift_expression               shift and go to state 140
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 29
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 40

state 101

    (66) shift_expression -> shift_expression SHIFT_LEFT . additive_expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    additive_expression            shift and go to state 141
    multiplicative_expression      shift and go to state 29
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 40

state 102

    (67) shift_expression -> shift_expression SHIFT_RIGHT . additive_expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    additive_expression            shift and go to state 142
    multiplicative_expression      shift and go to state 29
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 40

state 103

    (17) declaration_without_type -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET .
    (18) declaration_without_type -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET . ASSIGN expression
    (20) declaration_without_type -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET . ASSIGN float_constant

    SEMICOLON       reduce using rule 17 (declaration_without_type -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET .)
    ASSIGN          shift and go to state 143


state 104

    (10) declaration_item -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET .
    (12) declaration_item -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET . ASSIGN expression
    (14) declaration_item -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET . ASSIGN float_constant

    SEMICOLON       reduce using rule 10 (declaration_item -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET .)
    COMMA           reduce using rule 10 (declaration_item -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET .)
    ASSIGN          shift and go to state 144


state 105

    (27) expression -> expression LOGICAL_OR expression .
    (27) expression -> expression . LOGICAL_OR expression
    (28) expression -> expression . LOGICAL_AND expression
    (29) expression -> expression . BITWISE_OR expression
    (30) expression -> expression . BITWISE_XOR expression
    (31) expression -> expression . BITWISE_AND expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . GREATER_THAN expression
    (36) expression -> expression . LESS_EQUALS expression
    (37) expression -> expression . GREATER_EQUALS expression
    (38) expression -> expression . SHIFT_LEFT expression
    (39) expression -> expression . SHIFT_RIGHT expression

  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for BITWISE_OR resolved as shift
  ! shift/reduce conflict for BITWISE_XOR resolved as shift
  ! shift/reduce conflict for BITWISE_AND resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS resolved as shift
  ! shift/reduce conflict for SHIFT_LEFT resolved as shift
  ! shift/reduce conflict for SHIFT_RIGHT resolved as shift
    SEMICOLON       reduce using rule 27 (expression -> expression LOGICAL_OR expression .)
    COMMA           reduce using rule 27 (expression -> expression LOGICAL_OR expression .)
    CLOSE_PAREN     reduce using rule 27 (expression -> expression LOGICAL_OR expression .)
    COLON           reduce using rule 27 (expression -> expression LOGICAL_OR expression .)
    CLOSE_BRACKET   reduce using rule 27 (expression -> expression LOGICAL_OR expression .)
    LOGICAL_OR      shift and go to state 54
    LOGICAL_AND     shift and go to state 55
    BITWISE_OR      shift and go to state 56
    BITWISE_XOR     shift and go to state 57
    BITWISE_AND     shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUALS      shift and go to state 60
    LESS_THAN       shift and go to state 61
    GREATER_THAN    shift and go to state 62
    LESS_EQUALS     shift and go to state 63
    GREATER_EQUALS  shift and go to state 64
    SHIFT_LEFT      shift and go to state 65
    SHIFT_RIGHT     shift and go to state 66

  ! LOGICAL_OR      [ reduce using rule 27 (expression -> expression LOGICAL_OR expression .) ]
  ! LOGICAL_AND     [ reduce using rule 27 (expression -> expression LOGICAL_OR expression .) ]
  ! BITWISE_OR      [ reduce using rule 27 (expression -> expression LOGICAL_OR expression .) ]
  ! BITWISE_XOR     [ reduce using rule 27 (expression -> expression LOGICAL_OR expression .) ]
  ! BITWISE_AND     [ reduce using rule 27 (expression -> expression LOGICAL_OR expression .) ]
  ! EQUALS          [ reduce using rule 27 (expression -> expression LOGICAL_OR expression .) ]
  ! NOT_EQUALS      [ reduce using rule 27 (expression -> expression LOGICAL_OR expression .) ]
  ! LESS_THAN       [ reduce using rule 27 (expression -> expression LOGICAL_OR expression .) ]
  ! GREATER_THAN    [ reduce using rule 27 (expression -> expression LOGICAL_OR expression .) ]
  ! LESS_EQUALS     [ reduce using rule 27 (expression -> expression LOGICAL_OR expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 27 (expression -> expression LOGICAL_OR expression .) ]
  ! SHIFT_LEFT      [ reduce using rule 27 (expression -> expression LOGICAL_OR expression .) ]
  ! SHIFT_RIGHT     [ reduce using rule 27 (expression -> expression LOGICAL_OR expression .) ]


state 106

    (28) expression -> expression LOGICAL_AND expression .
    (27) expression -> expression . LOGICAL_OR expression
    (28) expression -> expression . LOGICAL_AND expression
    (29) expression -> expression . BITWISE_OR expression
    (30) expression -> expression . BITWISE_XOR expression
    (31) expression -> expression . BITWISE_AND expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . GREATER_THAN expression
    (36) expression -> expression . LESS_EQUALS expression
    (37) expression -> expression . GREATER_EQUALS expression
    (38) expression -> expression . SHIFT_LEFT expression
    (39) expression -> expression . SHIFT_RIGHT expression

  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for BITWISE_OR resolved as shift
  ! shift/reduce conflict for BITWISE_XOR resolved as shift
  ! shift/reduce conflict for BITWISE_AND resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS resolved as shift
  ! shift/reduce conflict for SHIFT_LEFT resolved as shift
  ! shift/reduce conflict for SHIFT_RIGHT resolved as shift
    SEMICOLON       reduce using rule 28 (expression -> expression LOGICAL_AND expression .)
    COMMA           reduce using rule 28 (expression -> expression LOGICAL_AND expression .)
    CLOSE_PAREN     reduce using rule 28 (expression -> expression LOGICAL_AND expression .)
    COLON           reduce using rule 28 (expression -> expression LOGICAL_AND expression .)
    CLOSE_BRACKET   reduce using rule 28 (expression -> expression LOGICAL_AND expression .)
    LOGICAL_OR      shift and go to state 54
    LOGICAL_AND     shift and go to state 55
    BITWISE_OR      shift and go to state 56
    BITWISE_XOR     shift and go to state 57
    BITWISE_AND     shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUALS      shift and go to state 60
    LESS_THAN       shift and go to state 61
    GREATER_THAN    shift and go to state 62
    LESS_EQUALS     shift and go to state 63
    GREATER_EQUALS  shift and go to state 64
    SHIFT_LEFT      shift and go to state 65
    SHIFT_RIGHT     shift and go to state 66

  ! LOGICAL_OR      [ reduce using rule 28 (expression -> expression LOGICAL_AND expression .) ]
  ! LOGICAL_AND     [ reduce using rule 28 (expression -> expression LOGICAL_AND expression .) ]
  ! BITWISE_OR      [ reduce using rule 28 (expression -> expression LOGICAL_AND expression .) ]
  ! BITWISE_XOR     [ reduce using rule 28 (expression -> expression LOGICAL_AND expression .) ]
  ! BITWISE_AND     [ reduce using rule 28 (expression -> expression LOGICAL_AND expression .) ]
  ! EQUALS          [ reduce using rule 28 (expression -> expression LOGICAL_AND expression .) ]
  ! NOT_EQUALS      [ reduce using rule 28 (expression -> expression LOGICAL_AND expression .) ]
  ! LESS_THAN       [ reduce using rule 28 (expression -> expression LOGICAL_AND expression .) ]
  ! GREATER_THAN    [ reduce using rule 28 (expression -> expression LOGICAL_AND expression .) ]
  ! LESS_EQUALS     [ reduce using rule 28 (expression -> expression LOGICAL_AND expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 28 (expression -> expression LOGICAL_AND expression .) ]
  ! SHIFT_LEFT      [ reduce using rule 28 (expression -> expression LOGICAL_AND expression .) ]
  ! SHIFT_RIGHT     [ reduce using rule 28 (expression -> expression LOGICAL_AND expression .) ]


state 107

    (29) expression -> expression BITWISE_OR expression .
    (27) expression -> expression . LOGICAL_OR expression
    (28) expression -> expression . LOGICAL_AND expression
    (29) expression -> expression . BITWISE_OR expression
    (30) expression -> expression . BITWISE_XOR expression
    (31) expression -> expression . BITWISE_AND expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . GREATER_THAN expression
    (36) expression -> expression . LESS_EQUALS expression
    (37) expression -> expression . GREATER_EQUALS expression
    (38) expression -> expression . SHIFT_LEFT expression
    (39) expression -> expression . SHIFT_RIGHT expression

  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for BITWISE_OR resolved as shift
  ! shift/reduce conflict for BITWISE_XOR resolved as shift
  ! shift/reduce conflict for BITWISE_AND resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS resolved as shift
  ! shift/reduce conflict for SHIFT_LEFT resolved as shift
  ! shift/reduce conflict for SHIFT_RIGHT resolved as shift
    SEMICOLON       reduce using rule 29 (expression -> expression BITWISE_OR expression .)
    COMMA           reduce using rule 29 (expression -> expression BITWISE_OR expression .)
    CLOSE_PAREN     reduce using rule 29 (expression -> expression BITWISE_OR expression .)
    COLON           reduce using rule 29 (expression -> expression BITWISE_OR expression .)
    CLOSE_BRACKET   reduce using rule 29 (expression -> expression BITWISE_OR expression .)
    LOGICAL_OR      shift and go to state 54
    LOGICAL_AND     shift and go to state 55
    BITWISE_OR      shift and go to state 56
    BITWISE_XOR     shift and go to state 57
    BITWISE_AND     shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUALS      shift and go to state 60
    LESS_THAN       shift and go to state 61
    GREATER_THAN    shift and go to state 62
    LESS_EQUALS     shift and go to state 63
    GREATER_EQUALS  shift and go to state 64
    SHIFT_LEFT      shift and go to state 65
    SHIFT_RIGHT     shift and go to state 66

  ! LOGICAL_OR      [ reduce using rule 29 (expression -> expression BITWISE_OR expression .) ]
  ! LOGICAL_AND     [ reduce using rule 29 (expression -> expression BITWISE_OR expression .) ]
  ! BITWISE_OR      [ reduce using rule 29 (expression -> expression BITWISE_OR expression .) ]
  ! BITWISE_XOR     [ reduce using rule 29 (expression -> expression BITWISE_OR expression .) ]
  ! BITWISE_AND     [ reduce using rule 29 (expression -> expression BITWISE_OR expression .) ]
  ! EQUALS          [ reduce using rule 29 (expression -> expression BITWISE_OR expression .) ]
  ! NOT_EQUALS      [ reduce using rule 29 (expression -> expression BITWISE_OR expression .) ]
  ! LESS_THAN       [ reduce using rule 29 (expression -> expression BITWISE_OR expression .) ]
  ! GREATER_THAN    [ reduce using rule 29 (expression -> expression BITWISE_OR expression .) ]
  ! LESS_EQUALS     [ reduce using rule 29 (expression -> expression BITWISE_OR expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 29 (expression -> expression BITWISE_OR expression .) ]
  ! SHIFT_LEFT      [ reduce using rule 29 (expression -> expression BITWISE_OR expression .) ]
  ! SHIFT_RIGHT     [ reduce using rule 29 (expression -> expression BITWISE_OR expression .) ]


state 108

    (30) expression -> expression BITWISE_XOR expression .
    (27) expression -> expression . LOGICAL_OR expression
    (28) expression -> expression . LOGICAL_AND expression
    (29) expression -> expression . BITWISE_OR expression
    (30) expression -> expression . BITWISE_XOR expression
    (31) expression -> expression . BITWISE_AND expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . GREATER_THAN expression
    (36) expression -> expression . LESS_EQUALS expression
    (37) expression -> expression . GREATER_EQUALS expression
    (38) expression -> expression . SHIFT_LEFT expression
    (39) expression -> expression . SHIFT_RIGHT expression

  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for BITWISE_OR resolved as shift
  ! shift/reduce conflict for BITWISE_XOR resolved as shift
  ! shift/reduce conflict for BITWISE_AND resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS resolved as shift
  ! shift/reduce conflict for SHIFT_LEFT resolved as shift
  ! shift/reduce conflict for SHIFT_RIGHT resolved as shift
    SEMICOLON       reduce using rule 30 (expression -> expression BITWISE_XOR expression .)
    COMMA           reduce using rule 30 (expression -> expression BITWISE_XOR expression .)
    CLOSE_PAREN     reduce using rule 30 (expression -> expression BITWISE_XOR expression .)
    COLON           reduce using rule 30 (expression -> expression BITWISE_XOR expression .)
    CLOSE_BRACKET   reduce using rule 30 (expression -> expression BITWISE_XOR expression .)
    LOGICAL_OR      shift and go to state 54
    LOGICAL_AND     shift and go to state 55
    BITWISE_OR      shift and go to state 56
    BITWISE_XOR     shift and go to state 57
    BITWISE_AND     shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUALS      shift and go to state 60
    LESS_THAN       shift and go to state 61
    GREATER_THAN    shift and go to state 62
    LESS_EQUALS     shift and go to state 63
    GREATER_EQUALS  shift and go to state 64
    SHIFT_LEFT      shift and go to state 65
    SHIFT_RIGHT     shift and go to state 66

  ! LOGICAL_OR      [ reduce using rule 30 (expression -> expression BITWISE_XOR expression .) ]
  ! LOGICAL_AND     [ reduce using rule 30 (expression -> expression BITWISE_XOR expression .) ]
  ! BITWISE_OR      [ reduce using rule 30 (expression -> expression BITWISE_XOR expression .) ]
  ! BITWISE_XOR     [ reduce using rule 30 (expression -> expression BITWISE_XOR expression .) ]
  ! BITWISE_AND     [ reduce using rule 30 (expression -> expression BITWISE_XOR expression .) ]
  ! EQUALS          [ reduce using rule 30 (expression -> expression BITWISE_XOR expression .) ]
  ! NOT_EQUALS      [ reduce using rule 30 (expression -> expression BITWISE_XOR expression .) ]
  ! LESS_THAN       [ reduce using rule 30 (expression -> expression BITWISE_XOR expression .) ]
  ! GREATER_THAN    [ reduce using rule 30 (expression -> expression BITWISE_XOR expression .) ]
  ! LESS_EQUALS     [ reduce using rule 30 (expression -> expression BITWISE_XOR expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 30 (expression -> expression BITWISE_XOR expression .) ]
  ! SHIFT_LEFT      [ reduce using rule 30 (expression -> expression BITWISE_XOR expression .) ]
  ! SHIFT_RIGHT     [ reduce using rule 30 (expression -> expression BITWISE_XOR expression .) ]


state 109

    (31) expression -> expression BITWISE_AND expression .
    (27) expression -> expression . LOGICAL_OR expression
    (28) expression -> expression . LOGICAL_AND expression
    (29) expression -> expression . BITWISE_OR expression
    (30) expression -> expression . BITWISE_XOR expression
    (31) expression -> expression . BITWISE_AND expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . GREATER_THAN expression
    (36) expression -> expression . LESS_EQUALS expression
    (37) expression -> expression . GREATER_EQUALS expression
    (38) expression -> expression . SHIFT_LEFT expression
    (39) expression -> expression . SHIFT_RIGHT expression

  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for BITWISE_OR resolved as shift
  ! shift/reduce conflict for BITWISE_XOR resolved as shift
  ! shift/reduce conflict for BITWISE_AND resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS resolved as shift
  ! shift/reduce conflict for SHIFT_LEFT resolved as shift
  ! shift/reduce conflict for SHIFT_RIGHT resolved as shift
    SEMICOLON       reduce using rule 31 (expression -> expression BITWISE_AND expression .)
    COMMA           reduce using rule 31 (expression -> expression BITWISE_AND expression .)
    CLOSE_PAREN     reduce using rule 31 (expression -> expression BITWISE_AND expression .)
    COLON           reduce using rule 31 (expression -> expression BITWISE_AND expression .)
    CLOSE_BRACKET   reduce using rule 31 (expression -> expression BITWISE_AND expression .)
    LOGICAL_OR      shift and go to state 54
    LOGICAL_AND     shift and go to state 55
    BITWISE_OR      shift and go to state 56
    BITWISE_XOR     shift and go to state 57
    BITWISE_AND     shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUALS      shift and go to state 60
    LESS_THAN       shift and go to state 61
    GREATER_THAN    shift and go to state 62
    LESS_EQUALS     shift and go to state 63
    GREATER_EQUALS  shift and go to state 64
    SHIFT_LEFT      shift and go to state 65
    SHIFT_RIGHT     shift and go to state 66

  ! LOGICAL_OR      [ reduce using rule 31 (expression -> expression BITWISE_AND expression .) ]
  ! LOGICAL_AND     [ reduce using rule 31 (expression -> expression BITWISE_AND expression .) ]
  ! BITWISE_OR      [ reduce using rule 31 (expression -> expression BITWISE_AND expression .) ]
  ! BITWISE_XOR     [ reduce using rule 31 (expression -> expression BITWISE_AND expression .) ]
  ! BITWISE_AND     [ reduce using rule 31 (expression -> expression BITWISE_AND expression .) ]
  ! EQUALS          [ reduce using rule 31 (expression -> expression BITWISE_AND expression .) ]
  ! NOT_EQUALS      [ reduce using rule 31 (expression -> expression BITWISE_AND expression .) ]
  ! LESS_THAN       [ reduce using rule 31 (expression -> expression BITWISE_AND expression .) ]
  ! GREATER_THAN    [ reduce using rule 31 (expression -> expression BITWISE_AND expression .) ]
  ! LESS_EQUALS     [ reduce using rule 31 (expression -> expression BITWISE_AND expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 31 (expression -> expression BITWISE_AND expression .) ]
  ! SHIFT_LEFT      [ reduce using rule 31 (expression -> expression BITWISE_AND expression .) ]
  ! SHIFT_RIGHT     [ reduce using rule 31 (expression -> expression BITWISE_AND expression .) ]


state 110

    (32) expression -> expression EQUALS expression .
    (27) expression -> expression . LOGICAL_OR expression
    (28) expression -> expression . LOGICAL_AND expression
    (29) expression -> expression . BITWISE_OR expression
    (30) expression -> expression . BITWISE_XOR expression
    (31) expression -> expression . BITWISE_AND expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . GREATER_THAN expression
    (36) expression -> expression . LESS_EQUALS expression
    (37) expression -> expression . GREATER_EQUALS expression
    (38) expression -> expression . SHIFT_LEFT expression
    (39) expression -> expression . SHIFT_RIGHT expression

  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for BITWISE_OR resolved as shift
  ! shift/reduce conflict for BITWISE_XOR resolved as shift
  ! shift/reduce conflict for BITWISE_AND resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS resolved as shift
  ! shift/reduce conflict for SHIFT_LEFT resolved as shift
  ! shift/reduce conflict for SHIFT_RIGHT resolved as shift
    SEMICOLON       reduce using rule 32 (expression -> expression EQUALS expression .)
    COMMA           reduce using rule 32 (expression -> expression EQUALS expression .)
    CLOSE_PAREN     reduce using rule 32 (expression -> expression EQUALS expression .)
    COLON           reduce using rule 32 (expression -> expression EQUALS expression .)
    CLOSE_BRACKET   reduce using rule 32 (expression -> expression EQUALS expression .)
    LOGICAL_OR      shift and go to state 54
    LOGICAL_AND     shift and go to state 55
    BITWISE_OR      shift and go to state 56
    BITWISE_XOR     shift and go to state 57
    BITWISE_AND     shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUALS      shift and go to state 60
    LESS_THAN       shift and go to state 61
    GREATER_THAN    shift and go to state 62
    LESS_EQUALS     shift and go to state 63
    GREATER_EQUALS  shift and go to state 64
    SHIFT_LEFT      shift and go to state 65
    SHIFT_RIGHT     shift and go to state 66

  ! LOGICAL_OR      [ reduce using rule 32 (expression -> expression EQUALS expression .) ]
  ! LOGICAL_AND     [ reduce using rule 32 (expression -> expression EQUALS expression .) ]
  ! BITWISE_OR      [ reduce using rule 32 (expression -> expression EQUALS expression .) ]
  ! BITWISE_XOR     [ reduce using rule 32 (expression -> expression EQUALS expression .) ]
  ! BITWISE_AND     [ reduce using rule 32 (expression -> expression EQUALS expression .) ]
  ! EQUALS          [ reduce using rule 32 (expression -> expression EQUALS expression .) ]
  ! NOT_EQUALS      [ reduce using rule 32 (expression -> expression EQUALS expression .) ]
  ! LESS_THAN       [ reduce using rule 32 (expression -> expression EQUALS expression .) ]
  ! GREATER_THAN    [ reduce using rule 32 (expression -> expression EQUALS expression .) ]
  ! LESS_EQUALS     [ reduce using rule 32 (expression -> expression EQUALS expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 32 (expression -> expression EQUALS expression .) ]
  ! SHIFT_LEFT      [ reduce using rule 32 (expression -> expression EQUALS expression .) ]
  ! SHIFT_RIGHT     [ reduce using rule 32 (expression -> expression EQUALS expression .) ]


state 111

    (33) expression -> expression NOT_EQUALS expression .
    (27) expression -> expression . LOGICAL_OR expression
    (28) expression -> expression . LOGICAL_AND expression
    (29) expression -> expression . BITWISE_OR expression
    (30) expression -> expression . BITWISE_XOR expression
    (31) expression -> expression . BITWISE_AND expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . GREATER_THAN expression
    (36) expression -> expression . LESS_EQUALS expression
    (37) expression -> expression . GREATER_EQUALS expression
    (38) expression -> expression . SHIFT_LEFT expression
    (39) expression -> expression . SHIFT_RIGHT expression

  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for BITWISE_OR resolved as shift
  ! shift/reduce conflict for BITWISE_XOR resolved as shift
  ! shift/reduce conflict for BITWISE_AND resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS resolved as shift
  ! shift/reduce conflict for SHIFT_LEFT resolved as shift
  ! shift/reduce conflict for SHIFT_RIGHT resolved as shift
    SEMICOLON       reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    COMMA           reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    CLOSE_PAREN     reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    COLON           reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    CLOSE_BRACKET   reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    LOGICAL_OR      shift and go to state 54
    LOGICAL_AND     shift and go to state 55
    BITWISE_OR      shift and go to state 56
    BITWISE_XOR     shift and go to state 57
    BITWISE_AND     shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUALS      shift and go to state 60
    LESS_THAN       shift and go to state 61
    GREATER_THAN    shift and go to state 62
    LESS_EQUALS     shift and go to state 63
    GREATER_EQUALS  shift and go to state 64
    SHIFT_LEFT      shift and go to state 65
    SHIFT_RIGHT     shift and go to state 66

  ! LOGICAL_OR      [ reduce using rule 33 (expression -> expression NOT_EQUALS expression .) ]
  ! LOGICAL_AND     [ reduce using rule 33 (expression -> expression NOT_EQUALS expression .) ]
  ! BITWISE_OR      [ reduce using rule 33 (expression -> expression NOT_EQUALS expression .) ]
  ! BITWISE_XOR     [ reduce using rule 33 (expression -> expression NOT_EQUALS expression .) ]
  ! BITWISE_AND     [ reduce using rule 33 (expression -> expression NOT_EQUALS expression .) ]
  ! EQUALS          [ reduce using rule 33 (expression -> expression NOT_EQUALS expression .) ]
  ! NOT_EQUALS      [ reduce using rule 33 (expression -> expression NOT_EQUALS expression .) ]
  ! LESS_THAN       [ reduce using rule 33 (expression -> expression NOT_EQUALS expression .) ]
  ! GREATER_THAN    [ reduce using rule 33 (expression -> expression NOT_EQUALS expression .) ]
  ! LESS_EQUALS     [ reduce using rule 33 (expression -> expression NOT_EQUALS expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 33 (expression -> expression NOT_EQUALS expression .) ]
  ! SHIFT_LEFT      [ reduce using rule 33 (expression -> expression NOT_EQUALS expression .) ]
  ! SHIFT_RIGHT     [ reduce using rule 33 (expression -> expression NOT_EQUALS expression .) ]


state 112

    (34) expression -> expression LESS_THAN expression .
    (27) expression -> expression . LOGICAL_OR expression
    (28) expression -> expression . LOGICAL_AND expression
    (29) expression -> expression . BITWISE_OR expression
    (30) expression -> expression . BITWISE_XOR expression
    (31) expression -> expression . BITWISE_AND expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . GREATER_THAN expression
    (36) expression -> expression . LESS_EQUALS expression
    (37) expression -> expression . GREATER_EQUALS expression
    (38) expression -> expression . SHIFT_LEFT expression
    (39) expression -> expression . SHIFT_RIGHT expression

  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for BITWISE_OR resolved as shift
  ! shift/reduce conflict for BITWISE_XOR resolved as shift
  ! shift/reduce conflict for BITWISE_AND resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS resolved as shift
  ! shift/reduce conflict for SHIFT_LEFT resolved as shift
  ! shift/reduce conflict for SHIFT_RIGHT resolved as shift
    SEMICOLON       reduce using rule 34 (expression -> expression LESS_THAN expression .)
    COMMA           reduce using rule 34 (expression -> expression LESS_THAN expression .)
    CLOSE_PAREN     reduce using rule 34 (expression -> expression LESS_THAN expression .)
    COLON           reduce using rule 34 (expression -> expression LESS_THAN expression .)
    CLOSE_BRACKET   reduce using rule 34 (expression -> expression LESS_THAN expression .)
    LOGICAL_OR      shift and go to state 54
    LOGICAL_AND     shift and go to state 55
    BITWISE_OR      shift and go to state 56
    BITWISE_XOR     shift and go to state 57
    BITWISE_AND     shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUALS      shift and go to state 60
    LESS_THAN       shift and go to state 61
    GREATER_THAN    shift and go to state 62
    LESS_EQUALS     shift and go to state 63
    GREATER_EQUALS  shift and go to state 64
    SHIFT_LEFT      shift and go to state 65
    SHIFT_RIGHT     shift and go to state 66

  ! LOGICAL_OR      [ reduce using rule 34 (expression -> expression LESS_THAN expression .) ]
  ! LOGICAL_AND     [ reduce using rule 34 (expression -> expression LESS_THAN expression .) ]
  ! BITWISE_OR      [ reduce using rule 34 (expression -> expression LESS_THAN expression .) ]
  ! BITWISE_XOR     [ reduce using rule 34 (expression -> expression LESS_THAN expression .) ]
  ! BITWISE_AND     [ reduce using rule 34 (expression -> expression LESS_THAN expression .) ]
  ! EQUALS          [ reduce using rule 34 (expression -> expression LESS_THAN expression .) ]
  ! NOT_EQUALS      [ reduce using rule 34 (expression -> expression LESS_THAN expression .) ]
  ! LESS_THAN       [ reduce using rule 34 (expression -> expression LESS_THAN expression .) ]
  ! GREATER_THAN    [ reduce using rule 34 (expression -> expression LESS_THAN expression .) ]
  ! LESS_EQUALS     [ reduce using rule 34 (expression -> expression LESS_THAN expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 34 (expression -> expression LESS_THAN expression .) ]
  ! SHIFT_LEFT      [ reduce using rule 34 (expression -> expression LESS_THAN expression .) ]
  ! SHIFT_RIGHT     [ reduce using rule 34 (expression -> expression LESS_THAN expression .) ]


state 113

    (35) expression -> expression GREATER_THAN expression .
    (27) expression -> expression . LOGICAL_OR expression
    (28) expression -> expression . LOGICAL_AND expression
    (29) expression -> expression . BITWISE_OR expression
    (30) expression -> expression . BITWISE_XOR expression
    (31) expression -> expression . BITWISE_AND expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . GREATER_THAN expression
    (36) expression -> expression . LESS_EQUALS expression
    (37) expression -> expression . GREATER_EQUALS expression
    (38) expression -> expression . SHIFT_LEFT expression
    (39) expression -> expression . SHIFT_RIGHT expression

  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for BITWISE_OR resolved as shift
  ! shift/reduce conflict for BITWISE_XOR resolved as shift
  ! shift/reduce conflict for BITWISE_AND resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS resolved as shift
  ! shift/reduce conflict for SHIFT_LEFT resolved as shift
  ! shift/reduce conflict for SHIFT_RIGHT resolved as shift
    SEMICOLON       reduce using rule 35 (expression -> expression GREATER_THAN expression .)
    COMMA           reduce using rule 35 (expression -> expression GREATER_THAN expression .)
    CLOSE_PAREN     reduce using rule 35 (expression -> expression GREATER_THAN expression .)
    COLON           reduce using rule 35 (expression -> expression GREATER_THAN expression .)
    CLOSE_BRACKET   reduce using rule 35 (expression -> expression GREATER_THAN expression .)
    LOGICAL_OR      shift and go to state 54
    LOGICAL_AND     shift and go to state 55
    BITWISE_OR      shift and go to state 56
    BITWISE_XOR     shift and go to state 57
    BITWISE_AND     shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUALS      shift and go to state 60
    LESS_THAN       shift and go to state 61
    GREATER_THAN    shift and go to state 62
    LESS_EQUALS     shift and go to state 63
    GREATER_EQUALS  shift and go to state 64
    SHIFT_LEFT      shift and go to state 65
    SHIFT_RIGHT     shift and go to state 66

  ! LOGICAL_OR      [ reduce using rule 35 (expression -> expression GREATER_THAN expression .) ]
  ! LOGICAL_AND     [ reduce using rule 35 (expression -> expression GREATER_THAN expression .) ]
  ! BITWISE_OR      [ reduce using rule 35 (expression -> expression GREATER_THAN expression .) ]
  ! BITWISE_XOR     [ reduce using rule 35 (expression -> expression GREATER_THAN expression .) ]
  ! BITWISE_AND     [ reduce using rule 35 (expression -> expression GREATER_THAN expression .) ]
  ! EQUALS          [ reduce using rule 35 (expression -> expression GREATER_THAN expression .) ]
  ! NOT_EQUALS      [ reduce using rule 35 (expression -> expression GREATER_THAN expression .) ]
  ! LESS_THAN       [ reduce using rule 35 (expression -> expression GREATER_THAN expression .) ]
  ! GREATER_THAN    [ reduce using rule 35 (expression -> expression GREATER_THAN expression .) ]
  ! LESS_EQUALS     [ reduce using rule 35 (expression -> expression GREATER_THAN expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 35 (expression -> expression GREATER_THAN expression .) ]
  ! SHIFT_LEFT      [ reduce using rule 35 (expression -> expression GREATER_THAN expression .) ]
  ! SHIFT_RIGHT     [ reduce using rule 35 (expression -> expression GREATER_THAN expression .) ]


state 114

    (36) expression -> expression LESS_EQUALS expression .
    (27) expression -> expression . LOGICAL_OR expression
    (28) expression -> expression . LOGICAL_AND expression
    (29) expression -> expression . BITWISE_OR expression
    (30) expression -> expression . BITWISE_XOR expression
    (31) expression -> expression . BITWISE_AND expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . GREATER_THAN expression
    (36) expression -> expression . LESS_EQUALS expression
    (37) expression -> expression . GREATER_EQUALS expression
    (38) expression -> expression . SHIFT_LEFT expression
    (39) expression -> expression . SHIFT_RIGHT expression

  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for BITWISE_OR resolved as shift
  ! shift/reduce conflict for BITWISE_XOR resolved as shift
  ! shift/reduce conflict for BITWISE_AND resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS resolved as shift
  ! shift/reduce conflict for SHIFT_LEFT resolved as shift
  ! shift/reduce conflict for SHIFT_RIGHT resolved as shift
    SEMICOLON       reduce using rule 36 (expression -> expression LESS_EQUALS expression .)
    COMMA           reduce using rule 36 (expression -> expression LESS_EQUALS expression .)
    CLOSE_PAREN     reduce using rule 36 (expression -> expression LESS_EQUALS expression .)
    COLON           reduce using rule 36 (expression -> expression LESS_EQUALS expression .)
    CLOSE_BRACKET   reduce using rule 36 (expression -> expression LESS_EQUALS expression .)
    LOGICAL_OR      shift and go to state 54
    LOGICAL_AND     shift and go to state 55
    BITWISE_OR      shift and go to state 56
    BITWISE_XOR     shift and go to state 57
    BITWISE_AND     shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUALS      shift and go to state 60
    LESS_THAN       shift and go to state 61
    GREATER_THAN    shift and go to state 62
    LESS_EQUALS     shift and go to state 63
    GREATER_EQUALS  shift and go to state 64
    SHIFT_LEFT      shift and go to state 65
    SHIFT_RIGHT     shift and go to state 66

  ! LOGICAL_OR      [ reduce using rule 36 (expression -> expression LESS_EQUALS expression .) ]
  ! LOGICAL_AND     [ reduce using rule 36 (expression -> expression LESS_EQUALS expression .) ]
  ! BITWISE_OR      [ reduce using rule 36 (expression -> expression LESS_EQUALS expression .) ]
  ! BITWISE_XOR     [ reduce using rule 36 (expression -> expression LESS_EQUALS expression .) ]
  ! BITWISE_AND     [ reduce using rule 36 (expression -> expression LESS_EQUALS expression .) ]
  ! EQUALS          [ reduce using rule 36 (expression -> expression LESS_EQUALS expression .) ]
  ! NOT_EQUALS      [ reduce using rule 36 (expression -> expression LESS_EQUALS expression .) ]
  ! LESS_THAN       [ reduce using rule 36 (expression -> expression LESS_EQUALS expression .) ]
  ! GREATER_THAN    [ reduce using rule 36 (expression -> expression LESS_EQUALS expression .) ]
  ! LESS_EQUALS     [ reduce using rule 36 (expression -> expression LESS_EQUALS expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 36 (expression -> expression LESS_EQUALS expression .) ]
  ! SHIFT_LEFT      [ reduce using rule 36 (expression -> expression LESS_EQUALS expression .) ]
  ! SHIFT_RIGHT     [ reduce using rule 36 (expression -> expression LESS_EQUALS expression .) ]


state 115

    (37) expression -> expression GREATER_EQUALS expression .
    (27) expression -> expression . LOGICAL_OR expression
    (28) expression -> expression . LOGICAL_AND expression
    (29) expression -> expression . BITWISE_OR expression
    (30) expression -> expression . BITWISE_XOR expression
    (31) expression -> expression . BITWISE_AND expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . GREATER_THAN expression
    (36) expression -> expression . LESS_EQUALS expression
    (37) expression -> expression . GREATER_EQUALS expression
    (38) expression -> expression . SHIFT_LEFT expression
    (39) expression -> expression . SHIFT_RIGHT expression

  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for BITWISE_OR resolved as shift
  ! shift/reduce conflict for BITWISE_XOR resolved as shift
  ! shift/reduce conflict for BITWISE_AND resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS resolved as shift
  ! shift/reduce conflict for SHIFT_LEFT resolved as shift
  ! shift/reduce conflict for SHIFT_RIGHT resolved as shift
    SEMICOLON       reduce using rule 37 (expression -> expression GREATER_EQUALS expression .)
    COMMA           reduce using rule 37 (expression -> expression GREATER_EQUALS expression .)
    CLOSE_PAREN     reduce using rule 37 (expression -> expression GREATER_EQUALS expression .)
    COLON           reduce using rule 37 (expression -> expression GREATER_EQUALS expression .)
    CLOSE_BRACKET   reduce using rule 37 (expression -> expression GREATER_EQUALS expression .)
    LOGICAL_OR      shift and go to state 54
    LOGICAL_AND     shift and go to state 55
    BITWISE_OR      shift and go to state 56
    BITWISE_XOR     shift and go to state 57
    BITWISE_AND     shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUALS      shift and go to state 60
    LESS_THAN       shift and go to state 61
    GREATER_THAN    shift and go to state 62
    LESS_EQUALS     shift and go to state 63
    GREATER_EQUALS  shift and go to state 64
    SHIFT_LEFT      shift and go to state 65
    SHIFT_RIGHT     shift and go to state 66

  ! LOGICAL_OR      [ reduce using rule 37 (expression -> expression GREATER_EQUALS expression .) ]
  ! LOGICAL_AND     [ reduce using rule 37 (expression -> expression GREATER_EQUALS expression .) ]
  ! BITWISE_OR      [ reduce using rule 37 (expression -> expression GREATER_EQUALS expression .) ]
  ! BITWISE_XOR     [ reduce using rule 37 (expression -> expression GREATER_EQUALS expression .) ]
  ! BITWISE_AND     [ reduce using rule 37 (expression -> expression GREATER_EQUALS expression .) ]
  ! EQUALS          [ reduce using rule 37 (expression -> expression GREATER_EQUALS expression .) ]
  ! NOT_EQUALS      [ reduce using rule 37 (expression -> expression GREATER_EQUALS expression .) ]
  ! LESS_THAN       [ reduce using rule 37 (expression -> expression GREATER_EQUALS expression .) ]
  ! GREATER_THAN    [ reduce using rule 37 (expression -> expression GREATER_EQUALS expression .) ]
  ! LESS_EQUALS     [ reduce using rule 37 (expression -> expression GREATER_EQUALS expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 37 (expression -> expression GREATER_EQUALS expression .) ]
  ! SHIFT_LEFT      [ reduce using rule 37 (expression -> expression GREATER_EQUALS expression .) ]
  ! SHIFT_RIGHT     [ reduce using rule 37 (expression -> expression GREATER_EQUALS expression .) ]


state 116

    (38) expression -> expression SHIFT_LEFT expression .
    (27) expression -> expression . LOGICAL_OR expression
    (28) expression -> expression . LOGICAL_AND expression
    (29) expression -> expression . BITWISE_OR expression
    (30) expression -> expression . BITWISE_XOR expression
    (31) expression -> expression . BITWISE_AND expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . GREATER_THAN expression
    (36) expression -> expression . LESS_EQUALS expression
    (37) expression -> expression . GREATER_EQUALS expression
    (38) expression -> expression . SHIFT_LEFT expression
    (39) expression -> expression . SHIFT_RIGHT expression

  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for BITWISE_OR resolved as shift
  ! shift/reduce conflict for BITWISE_XOR resolved as shift
  ! shift/reduce conflict for BITWISE_AND resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS resolved as shift
  ! shift/reduce conflict for SHIFT_LEFT resolved as shift
  ! shift/reduce conflict for SHIFT_RIGHT resolved as shift
    SEMICOLON       reduce using rule 38 (expression -> expression SHIFT_LEFT expression .)
    COMMA           reduce using rule 38 (expression -> expression SHIFT_LEFT expression .)
    CLOSE_PAREN     reduce using rule 38 (expression -> expression SHIFT_LEFT expression .)
    COLON           reduce using rule 38 (expression -> expression SHIFT_LEFT expression .)
    CLOSE_BRACKET   reduce using rule 38 (expression -> expression SHIFT_LEFT expression .)
    LOGICAL_OR      shift and go to state 54
    LOGICAL_AND     shift and go to state 55
    BITWISE_OR      shift and go to state 56
    BITWISE_XOR     shift and go to state 57
    BITWISE_AND     shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUALS      shift and go to state 60
    LESS_THAN       shift and go to state 61
    GREATER_THAN    shift and go to state 62
    LESS_EQUALS     shift and go to state 63
    GREATER_EQUALS  shift and go to state 64
    SHIFT_LEFT      shift and go to state 65
    SHIFT_RIGHT     shift and go to state 66

  ! LOGICAL_OR      [ reduce using rule 38 (expression -> expression SHIFT_LEFT expression .) ]
  ! LOGICAL_AND     [ reduce using rule 38 (expression -> expression SHIFT_LEFT expression .) ]
  ! BITWISE_OR      [ reduce using rule 38 (expression -> expression SHIFT_LEFT expression .) ]
  ! BITWISE_XOR     [ reduce using rule 38 (expression -> expression SHIFT_LEFT expression .) ]
  ! BITWISE_AND     [ reduce using rule 38 (expression -> expression SHIFT_LEFT expression .) ]
  ! EQUALS          [ reduce using rule 38 (expression -> expression SHIFT_LEFT expression .) ]
  ! NOT_EQUALS      [ reduce using rule 38 (expression -> expression SHIFT_LEFT expression .) ]
  ! LESS_THAN       [ reduce using rule 38 (expression -> expression SHIFT_LEFT expression .) ]
  ! GREATER_THAN    [ reduce using rule 38 (expression -> expression SHIFT_LEFT expression .) ]
  ! LESS_EQUALS     [ reduce using rule 38 (expression -> expression SHIFT_LEFT expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 38 (expression -> expression SHIFT_LEFT expression .) ]
  ! SHIFT_LEFT      [ reduce using rule 38 (expression -> expression SHIFT_LEFT expression .) ]
  ! SHIFT_RIGHT     [ reduce using rule 38 (expression -> expression SHIFT_LEFT expression .) ]


state 117

    (39) expression -> expression SHIFT_RIGHT expression .
    (27) expression -> expression . LOGICAL_OR expression
    (28) expression -> expression . LOGICAL_AND expression
    (29) expression -> expression . BITWISE_OR expression
    (30) expression -> expression . BITWISE_XOR expression
    (31) expression -> expression . BITWISE_AND expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . GREATER_THAN expression
    (36) expression -> expression . LESS_EQUALS expression
    (37) expression -> expression . GREATER_EQUALS expression
    (38) expression -> expression . SHIFT_LEFT expression
    (39) expression -> expression . SHIFT_RIGHT expression

  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for BITWISE_OR resolved as shift
  ! shift/reduce conflict for BITWISE_XOR resolved as shift
  ! shift/reduce conflict for BITWISE_AND resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS resolved as shift
  ! shift/reduce conflict for SHIFT_LEFT resolved as shift
  ! shift/reduce conflict for SHIFT_RIGHT resolved as shift
    SEMICOLON       reduce using rule 39 (expression -> expression SHIFT_RIGHT expression .)
    COMMA           reduce using rule 39 (expression -> expression SHIFT_RIGHT expression .)
    CLOSE_PAREN     reduce using rule 39 (expression -> expression SHIFT_RIGHT expression .)
    COLON           reduce using rule 39 (expression -> expression SHIFT_RIGHT expression .)
    CLOSE_BRACKET   reduce using rule 39 (expression -> expression SHIFT_RIGHT expression .)
    LOGICAL_OR      shift and go to state 54
    LOGICAL_AND     shift and go to state 55
    BITWISE_OR      shift and go to state 56
    BITWISE_XOR     shift and go to state 57
    BITWISE_AND     shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUALS      shift and go to state 60
    LESS_THAN       shift and go to state 61
    GREATER_THAN    shift and go to state 62
    LESS_EQUALS     shift and go to state 63
    GREATER_EQUALS  shift and go to state 64
    SHIFT_LEFT      shift and go to state 65
    SHIFT_RIGHT     shift and go to state 66

  ! LOGICAL_OR      [ reduce using rule 39 (expression -> expression SHIFT_RIGHT expression .) ]
  ! LOGICAL_AND     [ reduce using rule 39 (expression -> expression SHIFT_RIGHT expression .) ]
  ! BITWISE_OR      [ reduce using rule 39 (expression -> expression SHIFT_RIGHT expression .) ]
  ! BITWISE_XOR     [ reduce using rule 39 (expression -> expression SHIFT_RIGHT expression .) ]
  ! BITWISE_AND     [ reduce using rule 39 (expression -> expression SHIFT_RIGHT expression .) ]
  ! EQUALS          [ reduce using rule 39 (expression -> expression SHIFT_RIGHT expression .) ]
  ! NOT_EQUALS      [ reduce using rule 39 (expression -> expression SHIFT_RIGHT expression .) ]
  ! LESS_THAN       [ reduce using rule 39 (expression -> expression SHIFT_RIGHT expression .) ]
  ! GREATER_THAN    [ reduce using rule 39 (expression -> expression SHIFT_RIGHT expression .) ]
  ! LESS_EQUALS     [ reduce using rule 39 (expression -> expression SHIFT_RIGHT expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 39 (expression -> expression SHIFT_RIGHT expression .) ]
  ! SHIFT_LEFT      [ reduce using rule 39 (expression -> expression SHIFT_RIGHT expression .) ]
  ! SHIFT_RIGHT     [ reduce using rule 39 (expression -> expression SHIFT_RIGHT expression .) ]


state 118

    (69) additive_expression -> additive_expression PLUS multiplicative_expression .
    (72) multiplicative_expression -> multiplicative_expression . MUL unary_expression
    (73) multiplicative_expression -> multiplicative_expression . DIV unary_expression
    (74) multiplicative_expression -> multiplicative_expression . MOD unary_expression

    PLUS            reduce using rule 69 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 69 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LOGICAL_OR      reduce using rule 69 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LOGICAL_AND     reduce using rule 69 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    BITWISE_OR      reduce using rule 69 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    BITWISE_XOR     reduce using rule 69 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    BITWISE_AND     reduce using rule 69 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQUALS          reduce using rule 69 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NOT_EQUALS      reduce using rule 69 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS_THAN       reduce using rule 69 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER_THAN    reduce using rule 69 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS_EQUALS     reduce using rule 69 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER_EQUALS  reduce using rule 69 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SHIFT_LEFT      reduce using rule 69 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SHIFT_RIGHT     reduce using rule 69 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMICOLON       reduce using rule 69 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CONDITIONAL_OPERATOR reduce using rule 69 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 69 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CLOSE_PAREN     reduce using rule 69 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COLON           reduce using rule 69 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CLOSE_BRACKET   reduce using rule 69 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76


state 119

    (70) additive_expression -> additive_expression MINUS multiplicative_expression .
    (72) multiplicative_expression -> multiplicative_expression . MUL unary_expression
    (73) multiplicative_expression -> multiplicative_expression . DIV unary_expression
    (74) multiplicative_expression -> multiplicative_expression . MOD unary_expression

    PLUS            reduce using rule 70 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 70 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LOGICAL_OR      reduce using rule 70 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LOGICAL_AND     reduce using rule 70 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    BITWISE_OR      reduce using rule 70 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    BITWISE_XOR     reduce using rule 70 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    BITWISE_AND     reduce using rule 70 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQUALS          reduce using rule 70 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NOT_EQUALS      reduce using rule 70 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS_THAN       reduce using rule 70 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER_THAN    reduce using rule 70 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS_EQUALS     reduce using rule 70 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER_EQUALS  reduce using rule 70 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SHIFT_LEFT      reduce using rule 70 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SHIFT_RIGHT     reduce using rule 70 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMICOLON       reduce using rule 70 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CONDITIONAL_OPERATOR reduce using rule 70 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 70 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CLOSE_PAREN     reduce using rule 70 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COLON           reduce using rule 70 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CLOSE_BRACKET   reduce using rule 70 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76


state 120

    (72) multiplicative_expression -> multiplicative_expression MUL unary_expression .

    MUL             reduce using rule 72 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    DIV             reduce using rule 72 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    MOD             reduce using rule 72 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    PLUS            reduce using rule 72 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    MINUS           reduce using rule 72 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    LOGICAL_OR      reduce using rule 72 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    LOGICAL_AND     reduce using rule 72 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    BITWISE_OR      reduce using rule 72 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    BITWISE_XOR     reduce using rule 72 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    BITWISE_AND     reduce using rule 72 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    EQUALS          reduce using rule 72 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    NOT_EQUALS      reduce using rule 72 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    LESS_THAN       reduce using rule 72 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    GREATER_THAN    reduce using rule 72 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    LESS_EQUALS     reduce using rule 72 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    GREATER_EQUALS  reduce using rule 72 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    SHIFT_LEFT      reduce using rule 72 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    SHIFT_RIGHT     reduce using rule 72 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    SEMICOLON       reduce using rule 72 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    CONDITIONAL_OPERATOR reduce using rule 72 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    COMMA           reduce using rule 72 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    CLOSE_PAREN     reduce using rule 72 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    COLON           reduce using rule 72 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    CLOSE_BRACKET   reduce using rule 72 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)


state 121

    (73) multiplicative_expression -> multiplicative_expression DIV unary_expression .

    MUL             reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DIV             reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    MOD             reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    PLUS            reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    MINUS           reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    LOGICAL_OR      reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    LOGICAL_AND     reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    BITWISE_OR      reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    BITWISE_XOR     reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    BITWISE_AND     reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    EQUALS          reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    NOT_EQUALS      reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    LESS_THAN       reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    GREATER_THAN    reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    LESS_EQUALS     reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    GREATER_EQUALS  reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    SHIFT_LEFT      reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    SHIFT_RIGHT     reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    SEMICOLON       reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    CONDITIONAL_OPERATOR reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    COMMA           reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    CLOSE_PAREN     reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    COLON           reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    CLOSE_BRACKET   reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)


state 122

    (74) multiplicative_expression -> multiplicative_expression MOD unary_expression .

    MUL             reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DIV             reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    MOD             reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    PLUS            reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    MINUS           reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    LOGICAL_OR      reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    LOGICAL_AND     reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    BITWISE_OR      reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    BITWISE_XOR     reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    BITWISE_AND     reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    EQUALS          reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    NOT_EQUALS      reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    LESS_THAN       reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    GREATER_THAN    reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    LESS_EQUALS     reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    GREATER_EQUALS  reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    SHIFT_LEFT      reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    SHIFT_RIGHT     reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    SEMICOLON       reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    CONDITIONAL_OPERATOR reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    COMMA           reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    CLOSE_PAREN     reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    COLON           reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    CLOSE_BRACKET   reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)


state 123

    (44) conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression . COLON conditional_expression
    (45) conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression . COMMA conditional_expression
    (27) expression -> expression . LOGICAL_OR expression
    (28) expression -> expression . LOGICAL_AND expression
    (29) expression -> expression . BITWISE_OR expression
    (30) expression -> expression . BITWISE_XOR expression
    (31) expression -> expression . BITWISE_AND expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . GREATER_THAN expression
    (36) expression -> expression . LESS_EQUALS expression
    (37) expression -> expression . GREATER_EQUALS expression
    (38) expression -> expression . SHIFT_LEFT expression
    (39) expression -> expression . SHIFT_RIGHT expression

    COLON           shift and go to state 145
    COMMA           shift and go to state 146
    LOGICAL_OR      shift and go to state 54
    LOGICAL_AND     shift and go to state 55
    BITWISE_OR      shift and go to state 56
    BITWISE_XOR     shift and go to state 57
    BITWISE_AND     shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUALS      shift and go to state 60
    LESS_THAN       shift and go to state 61
    GREATER_THAN    shift and go to state 62
    LESS_EQUALS     shift and go to state 63
    GREATER_EQUALS  shift and go to state 64
    SHIFT_LEFT      shift and go to state 65
    SHIFT_RIGHT     shift and go to state 66


state 124

    (47) logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .
    (50) logical_and_expression -> logical_and_expression . LOGICAL_AND bitwise_or_expression

  ! shift/reduce conflict for LOGICAL_AND resolved as shift
    CONDITIONAL_OPERATOR reduce using rule 47 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    LOGICAL_OR      reduce using rule 47 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    BITWISE_OR      reduce using rule 47 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    BITWISE_XOR     reduce using rule 47 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    BITWISE_AND     reduce using rule 47 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    EQUALS          reduce using rule 47 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    NOT_EQUALS      reduce using rule 47 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    LESS_THAN       reduce using rule 47 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    GREATER_THAN    reduce using rule 47 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    LESS_EQUALS     reduce using rule 47 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    GREATER_EQUALS  reduce using rule 47 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    SHIFT_LEFT      reduce using rule 47 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    SHIFT_RIGHT     reduce using rule 47 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    SEMICOLON       reduce using rule 47 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    COMMA           reduce using rule 47 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    CLOSE_PAREN     reduce using rule 47 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    COLON           reduce using rule 47 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    CLOSE_BRACKET   reduce using rule 47 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    LOGICAL_AND     shift and go to state 80

  ! LOGICAL_AND     [ reduce using rule 47 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .) ]


state 125

    (65) shift_expression -> additive_expression .
    (69) additive_expression -> additive_expression . PLUS multiplicative_expression
    (70) additive_expression -> additive_expression . MINUS multiplicative_expression

    SHIFT_LEFT      reduce using rule 65 (shift_expression -> additive_expression .)
    SHIFT_RIGHT     reduce using rule 65 (shift_expression -> additive_expression .)
    LESS_THAN       reduce using rule 65 (shift_expression -> additive_expression .)
    GREATER_THAN    reduce using rule 65 (shift_expression -> additive_expression .)
    LESS_EQUALS     reduce using rule 65 (shift_expression -> additive_expression .)
    GREATER_EQUALS  reduce using rule 65 (shift_expression -> additive_expression .)
    EQUALS          reduce using rule 65 (shift_expression -> additive_expression .)
    NOT_EQUALS      reduce using rule 65 (shift_expression -> additive_expression .)
    BITWISE_AND     reduce using rule 65 (shift_expression -> additive_expression .)
    BITWISE_XOR     reduce using rule 65 (shift_expression -> additive_expression .)
    BITWISE_OR      reduce using rule 65 (shift_expression -> additive_expression .)
    LOGICAL_AND     reduce using rule 65 (shift_expression -> additive_expression .)
    CONDITIONAL_OPERATOR reduce using rule 65 (shift_expression -> additive_expression .)
    LOGICAL_OR      reduce using rule 65 (shift_expression -> additive_expression .)
    SEMICOLON       reduce using rule 65 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 65 (shift_expression -> additive_expression .)
    CLOSE_PAREN     reduce using rule 65 (shift_expression -> additive_expression .)
    COLON           reduce using rule 65 (shift_expression -> additive_expression .)
    CLOSE_BRACKET   reduce using rule 65 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68


state 126

    (50) logical_and_expression -> logical_and_expression LOGICAL_AND bitwise_or_expression .
    (52) bitwise_or_expression -> bitwise_or_expression . BITWISE_OR bitwise_xor_expression

  ! shift/reduce conflict for BITWISE_OR resolved as shift
    LOGICAL_AND     reduce using rule 50 (logical_and_expression -> logical_and_expression LOGICAL_AND bitwise_or_expression .)
    CONDITIONAL_OPERATOR reduce using rule 50 (logical_and_expression -> logical_and_expression LOGICAL_AND bitwise_or_expression .)
    LOGICAL_OR      reduce using rule 50 (logical_and_expression -> logical_and_expression LOGICAL_AND bitwise_or_expression .)
    BITWISE_XOR     reduce using rule 50 (logical_and_expression -> logical_and_expression LOGICAL_AND bitwise_or_expression .)
    BITWISE_AND     reduce using rule 50 (logical_and_expression -> logical_and_expression LOGICAL_AND bitwise_or_expression .)
    EQUALS          reduce using rule 50 (logical_and_expression -> logical_and_expression LOGICAL_AND bitwise_or_expression .)
    NOT_EQUALS      reduce using rule 50 (logical_and_expression -> logical_and_expression LOGICAL_AND bitwise_or_expression .)
    LESS_THAN       reduce using rule 50 (logical_and_expression -> logical_and_expression LOGICAL_AND bitwise_or_expression .)
    GREATER_THAN    reduce using rule 50 (logical_and_expression -> logical_and_expression LOGICAL_AND bitwise_or_expression .)
    LESS_EQUALS     reduce using rule 50 (logical_and_expression -> logical_and_expression LOGICAL_AND bitwise_or_expression .)
    GREATER_EQUALS  reduce using rule 50 (logical_and_expression -> logical_and_expression LOGICAL_AND bitwise_or_expression .)
    SHIFT_LEFT      reduce using rule 50 (logical_and_expression -> logical_and_expression LOGICAL_AND bitwise_or_expression .)
    SHIFT_RIGHT     reduce using rule 50 (logical_and_expression -> logical_and_expression LOGICAL_AND bitwise_or_expression .)
    SEMICOLON       reduce using rule 50 (logical_and_expression -> logical_and_expression LOGICAL_AND bitwise_or_expression .)
    COMMA           reduce using rule 50 (logical_and_expression -> logical_and_expression LOGICAL_AND bitwise_or_expression .)
    CLOSE_PAREN     reduce using rule 50 (logical_and_expression -> logical_and_expression LOGICAL_AND bitwise_or_expression .)
    COLON           reduce using rule 50 (logical_and_expression -> logical_and_expression LOGICAL_AND bitwise_or_expression .)
    CLOSE_BRACKET   reduce using rule 50 (logical_and_expression -> logical_and_expression LOGICAL_AND bitwise_or_expression .)
    BITWISE_OR      shift and go to state 91

  ! BITWISE_OR      [ reduce using rule 50 (logical_and_expression -> logical_and_expression LOGICAL_AND bitwise_or_expression .) ]


state 127

    (84) postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .

    OPEN_PAREN      reduce using rule 84 (postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .)
    OPEN_BRACKET    reduce using rule 84 (postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .)
    DOT             reduce using rule 84 (postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .)
    ARROW           reduce using rule 84 (postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .)
    INCREMENT       reduce using rule 84 (postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .)
    DECREMENT       reduce using rule 84 (postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .)
    MUL             reduce using rule 84 (postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .)
    DIV             reduce using rule 84 (postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .)
    MOD             reduce using rule 84 (postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .)
    PLUS            reduce using rule 84 (postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .)
    MINUS           reduce using rule 84 (postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .)
    LOGICAL_OR      reduce using rule 84 (postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .)
    LOGICAL_AND     reduce using rule 84 (postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .)
    BITWISE_OR      reduce using rule 84 (postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .)
    BITWISE_XOR     reduce using rule 84 (postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .)
    BITWISE_AND     reduce using rule 84 (postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .)
    EQUALS          reduce using rule 84 (postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .)
    NOT_EQUALS      reduce using rule 84 (postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .)
    LESS_THAN       reduce using rule 84 (postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .)
    GREATER_THAN    reduce using rule 84 (postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .)
    LESS_EQUALS     reduce using rule 84 (postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .)
    GREATER_EQUALS  reduce using rule 84 (postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .)
    SHIFT_LEFT      reduce using rule 84 (postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .)
    SHIFT_RIGHT     reduce using rule 84 (postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .)
    SEMICOLON       reduce using rule 84 (postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .)
    CONDITIONAL_OPERATOR reduce using rule 84 (postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .)
    COMMA           reduce using rule 84 (postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 84 (postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .)
    COLON           reduce using rule 84 (postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 84 (postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN .)


state 128

    (85) postfix_expression -> postfix_expression OPEN_BRACKET expression . CLOSE_BRACKET
    (27) expression -> expression . LOGICAL_OR expression
    (28) expression -> expression . LOGICAL_AND expression
    (29) expression -> expression . BITWISE_OR expression
    (30) expression -> expression . BITWISE_XOR expression
    (31) expression -> expression . BITWISE_AND expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . GREATER_THAN expression
    (36) expression -> expression . LESS_EQUALS expression
    (37) expression -> expression . GREATER_EQUALS expression
    (38) expression -> expression . SHIFT_LEFT expression
    (39) expression -> expression . SHIFT_RIGHT expression

    CLOSE_BRACKET   shift and go to state 147
    LOGICAL_OR      shift and go to state 54
    LOGICAL_AND     shift and go to state 55
    BITWISE_OR      shift and go to state 56
    BITWISE_XOR     shift and go to state 57
    BITWISE_AND     shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUALS      shift and go to state 60
    LESS_THAN       shift and go to state 61
    GREATER_THAN    shift and go to state 62
    LESS_EQUALS     shift and go to state 63
    GREATER_EQUALS  shift and go to state 64
    SHIFT_LEFT      shift and go to state 65
    SHIFT_RIGHT     shift and go to state 66


state 129

    (86) postfix_expression -> postfix_expression DOT IDENTIFIER .

    OPEN_PAREN      reduce using rule 86 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    OPEN_BRACKET    reduce using rule 86 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DOT             reduce using rule 86 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    ARROW           reduce using rule 86 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    INCREMENT       reduce using rule 86 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DECREMENT       reduce using rule 86 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MUL             reduce using rule 86 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DIV             reduce using rule 86 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MOD             reduce using rule 86 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PLUS            reduce using rule 86 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MINUS           reduce using rule 86 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LOGICAL_OR      reduce using rule 86 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LOGICAL_AND     reduce using rule 86 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    BITWISE_OR      reduce using rule 86 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    BITWISE_XOR     reduce using rule 86 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    BITWISE_AND     reduce using rule 86 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    EQUALS          reduce using rule 86 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    NOT_EQUALS      reduce using rule 86 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LESS_THAN       reduce using rule 86 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    GREATER_THAN    reduce using rule 86 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LESS_EQUALS     reduce using rule 86 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 86 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SHIFT_LEFT      reduce using rule 86 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SHIFT_RIGHT     reduce using rule 86 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 86 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    CONDITIONAL_OPERATOR reduce using rule 86 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    COMMA           reduce using rule 86 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 86 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    COLON           reduce using rule 86 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 86 (postfix_expression -> postfix_expression DOT IDENTIFIER .)


state 130

    (87) postfix_expression -> postfix_expression ARROW IDENTIFIER .

    OPEN_PAREN      reduce using rule 87 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    OPEN_BRACKET    reduce using rule 87 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    DOT             reduce using rule 87 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    ARROW           reduce using rule 87 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    INCREMENT       reduce using rule 87 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    DECREMENT       reduce using rule 87 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    MUL             reduce using rule 87 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    DIV             reduce using rule 87 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    MOD             reduce using rule 87 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    PLUS            reduce using rule 87 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    MINUS           reduce using rule 87 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LOGICAL_OR      reduce using rule 87 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LOGICAL_AND     reduce using rule 87 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    BITWISE_OR      reduce using rule 87 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    BITWISE_XOR     reduce using rule 87 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    BITWISE_AND     reduce using rule 87 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    EQUALS          reduce using rule 87 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    NOT_EQUALS      reduce using rule 87 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LESS_THAN       reduce using rule 87 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    GREATER_THAN    reduce using rule 87 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LESS_EQUALS     reduce using rule 87 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 87 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    SHIFT_LEFT      reduce using rule 87 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    SHIFT_RIGHT     reduce using rule 87 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    SEMICOLON       reduce using rule 87 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    CONDITIONAL_OPERATOR reduce using rule 87 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    COMMA           reduce using rule 87 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 87 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    COLON           reduce using rule 87 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 87 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)


state 131

    (52) bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .
    (54) bitwise_xor_expression -> bitwise_xor_expression . BITWISE_XOR bitwise_and_expression

  ! shift/reduce conflict for BITWISE_XOR resolved as shift
    BITWISE_OR      reduce using rule 52 (bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .)
    LOGICAL_AND     reduce using rule 52 (bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .)
    CONDITIONAL_OPERATOR reduce using rule 52 (bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .)
    LOGICAL_OR      reduce using rule 52 (bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .)
    BITWISE_AND     reduce using rule 52 (bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .)
    EQUALS          reduce using rule 52 (bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .)
    NOT_EQUALS      reduce using rule 52 (bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .)
    LESS_THAN       reduce using rule 52 (bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .)
    GREATER_THAN    reduce using rule 52 (bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .)
    LESS_EQUALS     reduce using rule 52 (bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .)
    GREATER_EQUALS  reduce using rule 52 (bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .)
    SHIFT_LEFT      reduce using rule 52 (bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .)
    SHIFT_RIGHT     reduce using rule 52 (bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .)
    SEMICOLON       reduce using rule 52 (bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .)
    COMMA           reduce using rule 52 (bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .)
    CLOSE_PAREN     reduce using rule 52 (bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .)
    COLON           reduce using rule 52 (bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .)
    CLOSE_BRACKET   reduce using rule 52 (bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .)
    BITWISE_XOR     shift and go to state 93

  ! BITWISE_XOR     [ reduce using rule 52 (bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .) ]


state 132

    (94) primary_expression -> OPEN_PAREN expression CLOSE_PAREN .

    OPEN_PAREN      reduce using rule 94 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    OPEN_BRACKET    reduce using rule 94 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    DOT             reduce using rule 94 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    ARROW           reduce using rule 94 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    INCREMENT       reduce using rule 94 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    DECREMENT       reduce using rule 94 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    MUL             reduce using rule 94 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    DIV             reduce using rule 94 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    MOD             reduce using rule 94 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    PLUS            reduce using rule 94 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    MINUS           reduce using rule 94 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LOGICAL_OR      reduce using rule 94 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LOGICAL_AND     reduce using rule 94 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BITWISE_OR      reduce using rule 94 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BITWISE_XOR     reduce using rule 94 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BITWISE_AND     reduce using rule 94 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    EQUALS          reduce using rule 94 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    NOT_EQUALS      reduce using rule 94 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LESS_THAN       reduce using rule 94 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    GREATER_THAN    reduce using rule 94 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LESS_EQUALS     reduce using rule 94 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    GREATER_EQUALS  reduce using rule 94 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    SHIFT_LEFT      reduce using rule 94 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    SHIFT_RIGHT     reduce using rule 94 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    SEMICOLON       reduce using rule 94 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    CONDITIONAL_OPERATOR reduce using rule 94 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    COMMA           reduce using rule 94 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 94 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    COLON           reduce using rule 94 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 94 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)


state 133

    (54) bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .
    (56) bitwise_and_expression -> bitwise_and_expression . BITWISE_AND equality_expression

  ! shift/reduce conflict for BITWISE_AND resolved as shift
    BITWISE_XOR     reduce using rule 54 (bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .)
    BITWISE_OR      reduce using rule 54 (bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .)
    LOGICAL_AND     reduce using rule 54 (bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .)
    CONDITIONAL_OPERATOR reduce using rule 54 (bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .)
    LOGICAL_OR      reduce using rule 54 (bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .)
    EQUALS          reduce using rule 54 (bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .)
    NOT_EQUALS      reduce using rule 54 (bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .)
    LESS_THAN       reduce using rule 54 (bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .)
    GREATER_THAN    reduce using rule 54 (bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .)
    LESS_EQUALS     reduce using rule 54 (bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .)
    GREATER_EQUALS  reduce using rule 54 (bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .)
    SHIFT_LEFT      reduce using rule 54 (bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .)
    SHIFT_RIGHT     reduce using rule 54 (bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .)
    SEMICOLON       reduce using rule 54 (bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .)
    COMMA           reduce using rule 54 (bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .)
    CLOSE_PAREN     reduce using rule 54 (bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .)
    COLON           reduce using rule 54 (bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .)
    CLOSE_BRACKET   reduce using rule 54 (bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .)
    BITWISE_AND     shift and go to state 94

  ! BITWISE_AND     [ reduce using rule 54 (bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .) ]


state 134

    (56) bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .
    (58) equality_expression -> equality_expression . EQUALS relational_expression
    (59) equality_expression -> equality_expression . NOT_EQUALS relational_expression

  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
    BITWISE_AND     reduce using rule 56 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .)
    BITWISE_XOR     reduce using rule 56 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .)
    BITWISE_OR      reduce using rule 56 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .)
    LOGICAL_AND     reduce using rule 56 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .)
    CONDITIONAL_OPERATOR reduce using rule 56 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .)
    LOGICAL_OR      reduce using rule 56 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .)
    LESS_THAN       reduce using rule 56 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .)
    GREATER_THAN    reduce using rule 56 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .)
    LESS_EQUALS     reduce using rule 56 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .)
    GREATER_EQUALS  reduce using rule 56 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .)
    SHIFT_LEFT      reduce using rule 56 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .)
    SHIFT_RIGHT     reduce using rule 56 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .)
    SEMICOLON       reduce using rule 56 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .)
    COMMA           reduce using rule 56 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .)
    CLOSE_PAREN     reduce using rule 56 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .)
    COLON           reduce using rule 56 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .)
    CLOSE_BRACKET   reduce using rule 56 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .)
    EQUALS          shift and go to state 95
    NOT_EQUALS      shift and go to state 96

  ! EQUALS          [ reduce using rule 56 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .) ]
  ! NOT_EQUALS      [ reduce using rule 56 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .) ]


state 135

    (58) equality_expression -> equality_expression EQUALS relational_expression .
    (61) relational_expression -> relational_expression . LESS_THAN shift_expression
    (62) relational_expression -> relational_expression . GREATER_THAN shift_expression
    (63) relational_expression -> relational_expression . LESS_EQUALS shift_expression
    (64) relational_expression -> relational_expression . GREATER_EQUALS shift_expression

  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS resolved as shift
    EQUALS          reduce using rule 58 (equality_expression -> equality_expression EQUALS relational_expression .)
    NOT_EQUALS      reduce using rule 58 (equality_expression -> equality_expression EQUALS relational_expression .)
    BITWISE_AND     reduce using rule 58 (equality_expression -> equality_expression EQUALS relational_expression .)
    BITWISE_XOR     reduce using rule 58 (equality_expression -> equality_expression EQUALS relational_expression .)
    BITWISE_OR      reduce using rule 58 (equality_expression -> equality_expression EQUALS relational_expression .)
    LOGICAL_AND     reduce using rule 58 (equality_expression -> equality_expression EQUALS relational_expression .)
    CONDITIONAL_OPERATOR reduce using rule 58 (equality_expression -> equality_expression EQUALS relational_expression .)
    LOGICAL_OR      reduce using rule 58 (equality_expression -> equality_expression EQUALS relational_expression .)
    SHIFT_LEFT      reduce using rule 58 (equality_expression -> equality_expression EQUALS relational_expression .)
    SHIFT_RIGHT     reduce using rule 58 (equality_expression -> equality_expression EQUALS relational_expression .)
    SEMICOLON       reduce using rule 58 (equality_expression -> equality_expression EQUALS relational_expression .)
    COMMA           reduce using rule 58 (equality_expression -> equality_expression EQUALS relational_expression .)
    CLOSE_PAREN     reduce using rule 58 (equality_expression -> equality_expression EQUALS relational_expression .)
    COLON           reduce using rule 58 (equality_expression -> equality_expression EQUALS relational_expression .)
    CLOSE_BRACKET   reduce using rule 58 (equality_expression -> equality_expression EQUALS relational_expression .)
    LESS_THAN       shift and go to state 97
    GREATER_THAN    shift and go to state 98
    LESS_EQUALS     shift and go to state 99
    GREATER_EQUALS  shift and go to state 100

  ! LESS_THAN       [ reduce using rule 58 (equality_expression -> equality_expression EQUALS relational_expression .) ]
  ! GREATER_THAN    [ reduce using rule 58 (equality_expression -> equality_expression EQUALS relational_expression .) ]
  ! LESS_EQUALS     [ reduce using rule 58 (equality_expression -> equality_expression EQUALS relational_expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 58 (equality_expression -> equality_expression EQUALS relational_expression .) ]


state 136

    (59) equality_expression -> equality_expression NOT_EQUALS relational_expression .
    (61) relational_expression -> relational_expression . LESS_THAN shift_expression
    (62) relational_expression -> relational_expression . GREATER_THAN shift_expression
    (63) relational_expression -> relational_expression . LESS_EQUALS shift_expression
    (64) relational_expression -> relational_expression . GREATER_EQUALS shift_expression

  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS resolved as shift
    EQUALS          reduce using rule 59 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    NOT_EQUALS      reduce using rule 59 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    BITWISE_AND     reduce using rule 59 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    BITWISE_XOR     reduce using rule 59 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    BITWISE_OR      reduce using rule 59 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    LOGICAL_AND     reduce using rule 59 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    CONDITIONAL_OPERATOR reduce using rule 59 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    LOGICAL_OR      reduce using rule 59 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    SHIFT_LEFT      reduce using rule 59 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    SHIFT_RIGHT     reduce using rule 59 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    SEMICOLON       reduce using rule 59 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    COMMA           reduce using rule 59 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    CLOSE_PAREN     reduce using rule 59 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    COLON           reduce using rule 59 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    CLOSE_BRACKET   reduce using rule 59 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    LESS_THAN       shift and go to state 97
    GREATER_THAN    shift and go to state 98
    LESS_EQUALS     shift and go to state 99
    GREATER_EQUALS  shift and go to state 100

  ! LESS_THAN       [ reduce using rule 59 (equality_expression -> equality_expression NOT_EQUALS relational_expression .) ]
  ! GREATER_THAN    [ reduce using rule 59 (equality_expression -> equality_expression NOT_EQUALS relational_expression .) ]
  ! LESS_EQUALS     [ reduce using rule 59 (equality_expression -> equality_expression NOT_EQUALS relational_expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 59 (equality_expression -> equality_expression NOT_EQUALS relational_expression .) ]


state 137

    (61) relational_expression -> relational_expression LESS_THAN shift_expression .
    (66) shift_expression -> shift_expression . SHIFT_LEFT additive_expression
    (67) shift_expression -> shift_expression . SHIFT_RIGHT additive_expression

  ! shift/reduce conflict for SHIFT_LEFT resolved as shift
  ! shift/reduce conflict for SHIFT_RIGHT resolved as shift
    LESS_THAN       reduce using rule 61 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    GREATER_THAN    reduce using rule 61 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    LESS_EQUALS     reduce using rule 61 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    GREATER_EQUALS  reduce using rule 61 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    EQUALS          reduce using rule 61 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    NOT_EQUALS      reduce using rule 61 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    BITWISE_AND     reduce using rule 61 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    BITWISE_XOR     reduce using rule 61 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    BITWISE_OR      reduce using rule 61 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    LOGICAL_AND     reduce using rule 61 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    CONDITIONAL_OPERATOR reduce using rule 61 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    LOGICAL_OR      reduce using rule 61 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    SEMICOLON       reduce using rule 61 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    COMMA           reduce using rule 61 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    CLOSE_PAREN     reduce using rule 61 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    COLON           reduce using rule 61 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    CLOSE_BRACKET   reduce using rule 61 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    SHIFT_LEFT      shift and go to state 101
    SHIFT_RIGHT     shift and go to state 102

  ! SHIFT_LEFT      [ reduce using rule 61 (relational_expression -> relational_expression LESS_THAN shift_expression .) ]
  ! SHIFT_RIGHT     [ reduce using rule 61 (relational_expression -> relational_expression LESS_THAN shift_expression .) ]


state 138

    (62) relational_expression -> relational_expression GREATER_THAN shift_expression .
    (66) shift_expression -> shift_expression . SHIFT_LEFT additive_expression
    (67) shift_expression -> shift_expression . SHIFT_RIGHT additive_expression

  ! shift/reduce conflict for SHIFT_LEFT resolved as shift
  ! shift/reduce conflict for SHIFT_RIGHT resolved as shift
    LESS_THAN       reduce using rule 62 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    GREATER_THAN    reduce using rule 62 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    LESS_EQUALS     reduce using rule 62 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    GREATER_EQUALS  reduce using rule 62 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    EQUALS          reduce using rule 62 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    NOT_EQUALS      reduce using rule 62 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    BITWISE_AND     reduce using rule 62 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    BITWISE_XOR     reduce using rule 62 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    BITWISE_OR      reduce using rule 62 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    LOGICAL_AND     reduce using rule 62 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    CONDITIONAL_OPERATOR reduce using rule 62 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    LOGICAL_OR      reduce using rule 62 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    SEMICOLON       reduce using rule 62 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    COMMA           reduce using rule 62 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    CLOSE_PAREN     reduce using rule 62 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    COLON           reduce using rule 62 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    CLOSE_BRACKET   reduce using rule 62 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    SHIFT_LEFT      shift and go to state 101
    SHIFT_RIGHT     shift and go to state 102

  ! SHIFT_LEFT      [ reduce using rule 62 (relational_expression -> relational_expression GREATER_THAN shift_expression .) ]
  ! SHIFT_RIGHT     [ reduce using rule 62 (relational_expression -> relational_expression GREATER_THAN shift_expression .) ]


state 139

    (63) relational_expression -> relational_expression LESS_EQUALS shift_expression .
    (66) shift_expression -> shift_expression . SHIFT_LEFT additive_expression
    (67) shift_expression -> shift_expression . SHIFT_RIGHT additive_expression

  ! shift/reduce conflict for SHIFT_LEFT resolved as shift
  ! shift/reduce conflict for SHIFT_RIGHT resolved as shift
    LESS_THAN       reduce using rule 63 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    GREATER_THAN    reduce using rule 63 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    LESS_EQUALS     reduce using rule 63 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    GREATER_EQUALS  reduce using rule 63 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    EQUALS          reduce using rule 63 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    NOT_EQUALS      reduce using rule 63 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    BITWISE_AND     reduce using rule 63 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    BITWISE_XOR     reduce using rule 63 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    BITWISE_OR      reduce using rule 63 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    LOGICAL_AND     reduce using rule 63 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    CONDITIONAL_OPERATOR reduce using rule 63 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    LOGICAL_OR      reduce using rule 63 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    SEMICOLON       reduce using rule 63 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    COMMA           reduce using rule 63 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    CLOSE_PAREN     reduce using rule 63 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    COLON           reduce using rule 63 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    CLOSE_BRACKET   reduce using rule 63 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    SHIFT_LEFT      shift and go to state 101
    SHIFT_RIGHT     shift and go to state 102

  ! SHIFT_LEFT      [ reduce using rule 63 (relational_expression -> relational_expression LESS_EQUALS shift_expression .) ]
  ! SHIFT_RIGHT     [ reduce using rule 63 (relational_expression -> relational_expression LESS_EQUALS shift_expression .) ]


state 140

    (64) relational_expression -> relational_expression GREATER_EQUALS shift_expression .
    (66) shift_expression -> shift_expression . SHIFT_LEFT additive_expression
    (67) shift_expression -> shift_expression . SHIFT_RIGHT additive_expression

  ! shift/reduce conflict for SHIFT_LEFT resolved as shift
  ! shift/reduce conflict for SHIFT_RIGHT resolved as shift
    LESS_THAN       reduce using rule 64 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    GREATER_THAN    reduce using rule 64 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    LESS_EQUALS     reduce using rule 64 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    GREATER_EQUALS  reduce using rule 64 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    EQUALS          reduce using rule 64 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    NOT_EQUALS      reduce using rule 64 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    BITWISE_AND     reduce using rule 64 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    BITWISE_XOR     reduce using rule 64 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    BITWISE_OR      reduce using rule 64 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    LOGICAL_AND     reduce using rule 64 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    CONDITIONAL_OPERATOR reduce using rule 64 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    LOGICAL_OR      reduce using rule 64 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    SEMICOLON       reduce using rule 64 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    COMMA           reduce using rule 64 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    CLOSE_PAREN     reduce using rule 64 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    COLON           reduce using rule 64 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    CLOSE_BRACKET   reduce using rule 64 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    SHIFT_LEFT      shift and go to state 101
    SHIFT_RIGHT     shift and go to state 102

  ! SHIFT_LEFT      [ reduce using rule 64 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .) ]
  ! SHIFT_RIGHT     [ reduce using rule 64 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .) ]


state 141

    (66) shift_expression -> shift_expression SHIFT_LEFT additive_expression .
    (69) additive_expression -> additive_expression . PLUS multiplicative_expression
    (70) additive_expression -> additive_expression . MINUS multiplicative_expression

    SHIFT_LEFT      reduce using rule 66 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    SHIFT_RIGHT     reduce using rule 66 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    LESS_THAN       reduce using rule 66 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    GREATER_THAN    reduce using rule 66 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    LESS_EQUALS     reduce using rule 66 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    GREATER_EQUALS  reduce using rule 66 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    EQUALS          reduce using rule 66 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    NOT_EQUALS      reduce using rule 66 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    BITWISE_AND     reduce using rule 66 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    BITWISE_XOR     reduce using rule 66 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    BITWISE_OR      reduce using rule 66 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    LOGICAL_AND     reduce using rule 66 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    CONDITIONAL_OPERATOR reduce using rule 66 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    LOGICAL_OR      reduce using rule 66 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    SEMICOLON       reduce using rule 66 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    COMMA           reduce using rule 66 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    CLOSE_PAREN     reduce using rule 66 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    COLON           reduce using rule 66 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    CLOSE_BRACKET   reduce using rule 66 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68


state 142

    (67) shift_expression -> shift_expression SHIFT_RIGHT additive_expression .
    (69) additive_expression -> additive_expression . PLUS multiplicative_expression
    (70) additive_expression -> additive_expression . MINUS multiplicative_expression

    SHIFT_LEFT      reduce using rule 67 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    SHIFT_RIGHT     reduce using rule 67 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    LESS_THAN       reduce using rule 67 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    GREATER_THAN    reduce using rule 67 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    LESS_EQUALS     reduce using rule 67 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    GREATER_EQUALS  reduce using rule 67 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    EQUALS          reduce using rule 67 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    NOT_EQUALS      reduce using rule 67 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    BITWISE_AND     reduce using rule 67 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    BITWISE_XOR     reduce using rule 67 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    BITWISE_OR      reduce using rule 67 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    LOGICAL_AND     reduce using rule 67 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    CONDITIONAL_OPERATOR reduce using rule 67 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    LOGICAL_OR      reduce using rule 67 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    SEMICOLON       reduce using rule 67 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    COMMA           reduce using rule 67 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    CLOSE_PAREN     reduce using rule 67 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    COLON           reduce using rule 67 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    CLOSE_BRACKET   reduce using rule 67 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68


state 143

    (18) declaration_without_type -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN . expression
    (20) declaration_without_type -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN . float_constant
    (25) expression -> . additive_expression
    (26) expression -> . conditional_expression
    (27) expression -> . expression LOGICAL_OR expression
    (28) expression -> . expression LOGICAL_AND expression
    (29) expression -> . expression BITWISE_OR expression
    (30) expression -> . expression BITWISE_XOR expression
    (31) expression -> . expression BITWISE_AND expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression GREATER_THAN expression
    (36) expression -> . expression LESS_EQUALS expression
    (37) expression -> . expression GREATER_EQUALS expression
    (38) expression -> . expression SHIFT_LEFT expression
    (39) expression -> . expression SHIFT_RIGHT expression
    (110) float_constant -> . FLOAT
    (111) float_constant -> . MINUS FLOAT
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression
    (45) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (48) logical_or_expression -> . conditional_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (49) logical_and_expression -> . bitwise_or_expression
    (50) logical_and_expression -> . logical_and_expression LOGICAL_AND bitwise_or_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (51) bitwise_or_expression -> . bitwise_xor_expression
    (52) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (53) bitwise_xor_expression -> . bitwise_and_expression
    (54) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (55) bitwise_and_expression -> . equality_expression
    (56) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (57) equality_expression -> . relational_expression
    (58) equality_expression -> . equality_expression EQUALS relational_expression
    (59) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (60) relational_expression -> . shift_expression
    (61) relational_expression -> . relational_expression LESS_THAN shift_expression
    (62) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (63) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (64) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression

    FLOAT           shift and go to state 27
    MINUS           shift and go to state 28
    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    OPEN_PAREN      shift and go to state 41

    expression                     shift and go to state 148
    float_constant                 shift and go to state 149
    additive_expression            shift and go to state 24
    conditional_expression         shift and go to state 25
    multiplicative_expression      shift and go to state 29
    logical_or_expression          shift and go to state 31
    unary_expression               shift and go to state 32
    logical_and_expression         shift and go to state 33
    postfix_expression             shift and go to state 34
    bitwise_or_expression          shift and go to state 39
    primary_expression             shift and go to state 40
    bitwise_xor_expression         shift and go to state 42
    bitwise_and_expression         shift and go to state 45
    equality_expression            shift and go to state 46
    relational_expression          shift and go to state 47
    shift_expression               shift and go to state 48

state 144

    (12) declaration_item -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN . expression
    (14) declaration_item -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN . float_constant
    (25) expression -> . additive_expression
    (26) expression -> . conditional_expression
    (27) expression -> . expression LOGICAL_OR expression
    (28) expression -> . expression LOGICAL_AND expression
    (29) expression -> . expression BITWISE_OR expression
    (30) expression -> . expression BITWISE_XOR expression
    (31) expression -> . expression BITWISE_AND expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression GREATER_THAN expression
    (36) expression -> . expression LESS_EQUALS expression
    (37) expression -> . expression GREATER_EQUALS expression
    (38) expression -> . expression SHIFT_LEFT expression
    (39) expression -> . expression SHIFT_RIGHT expression
    (110) float_constant -> . FLOAT
    (111) float_constant -> . MINUS FLOAT
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression
    (45) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (48) logical_or_expression -> . conditional_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (49) logical_and_expression -> . bitwise_or_expression
    (50) logical_and_expression -> . logical_and_expression LOGICAL_AND bitwise_or_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (51) bitwise_or_expression -> . bitwise_xor_expression
    (52) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (53) bitwise_xor_expression -> . bitwise_and_expression
    (54) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (55) bitwise_and_expression -> . equality_expression
    (56) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (57) equality_expression -> . relational_expression
    (58) equality_expression -> . equality_expression EQUALS relational_expression
    (59) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (60) relational_expression -> . shift_expression
    (61) relational_expression -> . relational_expression LESS_THAN shift_expression
    (62) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (63) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (64) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression

    FLOAT           shift and go to state 27
    MINUS           shift and go to state 28
    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    OPEN_PAREN      shift and go to state 41

    expression                     shift and go to state 150
    float_constant                 shift and go to state 151
    additive_expression            shift and go to state 24
    conditional_expression         shift and go to state 25
    multiplicative_expression      shift and go to state 29
    logical_or_expression          shift and go to state 31
    unary_expression               shift and go to state 32
    logical_and_expression         shift and go to state 33
    postfix_expression             shift and go to state 34
    bitwise_or_expression          shift and go to state 39
    primary_expression             shift and go to state 40
    bitwise_xor_expression         shift and go to state 42
    bitwise_and_expression         shift and go to state 45
    equality_expression            shift and go to state 46
    relational_expression          shift and go to state 47
    shift_expression               shift and go to state 48

state 145

    (44) conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON . conditional_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression
    (45) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (48) logical_or_expression -> . conditional_expression
    (49) logical_and_expression -> . bitwise_or_expression
    (50) logical_and_expression -> . logical_and_expression LOGICAL_AND bitwise_or_expression
    (51) bitwise_or_expression -> . bitwise_xor_expression
    (52) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (53) bitwise_xor_expression -> . bitwise_and_expression
    (54) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (55) bitwise_and_expression -> . equality_expression
    (56) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (57) equality_expression -> . relational_expression
    (58) equality_expression -> . equality_expression EQUALS relational_expression
    (59) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (60) relational_expression -> . shift_expression
    (61) relational_expression -> . relational_expression LESS_THAN shift_expression
    (62) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (63) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (64) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    logical_or_expression          shift and go to state 31
    conditional_expression         shift and go to state 152
    logical_and_expression         shift and go to state 33
    bitwise_or_expression          shift and go to state 39
    bitwise_xor_expression         shift and go to state 42
    bitwise_and_expression         shift and go to state 45
    equality_expression            shift and go to state 46
    relational_expression          shift and go to state 47
    shift_expression               shift and go to state 48
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 29
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 40

state 146

    (45) conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA . conditional_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression
    (45) conditional_expression -> . logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (48) logical_or_expression -> . conditional_expression
    (49) logical_and_expression -> . bitwise_or_expression
    (50) logical_and_expression -> . logical_and_expression LOGICAL_AND bitwise_or_expression
    (51) bitwise_or_expression -> . bitwise_xor_expression
    (52) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (53) bitwise_xor_expression -> . bitwise_and_expression
    (54) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (55) bitwise_and_expression -> . equality_expression
    (56) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (57) equality_expression -> . relational_expression
    (58) equality_expression -> . equality_expression EQUALS relational_expression
    (59) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (60) relational_expression -> . shift_expression
    (61) relational_expression -> . relational_expression LESS_THAN shift_expression
    (62) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (63) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (64) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (65) shift_expression -> . additive_expression
    (66) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (67) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (68) additive_expression -> . multiplicative_expression
    (69) additive_expression -> . additive_expression PLUS multiplicative_expression
    (70) additive_expression -> . additive_expression MINUS multiplicative_expression
    (71) multiplicative_expression -> . unary_expression
    (72) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (73) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (74) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (75) unary_expression -> . postfix_expression
    (76) unary_expression -> . BITWISE_AND unary_expression
    (77) unary_expression -> . TIMES unary_expression
    (78) unary_expression -> . PLUS unary_expression
    (79) unary_expression -> . MINUS unary_expression
    (80) unary_expression -> . LOGICAL_NOT unary_expression
    (81) unary_expression -> . INCREMENT unary_expression
    (82) unary_expression -> . DECREMENT unary_expression
    (83) postfix_expression -> . primary_expression
    (84) postfix_expression -> . postfix_expression OPEN_PAREN CLOSE_PAREN
    (85) postfix_expression -> . postfix_expression OPEN_BRACKET expression CLOSE_BRACKET
    (86) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (87) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (88) postfix_expression -> . postfix_expression INCREMENT
    (89) postfix_expression -> . postfix_expression DECREMENT
    (90) primary_expression -> . IDENTIFIER
    (91) primary_expression -> . CONSTANT
    (92) primary_expression -> . STRING_CONSTANT
    (93) primary_expression -> . FLOAT
    (94) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN

    BITWISE_AND     shift and go to state 26
    TIMES           shift and go to state 35
    PLUS            shift and go to state 30
    MINUS           shift and go to state 70
    LOGICAL_NOT     shift and go to state 36
    INCREMENT       shift and go to state 37
    DECREMENT       shift and go to state 38
    IDENTIFIER      shift and go to state 21
    CONSTANT        shift and go to state 43
    STRING_CONSTANT shift and go to state 44
    FLOAT           shift and go to state 71
    OPEN_PAREN      shift and go to state 41

    logical_or_expression          shift and go to state 31
    conditional_expression         shift and go to state 153
    logical_and_expression         shift and go to state 33
    bitwise_or_expression          shift and go to state 39
    bitwise_xor_expression         shift and go to state 42
    bitwise_and_expression         shift and go to state 45
    equality_expression            shift and go to state 46
    relational_expression          shift and go to state 47
    shift_expression               shift and go to state 48
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 29
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 40

state 147

    (85) postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .

    OPEN_PAREN      reduce using rule 85 (postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 85 (postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .)
    DOT             reduce using rule 85 (postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .)
    ARROW           reduce using rule 85 (postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .)
    INCREMENT       reduce using rule 85 (postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .)
    DECREMENT       reduce using rule 85 (postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .)
    MUL             reduce using rule 85 (postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .)
    DIV             reduce using rule 85 (postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .)
    MOD             reduce using rule 85 (postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .)
    PLUS            reduce using rule 85 (postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .)
    MINUS           reduce using rule 85 (postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .)
    LOGICAL_OR      reduce using rule 85 (postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .)
    LOGICAL_AND     reduce using rule 85 (postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .)
    BITWISE_OR      reduce using rule 85 (postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .)
    BITWISE_XOR     reduce using rule 85 (postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .)
    BITWISE_AND     reduce using rule 85 (postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .)
    EQUALS          reduce using rule 85 (postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .)
    NOT_EQUALS      reduce using rule 85 (postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .)
    LESS_THAN       reduce using rule 85 (postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .)
    GREATER_THAN    reduce using rule 85 (postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .)
    LESS_EQUALS     reduce using rule 85 (postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .)
    GREATER_EQUALS  reduce using rule 85 (postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .)
    SHIFT_LEFT      reduce using rule 85 (postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .)
    SHIFT_RIGHT     reduce using rule 85 (postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .)
    SEMICOLON       reduce using rule 85 (postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .)
    CONDITIONAL_OPERATOR reduce using rule 85 (postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .)
    COMMA           reduce using rule 85 (postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 85 (postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .)
    COLON           reduce using rule 85 (postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 85 (postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET .)


state 148

    (18) declaration_without_type -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN expression .
    (27) expression -> expression . LOGICAL_OR expression
    (28) expression -> expression . LOGICAL_AND expression
    (29) expression -> expression . BITWISE_OR expression
    (30) expression -> expression . BITWISE_XOR expression
    (31) expression -> expression . BITWISE_AND expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . GREATER_THAN expression
    (36) expression -> expression . LESS_EQUALS expression
    (37) expression -> expression . GREATER_EQUALS expression
    (38) expression -> expression . SHIFT_LEFT expression
    (39) expression -> expression . SHIFT_RIGHT expression

    SEMICOLON       reduce using rule 18 (declaration_without_type -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN expression .)
    LOGICAL_OR      shift and go to state 54
    LOGICAL_AND     shift and go to state 55
    BITWISE_OR      shift and go to state 56
    BITWISE_XOR     shift and go to state 57
    BITWISE_AND     shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUALS      shift and go to state 60
    LESS_THAN       shift and go to state 61
    GREATER_THAN    shift and go to state 62
    LESS_EQUALS     shift and go to state 63
    GREATER_EQUALS  shift and go to state 64
    SHIFT_LEFT      shift and go to state 65
    SHIFT_RIGHT     shift and go to state 66


state 149

    (20) declaration_without_type -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN float_constant .

    SEMICOLON       reduce using rule 20 (declaration_without_type -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN float_constant .)


state 150

    (12) declaration_item -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN expression .
    (27) expression -> expression . LOGICAL_OR expression
    (28) expression -> expression . LOGICAL_AND expression
    (29) expression -> expression . BITWISE_OR expression
    (30) expression -> expression . BITWISE_XOR expression
    (31) expression -> expression . BITWISE_AND expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . GREATER_THAN expression
    (36) expression -> expression . LESS_EQUALS expression
    (37) expression -> expression . GREATER_EQUALS expression
    (38) expression -> expression . SHIFT_LEFT expression
    (39) expression -> expression . SHIFT_RIGHT expression

    SEMICOLON       reduce using rule 12 (declaration_item -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN expression .)
    COMMA           reduce using rule 12 (declaration_item -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN expression .)
    LOGICAL_OR      shift and go to state 54
    LOGICAL_AND     shift and go to state 55
    BITWISE_OR      shift and go to state 56
    BITWISE_XOR     shift and go to state 57
    BITWISE_AND     shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUALS      shift and go to state 60
    LESS_THAN       shift and go to state 61
    GREATER_THAN    shift and go to state 62
    LESS_EQUALS     shift and go to state 63
    GREATER_EQUALS  shift and go to state 64
    SHIFT_LEFT      shift and go to state 65
    SHIFT_RIGHT     shift and go to state 66


state 151

    (14) declaration_item -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN float_constant .

    SEMICOLON       reduce using rule 14 (declaration_item -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN float_constant .)
    COMMA           reduce using rule 14 (declaration_item -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN float_constant .)


state 152

    (44) conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .
    (48) logical_or_expression -> conditional_expression .

  ! reduce/reduce conflict for CONDITIONAL_OPERATOR resolved using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
  ! reduce/reduce conflict for LOGICAL_OR resolved using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
  ! reduce/reduce conflict for LOGICAL_AND resolved using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
  ! reduce/reduce conflict for BITWISE_OR resolved using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
  ! reduce/reduce conflict for BITWISE_XOR resolved using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
  ! reduce/reduce conflict for BITWISE_AND resolved using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
  ! reduce/reduce conflict for EQUALS resolved using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
  ! reduce/reduce conflict for LESS_EQUALS resolved using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
  ! reduce/reduce conflict for GREATER_EQUALS resolved using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
  ! reduce/reduce conflict for SHIFT_LEFT resolved using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
  ! reduce/reduce conflict for SHIFT_RIGHT resolved using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
  ! reduce/reduce conflict for CLOSE_PAREN resolved using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
  ! reduce/reduce conflict for COLON resolved using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
  ! reduce/reduce conflict for CLOSE_BRACKET resolved using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
    CONDITIONAL_OPERATOR reduce using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
    LOGICAL_OR      reduce using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
    LOGICAL_AND     reduce using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
    BITWISE_OR      reduce using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
    BITWISE_XOR     reduce using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
    BITWISE_AND     reduce using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
    EQUALS          reduce using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
    NOT_EQUALS      reduce using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
    LESS_THAN       reduce using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
    GREATER_THAN    reduce using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
    LESS_EQUALS     reduce using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
    GREATER_EQUALS  reduce using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
    SHIFT_LEFT      reduce using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
    SHIFT_RIGHT     reduce using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
    SEMICOLON       reduce using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
    COMMA           reduce using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
    CLOSE_PAREN     reduce using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
    COLON           reduce using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)
    CLOSE_BRACKET   reduce using rule 44 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression .)

  ! CONDITIONAL_OPERATOR [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! LOGICAL_OR      [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! LOGICAL_AND     [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! BITWISE_OR      [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! BITWISE_XOR     [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! BITWISE_AND     [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! EQUALS          [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! NOT_EQUALS      [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! LESS_THAN       [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! GREATER_THAN    [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! LESS_EQUALS     [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! SHIFT_LEFT      [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! SHIFT_RIGHT     [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! SEMICOLON       [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! COMMA           [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! CLOSE_PAREN     [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! COLON           [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! CLOSE_BRACKET   [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]


state 153

    (45) conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .
    (48) logical_or_expression -> conditional_expression .

  ! reduce/reduce conflict for CONDITIONAL_OPERATOR resolved using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
  ! reduce/reduce conflict for LOGICAL_OR resolved using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
  ! reduce/reduce conflict for LOGICAL_AND resolved using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
  ! reduce/reduce conflict for BITWISE_OR resolved using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
  ! reduce/reduce conflict for BITWISE_XOR resolved using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
  ! reduce/reduce conflict for BITWISE_AND resolved using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
  ! reduce/reduce conflict for EQUALS resolved using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
  ! reduce/reduce conflict for LESS_EQUALS resolved using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
  ! reduce/reduce conflict for GREATER_EQUALS resolved using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
  ! reduce/reduce conflict for SHIFT_LEFT resolved using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
  ! reduce/reduce conflict for SHIFT_RIGHT resolved using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
  ! reduce/reduce conflict for CLOSE_PAREN resolved using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
  ! reduce/reduce conflict for COLON resolved using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
  ! reduce/reduce conflict for CLOSE_BRACKET resolved using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
    CONDITIONAL_OPERATOR reduce using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
    LOGICAL_OR      reduce using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
    LOGICAL_AND     reduce using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
    BITWISE_OR      reduce using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
    BITWISE_XOR     reduce using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
    BITWISE_AND     reduce using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
    EQUALS          reduce using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
    NOT_EQUALS      reduce using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
    LESS_THAN       reduce using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
    GREATER_THAN    reduce using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
    LESS_EQUALS     reduce using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
    GREATER_EQUALS  reduce using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
    SHIFT_LEFT      reduce using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
    SHIFT_RIGHT     reduce using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
    SEMICOLON       reduce using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
    COMMA           reduce using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
    CLOSE_PAREN     reduce using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
    COLON           reduce using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)
    CLOSE_BRACKET   reduce using rule 45 (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression .)

  ! CONDITIONAL_OPERATOR [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! LOGICAL_OR      [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! LOGICAL_AND     [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! BITWISE_OR      [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! BITWISE_XOR     [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! BITWISE_AND     [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! EQUALS          [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! NOT_EQUALS      [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! LESS_THAN       [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! GREATER_THAN    [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! LESS_EQUALS     [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! SHIFT_LEFT      [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! SHIFT_RIGHT     [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! SEMICOLON       [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! COMMA           [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! CLOSE_PAREN     [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! COLON           [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]
  ! CLOSE_BRACKET   [ reduce using rule 48 (logical_or_expression -> conditional_expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CONDITIONAL_OPERATOR in state 31 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 31 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 33 resolved as shift
WARNING: shift/reduce conflict for BITWISE_OR in state 39 resolved as shift
WARNING: shift/reduce conflict for BITWISE_XOR in state 42 resolved as shift
WARNING: shift/reduce conflict for BITWISE_AND in state 45 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 46 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 46 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 47 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 47 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS in state 47 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS in state 47 resolved as shift
WARNING: shift/reduce conflict for SHIFT_LEFT in state 48 resolved as shift
WARNING: shift/reduce conflict for SHIFT_RIGHT in state 48 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 105 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 105 resolved as shift
WARNING: shift/reduce conflict for BITWISE_OR in state 105 resolved as shift
WARNING: shift/reduce conflict for BITWISE_XOR in state 105 resolved as shift
WARNING: shift/reduce conflict for BITWISE_AND in state 105 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 105 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 105 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 105 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 105 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS in state 105 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS in state 105 resolved as shift
WARNING: shift/reduce conflict for SHIFT_LEFT in state 105 resolved as shift
WARNING: shift/reduce conflict for SHIFT_RIGHT in state 105 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 106 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 106 resolved as shift
WARNING: shift/reduce conflict for BITWISE_OR in state 106 resolved as shift
WARNING: shift/reduce conflict for BITWISE_XOR in state 106 resolved as shift
WARNING: shift/reduce conflict for BITWISE_AND in state 106 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 106 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 106 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 106 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 106 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS in state 106 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS in state 106 resolved as shift
WARNING: shift/reduce conflict for SHIFT_LEFT in state 106 resolved as shift
WARNING: shift/reduce conflict for SHIFT_RIGHT in state 106 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 107 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 107 resolved as shift
WARNING: shift/reduce conflict for BITWISE_OR in state 107 resolved as shift
WARNING: shift/reduce conflict for BITWISE_XOR in state 107 resolved as shift
WARNING: shift/reduce conflict for BITWISE_AND in state 107 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 107 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 107 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 107 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 107 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS in state 107 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS in state 107 resolved as shift
WARNING: shift/reduce conflict for SHIFT_LEFT in state 107 resolved as shift
WARNING: shift/reduce conflict for SHIFT_RIGHT in state 107 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 108 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 108 resolved as shift
WARNING: shift/reduce conflict for BITWISE_OR in state 108 resolved as shift
WARNING: shift/reduce conflict for BITWISE_XOR in state 108 resolved as shift
WARNING: shift/reduce conflict for BITWISE_AND in state 108 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 108 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 108 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 108 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 108 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS in state 108 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS in state 108 resolved as shift
WARNING: shift/reduce conflict for SHIFT_LEFT in state 108 resolved as shift
WARNING: shift/reduce conflict for SHIFT_RIGHT in state 108 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 109 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 109 resolved as shift
WARNING: shift/reduce conflict for BITWISE_OR in state 109 resolved as shift
WARNING: shift/reduce conflict for BITWISE_XOR in state 109 resolved as shift
WARNING: shift/reduce conflict for BITWISE_AND in state 109 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 109 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 109 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 109 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 109 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS in state 109 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS in state 109 resolved as shift
WARNING: shift/reduce conflict for SHIFT_LEFT in state 109 resolved as shift
WARNING: shift/reduce conflict for SHIFT_RIGHT in state 109 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 110 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 110 resolved as shift
WARNING: shift/reduce conflict for BITWISE_OR in state 110 resolved as shift
WARNING: shift/reduce conflict for BITWISE_XOR in state 110 resolved as shift
WARNING: shift/reduce conflict for BITWISE_AND in state 110 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 110 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 110 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 110 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 110 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS in state 110 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS in state 110 resolved as shift
WARNING: shift/reduce conflict for SHIFT_LEFT in state 110 resolved as shift
WARNING: shift/reduce conflict for SHIFT_RIGHT in state 110 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 111 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 111 resolved as shift
WARNING: shift/reduce conflict for BITWISE_OR in state 111 resolved as shift
WARNING: shift/reduce conflict for BITWISE_XOR in state 111 resolved as shift
WARNING: shift/reduce conflict for BITWISE_AND in state 111 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 111 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 111 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 111 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 111 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS in state 111 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS in state 111 resolved as shift
WARNING: shift/reduce conflict for SHIFT_LEFT in state 111 resolved as shift
WARNING: shift/reduce conflict for SHIFT_RIGHT in state 111 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 112 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 112 resolved as shift
WARNING: shift/reduce conflict for BITWISE_OR in state 112 resolved as shift
WARNING: shift/reduce conflict for BITWISE_XOR in state 112 resolved as shift
WARNING: shift/reduce conflict for BITWISE_AND in state 112 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 112 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 112 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 112 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 112 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS in state 112 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS in state 112 resolved as shift
WARNING: shift/reduce conflict for SHIFT_LEFT in state 112 resolved as shift
WARNING: shift/reduce conflict for SHIFT_RIGHT in state 112 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 113 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 113 resolved as shift
WARNING: shift/reduce conflict for BITWISE_OR in state 113 resolved as shift
WARNING: shift/reduce conflict for BITWISE_XOR in state 113 resolved as shift
WARNING: shift/reduce conflict for BITWISE_AND in state 113 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 113 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 113 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 113 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 113 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS in state 113 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS in state 113 resolved as shift
WARNING: shift/reduce conflict for SHIFT_LEFT in state 113 resolved as shift
WARNING: shift/reduce conflict for SHIFT_RIGHT in state 113 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 114 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 114 resolved as shift
WARNING: shift/reduce conflict for BITWISE_OR in state 114 resolved as shift
WARNING: shift/reduce conflict for BITWISE_XOR in state 114 resolved as shift
WARNING: shift/reduce conflict for BITWISE_AND in state 114 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 114 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 114 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 114 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 114 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS in state 114 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS in state 114 resolved as shift
WARNING: shift/reduce conflict for SHIFT_LEFT in state 114 resolved as shift
WARNING: shift/reduce conflict for SHIFT_RIGHT in state 114 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 115 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 115 resolved as shift
WARNING: shift/reduce conflict for BITWISE_OR in state 115 resolved as shift
WARNING: shift/reduce conflict for BITWISE_XOR in state 115 resolved as shift
WARNING: shift/reduce conflict for BITWISE_AND in state 115 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 115 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 115 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 115 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 115 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS in state 115 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS in state 115 resolved as shift
WARNING: shift/reduce conflict for SHIFT_LEFT in state 115 resolved as shift
WARNING: shift/reduce conflict for SHIFT_RIGHT in state 115 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 116 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 116 resolved as shift
WARNING: shift/reduce conflict for BITWISE_OR in state 116 resolved as shift
WARNING: shift/reduce conflict for BITWISE_XOR in state 116 resolved as shift
WARNING: shift/reduce conflict for BITWISE_AND in state 116 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 116 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 116 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 116 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 116 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS in state 116 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS in state 116 resolved as shift
WARNING: shift/reduce conflict for SHIFT_LEFT in state 116 resolved as shift
WARNING: shift/reduce conflict for SHIFT_RIGHT in state 116 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 117 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 117 resolved as shift
WARNING: shift/reduce conflict for BITWISE_OR in state 117 resolved as shift
WARNING: shift/reduce conflict for BITWISE_XOR in state 117 resolved as shift
WARNING: shift/reduce conflict for BITWISE_AND in state 117 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 117 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 117 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 117 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 117 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS in state 117 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS in state 117 resolved as shift
WARNING: shift/reduce conflict for SHIFT_LEFT in state 117 resolved as shift
WARNING: shift/reduce conflict for SHIFT_RIGHT in state 117 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 124 resolved as shift
WARNING: shift/reduce conflict for BITWISE_OR in state 126 resolved as shift
WARNING: shift/reduce conflict for BITWISE_XOR in state 131 resolved as shift
WARNING: shift/reduce conflict for BITWISE_AND in state 133 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 134 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 134 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 135 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 135 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS in state 135 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS in state 135 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 136 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 136 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS in state 136 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS in state 136 resolved as shift
WARNING: shift/reduce conflict for SHIFT_LEFT in state 137 resolved as shift
WARNING: shift/reduce conflict for SHIFT_RIGHT in state 137 resolved as shift
WARNING: shift/reduce conflict for SHIFT_LEFT in state 138 resolved as shift
WARNING: shift/reduce conflict for SHIFT_RIGHT in state 138 resolved as shift
WARNING: shift/reduce conflict for SHIFT_LEFT in state 139 resolved as shift
WARNING: shift/reduce conflict for SHIFT_RIGHT in state 139 resolved as shift
WARNING: shift/reduce conflict for SHIFT_LEFT in state 140 resolved as shift
WARNING: shift/reduce conflict for SHIFT_RIGHT in state 140 resolved as shift
WARNING: reduce/reduce conflict in state 24 resolved using rule (expression -> additive_expression)
WARNING: rejected rule (shift_expression -> additive_expression) in state 24
WARNING: reduce/reduce conflict in state 25 resolved using rule (expression -> conditional_expression)
WARNING: rejected rule (logical_or_expression -> conditional_expression) in state 25
WARNING: reduce/reduce conflict in state 27 resolved using rule (primary_expression -> FLOAT)
WARNING: rejected rule (float_constant -> FLOAT) in state 27
WARNING: reduce/reduce conflict in state 72 resolved using rule (primary_expression -> FLOAT)
WARNING: rejected rule (float_constant -> MINUS FLOAT) in state 72
WARNING: reduce/reduce conflict in state 152 resolved using rule (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression)
WARNING: rejected rule (logical_or_expression -> conditional_expression) in state 152
WARNING: reduce/reduce conflict in state 153 resolved using rule (conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression)
WARNING: rejected rule (logical_or_expression -> conditional_expression) in state 153
WARNING: Rule (float_constant -> FLOAT) is never reduced
WARNING: Rule (float_constant -> MINUS FLOAT) is never reduced
