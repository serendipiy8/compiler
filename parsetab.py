
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ARROW ASSIGN BITWISE_AND BITWISE_NOT BITWISE_OR BITWISE_XOR CHAR CLOSE_BRACE CLOSE_BRACKET CLOSE_PAREN COLON COMMA CONDITIONAL_OPERATOR CONSTANT DECREMENT DIV DOT DOUBLE EQUALS FLOAT GREATER_EQUALS GREATER_THAN IDENTIFIER INCREMENT INTEGER LESS_EQUALS LESS_THAN LOGICAL_AND LOGICAL_NOT LOGICAL_OR MINUS MOD MUL NOT_EQUALS OPEN_BRACE OPEN_BRACKET OPEN_PAREN PLUS SEMICOLON SHIFT_LEFT SHIFT_RIGHT STRING_CONSTANT TIMES\n    program : program declaration\n            | empty\n    \n    statement : declaration\n              | expression_statement\n    \n    declaration : type declaration_list SEMICOLON\n                | declaration_without_type SEMICOLON\n    \n    declaration_list : declaration_item\n                    | declaration_list COMMA declaration_item\n    \n    declaration_item : IDENTIFIER\n                    | IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET\n                    | IDENTIFIER ASSIGN expression\n                    | IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN expression\n                    | IDENTIFIER ASSIGN float_constant\n                    | IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN float_constant\n    \n    declaration_without_type : IDENTIFIER\n                            | IDENTIFIER ASSIGN expression\n                            | IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET\n                            | IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN expression\n                            | IDENTIFIER ASSIGN float_constant\n                            | IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN float_constant\n    \n    type : INTEGER\n         | CHAR\n         | FLOAT\n         | DOUBLE\n    \n    expression : additive_expression\n               | conditional_expression\n               | expression LOGICAL_OR expression\n               | expression LOGICAL_AND expression\n               | expression BITWISE_OR expression\n               | expression BITWISE_XOR expression\n               | expression BITWISE_AND expression\n               | expression EQUALS expression\n               | expression NOT_EQUALS expression\n               | expression LESS_THAN expression\n               | expression GREATER_THAN expression\n               | expression LESS_EQUALS expression\n               | expression GREATER_EQUALS expression\n               | expression SHIFT_LEFT expression\n               | expression SHIFT_RIGHT expression\n    \n    expression_statement : expression SEMICOLON\n    \n    assignment_expression : conditional_expression\n                        | unary_expression assignment_operator assignment_expression\n    \n    conditional_expression : logical_or_expression\n                          | logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression\n                          | logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression\n    \n    logical_or_expression : logical_and_expression\n                        | logical_or_expression LOGICAL_OR logical_and_expression\n                        | conditional_expression\n    \n    logical_and_expression : bitwise_or_expression\n                        | logical_and_expression LOGICAL_AND bitwise_or_expression\n    \n    bitwise_or_expression : bitwise_xor_expression\n                        | bitwise_or_expression BITWISE_OR bitwise_xor_expression\n    \n    bitwise_xor_expression : bitwise_and_expression\n                        | bitwise_xor_expression BITWISE_XOR bitwise_and_expression\n    \n    bitwise_and_expression : equality_expression\n                        | bitwise_and_expression BITWISE_AND equality_expression\n    \n    equality_expression : relational_expression\n                     | equality_expression EQUALS relational_expression\n                     | equality_expression NOT_EQUALS relational_expression\n    \n    relational_expression : shift_expression\n                      | relational_expression LESS_THAN shift_expression\n                      | relational_expression GREATER_THAN shift_expression\n                      | relational_expression LESS_EQUALS shift_expression\n                      | relational_expression GREATER_EQUALS shift_expression\n    \n    shift_expression : additive_expression\n                     | shift_expression SHIFT_LEFT additive_expression\n                     | shift_expression SHIFT_RIGHT additive_expression\n    \n    additive_expression : multiplicative_expression\n                     | additive_expression PLUS multiplicative_expression\n                     | additive_expression MINUS multiplicative_expression\n    \n    multiplicative_expression : unary_expression\n                         | multiplicative_expression MUL unary_expression\n                         | multiplicative_expression DIV unary_expression\n                         | multiplicative_expression MOD unary_expression\n    \n    unary_expression : postfix_expression\n                    | BITWISE_AND unary_expression\n                    | TIMES unary_expression\n                    | PLUS unary_expression\n                    | MINUS unary_expression\n                    | LOGICAL_NOT unary_expression\n                    | INCREMENT unary_expression\n                    | DECREMENT unary_expression\n    \n    postfix_expression : primary_expression\n                    | postfix_expression OPEN_PAREN CLOSE_PAREN\n                    | postfix_expression OPEN_BRACKET expression CLOSE_BRACKET\n                    | postfix_expression DOT IDENTIFIER\n                    | postfix_expression ARROW IDENTIFIER\n                    | postfix_expression INCREMENT\n                    | postfix_expression DECREMENT\n    \n    primary_expression : IDENTIFIER\n                    | CONSTANT\n                    | STRING_CONSTANT\n                    | FLOAT\n                    | OPEN_PAREN expression CLOSE_PAREN\n    \n    basic_expression : unary_expression\n                    | basic_expression PLUS basic_expression\n                    | basic_expression MINUS basic_expression\n                    | basic_expression MUL basic_expression\n                    | basic_expression DIV basic_expression\n                    | basic_expression MOD basic_expression\n                    | basic_expression INCREMENT\n                    | basic_expression DECREMENT\n    \n    constant : INTEGER\n             | CHAR\n             | float_constant\n    \n    integer_constant : INTEGER\n                    | FLOAT\n                    | MINUS INTEGER\n                    | MINUS FLOAT\n    \n    float_constant : FLOAT\n                  | MINUS FLOAT\n    \n    assignment_operator : '='\n    empty :"
    
_lr_action_items = {'INTEGER':([0,1,2,3,14,17,],[-113,6,-2,-1,-6,-5,]),'CHAR':([0,1,2,3,14,17,],[-113,7,-2,-1,-6,-5,]),'FLOAT':([0,1,2,3,14,15,17,20,26,28,30,35,36,37,38,41,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,74,75,76,78,79,80,82,91,93,94,95,96,97,98,99,100,101,102,143,144,145,146,],[-113,8,-2,-1,-6,27,-5,27,71,72,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,27,27,71,71,]),'DOUBLE':([0,1,2,3,14,17,],[-113,9,-2,-1,-6,-5,]),'IDENTIFIER':([0,1,2,3,4,6,7,8,9,14,15,17,18,20,26,28,30,35,36,37,38,41,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,74,75,76,78,79,80,82,83,84,91,93,94,95,96,97,98,99,100,101,102,143,144,145,146,],[-113,10,-2,-1,13,-21,-22,-23,-24,-6,21,-5,13,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,129,130,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'$end':([0,1,2,3,14,17,],[-113,0,-2,-1,-6,-5,]),'SEMICOLON':([5,10,11,12,13,21,22,23,24,25,27,29,31,32,33,34,39,40,42,43,44,45,46,47,48,50,52,53,69,71,72,73,77,85,86,87,88,89,90,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,125,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,147,148,149,150,151,152,153,],[14,-15,17,-7,-9,-90,-16,-19,-25,-26,-93,-68,-43,-71,-46,-75,-49,-83,-51,-91,-92,-53,-55,-57,-60,-8,-11,-13,-76,-93,-93,-79,-78,-88,-89,-77,-80,-81,-82,-17,-10,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-69,-70,-72,-73,-74,-47,-65,-50,-84,-86,-87,-52,-94,-54,-56,-58,-59,-61,-62,-63,-64,-66,-67,-85,-18,-20,-12,-14,-44,-45,]),'ASSIGN':([10,13,103,104,],[15,20,143,144,]),'OPEN_BRACKET':([10,13,21,27,34,40,43,44,71,72,85,86,127,129,130,132,147,],[16,19,-90,-93,82,-83,-91,-92,-93,-93,-88,-89,-84,-86,-87,-94,-85,]),'COMMA':([11,12,13,21,24,25,27,29,31,32,33,34,39,40,42,43,44,45,46,47,48,50,52,53,69,71,72,73,77,85,86,87,88,89,90,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,147,150,151,152,153,],[18,-7,-9,-90,-25,-26,-93,-68,-43,-71,-46,-75,-49,-83,-51,-91,-92,-53,-55,-57,-60,-8,-11,-13,-76,-93,-93,-79,-78,-88,-89,-77,-80,-81,-82,-10,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-69,-70,-72,-73,-74,146,-47,-65,-50,-84,-86,-87,-52,-94,-54,-56,-58,-59,-61,-62,-63,-64,-66,-67,-85,-12,-14,-44,-45,]),'MINUS':([15,20,21,24,26,27,28,29,30,32,34,35,36,37,38,40,41,43,44,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,85,86,87,88,89,90,91,93,94,95,96,97,98,99,100,101,102,118,119,120,121,122,125,127,129,130,132,141,142,143,144,145,146,147,],[28,28,-90,68,70,-93,70,-68,70,-71,-75,70,70,70,70,-83,70,-91,-92,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-76,70,-93,-93,-79,70,70,70,-78,70,70,70,70,-88,-89,-77,-80,-81,-82,70,70,70,70,70,70,70,70,70,70,70,-69,-70,-72,-73,-74,68,-84,-86,-87,-94,68,68,28,28,70,70,-85,]),'BITWISE_AND':([15,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,150,152,153,],[26,26,-90,58,-25,-26,26,-93,26,-68,26,-43,-71,-46,-75,26,26,26,26,-49,-83,26,-51,-91,-92,94,-55,-57,-60,58,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-76,26,-93,-93,-79,26,26,26,-78,26,26,26,26,-88,-89,-77,-80,-81,-82,26,58,26,26,26,26,26,26,26,26,26,26,58,58,58,58,58,58,58,58,58,58,58,58,58,-69,-70,-72,-73,-74,58,-47,-65,-50,-84,58,-86,-87,-52,-94,94,-56,-58,-59,-61,-62,-63,-64,-66,-67,26,26,26,26,-85,58,58,-44,-45,]),'TIMES':([15,20,26,28,30,35,36,37,38,41,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,74,75,76,78,79,80,82,91,93,94,95,96,97,98,99,100,101,102,143,144,145,146,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'PLUS':([15,20,21,24,26,27,28,29,30,32,34,35,36,37,38,40,41,43,44,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,85,86,87,88,89,90,91,93,94,95,96,97,98,99,100,101,102,118,119,120,121,122,125,127,129,130,132,141,142,143,144,145,146,147,],[30,30,-90,67,30,-93,30,-68,30,-71,-75,30,30,30,30,-83,30,-91,-92,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-76,30,-93,-93,-79,30,30,30,-78,30,30,30,30,-88,-89,-77,-80,-81,-82,30,30,30,30,30,30,30,30,30,30,30,-69,-70,-72,-73,-74,67,-84,-86,-87,-94,67,67,30,30,30,30,-85,]),'LOGICAL_NOT':([15,20,26,28,30,35,36,37,38,41,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,74,75,76,78,79,80,82,91,93,94,95,96,97,98,99,100,101,102,143,144,145,146,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'INCREMENT':([15,20,21,26,27,28,30,34,35,36,37,38,40,41,43,44,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,74,75,76,78,79,80,82,85,86,91,93,94,95,96,97,98,99,100,101,102,127,129,130,132,143,144,145,146,147,],[37,37,-90,37,-93,37,37,85,37,37,37,37,-83,37,-91,-92,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-93,-93,37,37,37,37,37,37,37,-88,-89,37,37,37,37,37,37,37,37,37,37,37,-84,-86,-87,-94,37,37,37,37,-85,]),'DECREMENT':([15,20,21,26,27,28,30,34,35,36,37,38,40,41,43,44,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,74,75,76,78,79,80,82,85,86,91,93,94,95,96,97,98,99,100,101,102,127,129,130,132,143,144,145,146,147,],[38,38,-90,38,-93,38,38,86,38,38,38,38,-83,38,-91,-92,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-93,-93,38,38,38,38,38,38,38,-88,-89,38,38,38,38,38,38,38,38,38,38,38,-84,-86,-87,-94,38,38,38,38,-85,]),'CONSTANT':([15,16,19,20,26,28,30,35,36,37,38,41,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,74,75,76,78,79,80,82,91,93,94,95,96,97,98,99,100,101,102,143,144,145,146,],[43,49,51,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'STRING_CONSTANT':([15,20,26,28,30,35,36,37,38,41,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,74,75,76,78,79,80,82,91,93,94,95,96,97,98,99,100,101,102,143,144,145,146,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'OPEN_PAREN':([15,20,21,26,27,28,30,34,35,36,37,38,40,41,43,44,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,74,75,76,78,79,80,82,85,86,91,93,94,95,96,97,98,99,100,101,102,127,129,130,132,143,144,145,146,147,],[41,41,-90,41,-93,41,41,81,41,41,41,41,-83,41,-91,-92,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-93,-93,41,41,41,41,41,41,41,-88,-89,41,41,41,41,41,41,41,41,41,41,41,-84,-86,-87,-94,41,41,41,41,-85,]),'DOT':([21,27,34,40,43,44,71,72,85,86,127,129,130,132,147,],[-90,-93,83,-83,-91,-92,-93,-93,-88,-89,-84,-86,-87,-94,-85,]),'ARROW':([21,27,34,40,43,44,71,72,85,86,127,129,130,132,147,],[-90,-93,84,-83,-91,-92,-93,-93,-88,-89,-84,-86,-87,-94,-85,]),'MUL':([21,27,29,32,34,40,43,44,69,71,72,73,77,85,86,87,88,89,90,118,119,120,121,122,127,129,130,132,147,],[-90,-93,74,-71,-75,-83,-91,-92,-76,-93,-93,-79,-78,-88,-89,-77,-80,-81,-82,74,74,-72,-73,-74,-84,-86,-87,-94,-85,]),'DIV':([21,27,29,32,34,40,43,44,69,71,72,73,77,85,86,87,88,89,90,118,119,120,121,122,127,129,130,132,147,],[-90,-93,75,-71,-75,-83,-91,-92,-76,-93,-93,-79,-78,-88,-89,-77,-80,-81,-82,75,75,-72,-73,-74,-84,-86,-87,-94,-85,]),'MOD':([21,27,29,32,34,40,43,44,69,71,72,73,77,85,86,87,88,89,90,118,119,120,121,122,127,129,130,132,147,],[-90,-93,76,-71,-75,-83,-91,-92,-76,-93,-93,-79,-78,-88,-89,-77,-80,-81,-82,76,76,-72,-73,-74,-84,-86,-87,-94,-85,]),'LOGICAL_OR':([21,22,24,25,27,29,31,32,33,34,39,40,42,43,44,45,46,47,48,52,69,71,72,73,77,85,86,87,88,89,90,92,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,147,148,150,152,153,],[-90,54,-25,-26,-93,-68,79,-71,-46,-75,-49,-83,-51,-91,-92,-53,-55,-57,-60,54,-76,-93,-93,-79,-78,-88,-89,-77,-80,-81,-82,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-69,-70,-72,-73,-74,54,-47,-65,-50,-84,54,-86,-87,-52,-94,-54,-56,-58,-59,-61,-62,-63,-64,-66,-67,-85,54,54,-44,-45,]),'LOGICAL_AND':([21,22,24,25,27,29,31,32,33,34,39,40,42,43,44,45,46,47,48,52,69,71,72,73,77,85,86,87,88,89,90,92,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,147,148,150,152,153,],[-90,55,-25,-26,-93,-68,-43,-71,80,-75,-49,-83,-51,-91,-92,-53,-55,-57,-60,55,-76,-93,-93,-79,-78,-88,-89,-77,-80,-81,-82,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-69,-70,-72,-73,-74,55,80,-65,-50,-84,55,-86,-87,-52,-94,-54,-56,-58,-59,-61,-62,-63,-64,-66,-67,-85,55,55,-44,-45,]),'BITWISE_OR':([21,22,24,25,27,29,31,32,33,34,39,40,42,43,44,45,46,47,48,52,69,71,72,73,77,85,86,87,88,89,90,92,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,147,148,150,152,153,],[-90,56,-25,-26,-93,-68,-43,-71,-46,-75,91,-83,-51,-91,-92,-53,-55,-57,-60,56,-76,-93,-93,-79,-78,-88,-89,-77,-80,-81,-82,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-69,-70,-72,-73,-74,56,-47,-65,91,-84,56,-86,-87,-52,-94,-54,-56,-58,-59,-61,-62,-63,-64,-66,-67,-85,56,56,-44,-45,]),'BITWISE_XOR':([21,22,24,25,27,29,31,32,33,34,39,40,42,43,44,45,46,47,48,52,69,71,72,73,77,85,86,87,88,89,90,92,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,147,148,150,152,153,],[-90,57,-25,-26,-93,-68,-43,-71,-46,-75,-49,-83,93,-91,-92,-53,-55,-57,-60,57,-76,-93,-93,-79,-78,-88,-89,-77,-80,-81,-82,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-69,-70,-72,-73,-74,57,-47,-65,-50,-84,57,-86,-87,93,-94,-54,-56,-58,-59,-61,-62,-63,-64,-66,-67,-85,57,57,-44,-45,]),'EQUALS':([21,22,24,25,27,29,31,32,33,34,39,40,42,43,44,45,46,47,48,52,69,71,72,73,77,85,86,87,88,89,90,92,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,147,148,150,152,153,],[-90,59,-25,-26,-93,-68,-43,-71,-46,-75,-49,-83,-51,-91,-92,-53,95,-57,-60,59,-76,-93,-93,-79,-78,-88,-89,-77,-80,-81,-82,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-69,-70,-72,-73,-74,59,-47,-65,-50,-84,59,-86,-87,-52,-94,-54,95,-58,-59,-61,-62,-63,-64,-66,-67,-85,59,59,-44,-45,]),'NOT_EQUALS':([21,22,24,25,27,29,31,32,33,34,39,40,42,43,44,45,46,47,48,52,69,71,72,73,77,85,86,87,88,89,90,92,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,147,148,150,152,153,],[-90,60,-25,-26,-93,-68,-43,-71,-46,-75,-49,-83,-51,-91,-92,-53,96,-57,-60,60,-76,-93,-93,-79,-78,-88,-89,-77,-80,-81,-82,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-69,-70,-72,-73,-74,60,-47,-65,-50,-84,60,-86,-87,-52,-94,-54,96,-58,-59,-61,-62,-63,-64,-66,-67,-85,60,60,-44,-45,]),'LESS_THAN':([21,22,24,25,27,29,31,32,33,34,39,40,42,43,44,45,46,47,48,52,69,71,72,73,77,85,86,87,88,89,90,92,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,147,148,150,152,153,],[-90,61,-25,-26,-93,-68,-43,-71,-46,-75,-49,-83,-51,-91,-92,-53,-55,97,-60,61,-76,-93,-93,-79,-78,-88,-89,-77,-80,-81,-82,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-69,-70,-72,-73,-74,61,-47,-65,-50,-84,61,-86,-87,-52,-94,-54,-56,97,97,-61,-62,-63,-64,-66,-67,-85,61,61,-44,-45,]),'GREATER_THAN':([21,22,24,25,27,29,31,32,33,34,39,40,42,43,44,45,46,47,48,52,69,71,72,73,77,85,86,87,88,89,90,92,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,147,148,150,152,153,],[-90,62,-25,-26,-93,-68,-43,-71,-46,-75,-49,-83,-51,-91,-92,-53,-55,98,-60,62,-76,-93,-93,-79,-78,-88,-89,-77,-80,-81,-82,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-69,-70,-72,-73,-74,62,-47,-65,-50,-84,62,-86,-87,-52,-94,-54,-56,98,98,-61,-62,-63,-64,-66,-67,-85,62,62,-44,-45,]),'LESS_EQUALS':([21,22,24,25,27,29,31,32,33,34,39,40,42,43,44,45,46,47,48,52,69,71,72,73,77,85,86,87,88,89,90,92,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,147,148,150,152,153,],[-90,63,-25,-26,-93,-68,-43,-71,-46,-75,-49,-83,-51,-91,-92,-53,-55,99,-60,63,-76,-93,-93,-79,-78,-88,-89,-77,-80,-81,-82,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-69,-70,-72,-73,-74,63,-47,-65,-50,-84,63,-86,-87,-52,-94,-54,-56,99,99,-61,-62,-63,-64,-66,-67,-85,63,63,-44,-45,]),'GREATER_EQUALS':([21,22,24,25,27,29,31,32,33,34,39,40,42,43,44,45,46,47,48,52,69,71,72,73,77,85,86,87,88,89,90,92,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,147,148,150,152,153,],[-90,64,-25,-26,-93,-68,-43,-71,-46,-75,-49,-83,-51,-91,-92,-53,-55,100,-60,64,-76,-93,-93,-79,-78,-88,-89,-77,-80,-81,-82,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-69,-70,-72,-73,-74,64,-47,-65,-50,-84,64,-86,-87,-52,-94,-54,-56,100,100,-61,-62,-63,-64,-66,-67,-85,64,64,-44,-45,]),'SHIFT_LEFT':([21,22,24,25,27,29,31,32,33,34,39,40,42,43,44,45,46,47,48,52,69,71,72,73,77,85,86,87,88,89,90,92,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,147,148,150,152,153,],[-90,65,-25,-26,-93,-68,-43,-71,-46,-75,-49,-83,-51,-91,-92,-53,-55,-57,101,65,-76,-93,-93,-79,-78,-88,-89,-77,-80,-81,-82,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-69,-70,-72,-73,-74,65,-47,-65,-50,-84,65,-86,-87,-52,-94,-54,-56,-58,-59,101,101,101,101,-66,-67,-85,65,65,-44,-45,]),'SHIFT_RIGHT':([21,22,24,25,27,29,31,32,33,34,39,40,42,43,44,45,46,47,48,52,69,71,72,73,77,85,86,87,88,89,90,92,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,147,148,150,152,153,],[-90,66,-25,-26,-93,-68,-43,-71,-46,-75,-49,-83,-51,-91,-92,-53,-55,-57,102,66,-76,-93,-93,-79,-78,-88,-89,-77,-80,-81,-82,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-69,-70,-72,-73,-74,66,-47,-65,-50,-84,66,-86,-87,-52,-94,-54,-56,-58,-59,102,102,102,102,-66,-67,-85,66,66,-44,-45,]),'CONDITIONAL_OPERATOR':([21,24,25,27,29,31,32,33,34,39,40,42,43,44,45,46,47,48,69,71,72,73,77,85,86,87,88,89,90,118,119,120,121,122,124,125,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,147,152,153,],[-90,-65,-48,-93,-68,78,-71,-46,-75,-49,-83,-51,-91,-92,-53,-55,-57,-60,-76,-93,-93,-79,-78,-88,-89,-77,-80,-81,-82,-69,-70,-72,-73,-74,-47,-65,-50,-84,-86,-87,-52,-94,-54,-56,-58,-59,-61,-62,-63,-64,-66,-67,-85,-44,-45,]),'CLOSE_PAREN':([21,24,25,29,31,32,33,34,39,40,42,43,44,45,46,47,48,69,71,73,77,81,85,86,87,88,89,90,92,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,125,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,147,152,153,],[-90,-25,-26,-68,-43,-71,-46,-75,-49,-83,-51,-91,-92,-53,-55,-57,-60,-76,-93,-79,-78,127,-88,-89,-77,-80,-81,-82,132,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-69,-70,-72,-73,-74,-47,-65,-50,-84,-86,-87,-52,-94,-54,-56,-58,-59,-61,-62,-63,-64,-66,-67,-85,-44,-45,]),'COLON':([21,24,25,29,31,32,33,34,39,40,42,43,44,45,46,47,48,69,71,73,77,85,86,87,88,89,90,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,147,152,153,],[-90,-25,-26,-68,-43,-71,-46,-75,-49,-83,-51,-91,-92,-53,-55,-57,-60,-76,-93,-79,-78,-88,-89,-77,-80,-81,-82,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-69,-70,-72,-73,-74,145,-47,-65,-50,-84,-86,-87,-52,-94,-54,-56,-58,-59,-61,-62,-63,-64,-66,-67,-85,-44,-45,]),'CLOSE_BRACKET':([21,24,25,29,31,32,33,34,39,40,42,43,44,45,46,47,48,49,51,69,71,73,77,85,86,87,88,89,90,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,147,152,153,],[-90,-25,-26,-68,-43,-71,-46,-75,-49,-83,-51,-91,-92,-53,-55,-57,-60,103,104,-76,-93,-79,-78,-88,-89,-77,-80,-81,-82,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-69,-70,-72,-73,-74,-47,-65,-50,-84,147,-86,-87,-52,-94,-54,-56,-58,-59,-61,-62,-63,-64,-66,-67,-85,-44,-45,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'empty':([0,],[2,]),'declaration':([1,],[3,]),'type':([1,],[4,]),'declaration_without_type':([1,],[5,]),'declaration_list':([4,],[11,]),'declaration_item':([4,18,],[12,50,]),'expression':([15,20,41,54,55,56,57,58,59,60,61,62,63,64,65,66,78,82,143,144,],[22,52,92,105,106,107,108,109,110,111,112,113,114,115,116,117,123,128,148,150,]),'float_constant':([15,20,143,144,],[23,53,149,151,]),'additive_expression':([15,20,41,54,55,56,57,58,59,60,61,62,63,64,65,66,78,79,80,82,91,93,94,95,96,97,98,99,100,101,102,143,144,145,146,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,125,125,24,125,125,125,125,125,125,125,125,125,141,142,24,24,125,125,]),'conditional_expression':([15,20,41,54,55,56,57,58,59,60,61,62,63,64,65,66,78,82,143,144,145,146,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,152,153,]),'multiplicative_expression':([15,20,41,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,78,79,80,82,91,93,94,95,96,97,98,99,100,101,102,143,144,145,146,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,118,119,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'logical_or_expression':([15,20,41,54,55,56,57,58,59,60,61,62,63,64,65,66,78,82,143,144,145,146,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'unary_expression':([15,20,26,28,30,35,36,37,38,41,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,74,75,76,78,79,80,82,91,93,94,95,96,97,98,99,100,101,102,143,144,145,146,],[32,32,69,73,77,87,88,89,90,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,73,120,121,122,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'logical_and_expression':([15,20,41,54,55,56,57,58,59,60,61,62,63,64,65,66,78,79,82,143,144,145,146,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,124,33,33,33,33,33,]),'postfix_expression':([15,20,26,28,30,35,36,37,38,41,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,74,75,76,78,79,80,82,91,93,94,95,96,97,98,99,100,101,102,143,144,145,146,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'bitwise_or_expression':([15,20,41,54,55,56,57,58,59,60,61,62,63,64,65,66,78,79,80,82,143,144,145,146,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,126,39,39,39,39,39,]),'primary_expression':([15,20,26,28,30,35,36,37,38,41,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,74,75,76,78,79,80,82,91,93,94,95,96,97,98,99,100,101,102,143,144,145,146,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'bitwise_xor_expression':([15,20,41,54,55,56,57,58,59,60,61,62,63,64,65,66,78,79,80,82,91,143,144,145,146,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,131,42,42,42,42,]),'bitwise_and_expression':([15,20,41,54,55,56,57,58,59,60,61,62,63,64,65,66,78,79,80,82,91,93,143,144,145,146,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,133,45,45,45,45,]),'equality_expression':([15,20,41,54,55,56,57,58,59,60,61,62,63,64,65,66,78,79,80,82,91,93,94,143,144,145,146,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,134,46,46,46,46,]),'relational_expression':([15,20,41,54,55,56,57,58,59,60,61,62,63,64,65,66,78,79,80,82,91,93,94,95,96,143,144,145,146,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,135,136,47,47,47,47,]),'shift_expression':([15,20,41,54,55,56,57,58,59,60,61,62,63,64,65,66,78,79,80,82,91,93,94,95,96,97,98,99,100,143,144,145,146,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,137,138,139,140,48,48,48,48,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program declaration','program',2,'p_program','gramma.py',25),
  ('program -> empty','program',1,'p_program','gramma.py',26),
  ('statement -> declaration','statement',1,'p_statement','gramma.py',35),
  ('statement -> expression_statement','statement',1,'p_statement','gramma.py',36),
  ('declaration -> type declaration_list SEMICOLON','declaration',3,'p_declaration','gramma.py',42),
  ('declaration -> declaration_without_type SEMICOLON','declaration',2,'p_declaration','gramma.py',43),
  ('declaration_list -> declaration_item','declaration_list',1,'p_declaration_list','gramma.py',52),
  ('declaration_list -> declaration_list COMMA declaration_item','declaration_list',3,'p_declaration_list','gramma.py',53),
  ('declaration_item -> IDENTIFIER','declaration_item',1,'p_declaration_item','gramma.py',62),
  ('declaration_item -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET','declaration_item',4,'p_declaration_item','gramma.py',63),
  ('declaration_item -> IDENTIFIER ASSIGN expression','declaration_item',3,'p_declaration_item','gramma.py',64),
  ('declaration_item -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN expression','declaration_item',6,'p_declaration_item','gramma.py',65),
  ('declaration_item -> IDENTIFIER ASSIGN float_constant','declaration_item',3,'p_declaration_item','gramma.py',66),
  ('declaration_item -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN float_constant','declaration_item',6,'p_declaration_item','gramma.py',67),
  ('declaration_without_type -> IDENTIFIER','declaration_without_type',1,'p_declaration_without_type','gramma.py',84),
  ('declaration_without_type -> IDENTIFIER ASSIGN expression','declaration_without_type',3,'p_declaration_without_type','gramma.py',85),
  ('declaration_without_type -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET','declaration_without_type',4,'p_declaration_without_type','gramma.py',86),
  ('declaration_without_type -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN expression','declaration_without_type',6,'p_declaration_without_type','gramma.py',87),
  ('declaration_without_type -> IDENTIFIER ASSIGN float_constant','declaration_without_type',3,'p_declaration_without_type','gramma.py',88),
  ('declaration_without_type -> IDENTIFIER OPEN_BRACKET CONSTANT CLOSE_BRACKET ASSIGN float_constant','declaration_without_type',6,'p_declaration_without_type','gramma.py',89),
  ('type -> INTEGER','type',1,'p_type','gramma.py',108),
  ('type -> CHAR','type',1,'p_type','gramma.py',109),
  ('type -> FLOAT','type',1,'p_type','gramma.py',110),
  ('type -> DOUBLE','type',1,'p_type','gramma.py',111),
  ('expression -> additive_expression','expression',1,'p_expression','gramma.py',117),
  ('expression -> conditional_expression','expression',1,'p_expression','gramma.py',118),
  ('expression -> expression LOGICAL_OR expression','expression',3,'p_expression','gramma.py',119),
  ('expression -> expression LOGICAL_AND expression','expression',3,'p_expression','gramma.py',120),
  ('expression -> expression BITWISE_OR expression','expression',3,'p_expression','gramma.py',121),
  ('expression -> expression BITWISE_XOR expression','expression',3,'p_expression','gramma.py',122),
  ('expression -> expression BITWISE_AND expression','expression',3,'p_expression','gramma.py',123),
  ('expression -> expression EQUALS expression','expression',3,'p_expression','gramma.py',124),
  ('expression -> expression NOT_EQUALS expression','expression',3,'p_expression','gramma.py',125),
  ('expression -> expression LESS_THAN expression','expression',3,'p_expression','gramma.py',126),
  ('expression -> expression GREATER_THAN expression','expression',3,'p_expression','gramma.py',127),
  ('expression -> expression LESS_EQUALS expression','expression',3,'p_expression','gramma.py',128),
  ('expression -> expression GREATER_EQUALS expression','expression',3,'p_expression','gramma.py',129),
  ('expression -> expression SHIFT_LEFT expression','expression',3,'p_expression','gramma.py',130),
  ('expression -> expression SHIFT_RIGHT expression','expression',3,'p_expression','gramma.py',131),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','gramma.py',140),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','gramma.py',146),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','gramma.py',147),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','gramma.py',156),
  ('conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','gramma.py',157),
  ('conditional_expression -> logical_or_expression CONDITIONAL_OPERATOR expression COMMA conditional_expression','conditional_expression',5,'p_conditional_expression','gramma.py',158),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','gramma.py',171),
  ('logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression','logical_or_expression',3,'p_logical_or_expression','gramma.py',172),
  ('logical_or_expression -> conditional_expression','logical_or_expression',1,'p_logical_or_expression','gramma.py',173),
  ('logical_and_expression -> bitwise_or_expression','logical_and_expression',1,'p_logical_and_expression','gramma.py',182),
  ('logical_and_expression -> logical_and_expression LOGICAL_AND bitwise_or_expression','logical_and_expression',3,'p_logical_and_expression','gramma.py',183),
  ('bitwise_or_expression -> bitwise_xor_expression','bitwise_or_expression',1,'p_bitwise_or_expression','gramma.py',192),
  ('bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression','bitwise_or_expression',3,'p_bitwise_or_expression','gramma.py',193),
  ('bitwise_xor_expression -> bitwise_and_expression','bitwise_xor_expression',1,'p_bitwise_xor_expression','gramma.py',202),
  ('bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression','bitwise_xor_expression',3,'p_bitwise_xor_expression','gramma.py',203),
  ('bitwise_and_expression -> equality_expression','bitwise_and_expression',1,'p_bitwise_and_expression','gramma.py',212),
  ('bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression','bitwise_and_expression',3,'p_bitwise_and_expression','gramma.py',213),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','gramma.py',222),
  ('equality_expression -> equality_expression EQUALS relational_expression','equality_expression',3,'p_equality_expression','gramma.py',223),
  ('equality_expression -> equality_expression NOT_EQUALS relational_expression','equality_expression',3,'p_equality_expression','gramma.py',224),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','gramma.py',233),
  ('relational_expression -> relational_expression LESS_THAN shift_expression','relational_expression',3,'p_relational_expression','gramma.py',234),
  ('relational_expression -> relational_expression GREATER_THAN shift_expression','relational_expression',3,'p_relational_expression','gramma.py',235),
  ('relational_expression -> relational_expression LESS_EQUALS shift_expression','relational_expression',3,'p_relational_expression','gramma.py',236),
  ('relational_expression -> relational_expression GREATER_EQUALS shift_expression','relational_expression',3,'p_relational_expression','gramma.py',237),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','gramma.py',246),
  ('shift_expression -> shift_expression SHIFT_LEFT additive_expression','shift_expression',3,'p_shift_expression','gramma.py',247),
  ('shift_expression -> shift_expression SHIFT_RIGHT additive_expression','shift_expression',3,'p_shift_expression','gramma.py',248),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','gramma.py',257),
  ('additive_expression -> additive_expression PLUS multiplicative_expression','additive_expression',3,'p_additive_expression','gramma.py',258),
  ('additive_expression -> additive_expression MINUS multiplicative_expression','additive_expression',3,'p_additive_expression','gramma.py',259),
  ('multiplicative_expression -> unary_expression','multiplicative_expression',1,'p_multiplicative_expression','gramma.py',268),
  ('multiplicative_expression -> multiplicative_expression MUL unary_expression','multiplicative_expression',3,'p_multiplicative_expression','gramma.py',269),
  ('multiplicative_expression -> multiplicative_expression DIV unary_expression','multiplicative_expression',3,'p_multiplicative_expression','gramma.py',270),
  ('multiplicative_expression -> multiplicative_expression MOD unary_expression','multiplicative_expression',3,'p_multiplicative_expression','gramma.py',271),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','gramma.py',280),
  ('unary_expression -> BITWISE_AND unary_expression','unary_expression',2,'p_unary_expression','gramma.py',281),
  ('unary_expression -> TIMES unary_expression','unary_expression',2,'p_unary_expression','gramma.py',282),
  ('unary_expression -> PLUS unary_expression','unary_expression',2,'p_unary_expression','gramma.py',283),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_unary_expression','gramma.py',284),
  ('unary_expression -> LOGICAL_NOT unary_expression','unary_expression',2,'p_unary_expression','gramma.py',285),
  ('unary_expression -> INCREMENT unary_expression','unary_expression',2,'p_unary_expression','gramma.py',286),
  ('unary_expression -> DECREMENT unary_expression','unary_expression',2,'p_unary_expression','gramma.py',287),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','gramma.py',300),
  ('postfix_expression -> postfix_expression OPEN_PAREN CLOSE_PAREN','postfix_expression',3,'p_postfix_expression','gramma.py',301),
  ('postfix_expression -> postfix_expression OPEN_BRACKET expression CLOSE_BRACKET','postfix_expression',4,'p_postfix_expression','gramma.py',302),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression','gramma.py',303),
  ('postfix_expression -> postfix_expression ARROW IDENTIFIER','postfix_expression',3,'p_postfix_expression','gramma.py',304),
  ('postfix_expression -> postfix_expression INCREMENT','postfix_expression',2,'p_postfix_expression','gramma.py',305),
  ('postfix_expression -> postfix_expression DECREMENT','postfix_expression',2,'p_postfix_expression','gramma.py',306),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','gramma.py',319),
  ('primary_expression -> CONSTANT','primary_expression',1,'p_primary_expression','gramma.py',320),
  ('primary_expression -> STRING_CONSTANT','primary_expression',1,'p_primary_expression','gramma.py',321),
  ('primary_expression -> FLOAT','primary_expression',1,'p_primary_expression','gramma.py',322),
  ('primary_expression -> OPEN_PAREN expression CLOSE_PAREN','primary_expression',3,'p_primary_expression','gramma.py',323),
  ('basic_expression -> unary_expression','basic_expression',1,'p_basic_expression','gramma.py',332),
  ('basic_expression -> basic_expression PLUS basic_expression','basic_expression',3,'p_basic_expression','gramma.py',333),
  ('basic_expression -> basic_expression MINUS basic_expression','basic_expression',3,'p_basic_expression','gramma.py',334),
  ('basic_expression -> basic_expression MUL basic_expression','basic_expression',3,'p_basic_expression','gramma.py',335),
  ('basic_expression -> basic_expression DIV basic_expression','basic_expression',3,'p_basic_expression','gramma.py',336),
  ('basic_expression -> basic_expression MOD basic_expression','basic_expression',3,'p_basic_expression','gramma.py',337),
  ('basic_expression -> basic_expression INCREMENT','basic_expression',2,'p_basic_expression','gramma.py',338),
  ('basic_expression -> basic_expression DECREMENT','basic_expression',2,'p_basic_expression','gramma.py',339),
  ('constant -> INTEGER','constant',1,'p_constant','gramma.py',351),
  ('constant -> CHAR','constant',1,'p_constant','gramma.py',352),
  ('constant -> float_constant','constant',1,'p_constant','gramma.py',353),
  ('integer_constant -> INTEGER','integer_constant',1,'p_integer_constant','gramma.py',360),
  ('integer_constant -> FLOAT','integer_constant',1,'p_integer_constant','gramma.py',361),
  ('integer_constant -> MINUS INTEGER','integer_constant',2,'p_integer_constant','gramma.py',362),
  ('integer_constant -> MINUS FLOAT','integer_constant',2,'p_integer_constant','gramma.py',363),
  ('float_constant -> FLOAT','float_constant',1,'p_float_constant','gramma.py',372),
  ('float_constant -> MINUS FLOAT','float_constant',2,'p_float_constant','gramma.py',373),
  ('assignment_operator -> =','assignment_operator',1,'p_assignment_operator','gramma.py',382),
  ('empty -> <empty>','empty',0,'p_empty','gramma.py',387),
]
